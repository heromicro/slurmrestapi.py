# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.37
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class Dbv0037Association(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Association description
    """


    class MetaOapg:
        
        class properties:
            is_default = schemas.IntSchema
            account = schemas.StrSchema
            cluster = schemas.StrSchema
            
            
            class default(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        qos = schemas.StrSchema
                        __annotations__ = {
                            "qos": qos,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["qos"]) -> MetaOapg.properties.qos: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["qos", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["qos"]) -> typing.Union[MetaOapg.properties.qos, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["qos", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    qos: typing.Union[MetaOapg.properties.qos, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'default':
                    return super().__new__(
                        cls,
                        *_args,
                        qos=qos,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class flags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'flags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class max(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class jobs(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    active = schemas.IntSchema
                                    accruing = schemas.IntSchema
                                    total = schemas.IntSchema
                                    
                                    
                                    class per(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                wall_clock = schemas.IntSchema
                                                __annotations__ = {
                                                    "wall_clock": wall_clock,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["wall_clock"]) -> MetaOapg.properties.wall_clock: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["wall_clock", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["wall_clock"]) -> typing.Union[MetaOapg.properties.wall_clock, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["wall_clock", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                            wall_clock: typing.Union[MetaOapg.properties.wall_clock, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'per':
                                            return super().__new__(
                                                cls,
                                                *_args,
                                                wall_clock=wall_clock,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    __annotations__ = {
                                        "active": active,
                                        "accruing": accruing,
                                        "total": total,
                                        "per": per,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["accruing"]) -> MetaOapg.properties.accruing: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["per"]) -> MetaOapg.properties.per: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["active", "accruing", "total", "per", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["accruing"]) -> typing.Union[MetaOapg.properties.accruing, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["per"]) -> typing.Union[MetaOapg.properties.per, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["active", "accruing", "total", "per", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                active: typing.Union[MetaOapg.properties.active, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                accruing: typing.Union[MetaOapg.properties.accruing, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                per: typing.Union[MetaOapg.properties.per, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'jobs':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    active=active,
                                    accruing=accruing,
                                    total=total,
                                    per=per,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class per(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    
                                    
                                    class account(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                wall_clock = schemas.IntSchema
                                                __annotations__ = {
                                                    "wall_clock": wall_clock,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["wall_clock"]) -> MetaOapg.properties.wall_clock: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["wall_clock", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["wall_clock"]) -> typing.Union[MetaOapg.properties.wall_clock, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["wall_clock", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                            wall_clock: typing.Union[MetaOapg.properties.wall_clock, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'account':
                                            return super().__new__(
                                                cls,
                                                *_args,
                                                wall_clock=wall_clock,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    __annotations__ = {
                                        "account": account,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["account", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> typing.Union[MetaOapg.properties.account, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                account: typing.Union[MetaOapg.properties.account, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'per':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    account=account,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class tres(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    
                                    
                                    class group(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                            
                                                @staticmethod
                                                def minutes() -> typing.Type['Dbv0037TresList']:
                                                    return Dbv0037TresList
                                            
                                                @staticmethod
                                                def active() -> typing.Type['Dbv0037TresList']:
                                                    return Dbv0037TresList
                                                __annotations__ = {
                                                    "minutes": minutes,
                                                    "active": active,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["minutes"]) -> 'Dbv0037TresList': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["active"]) -> 'Dbv0037TresList': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["minutes", "active", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["minutes"]) -> typing.Union['Dbv0037TresList', schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union['Dbv0037TresList', schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["minutes", "active", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                            minutes: typing.Union['Dbv0037TresList', schemas.Unset] = schemas.unset,
                                            active: typing.Union['Dbv0037TresList', schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'group':
                                            return super().__new__(
                                                cls,
                                                *_args,
                                                minutes=minutes,
                                                active=active,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    
                                    class per(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                            
                                                @staticmethod
                                                def job() -> typing.Type['Dbv0037TresList']:
                                                    return Dbv0037TresList
                                            
                                                @staticmethod
                                                def node() -> typing.Type['Dbv0037TresList']:
                                                    return Dbv0037TresList
                                                __annotations__ = {
                                                    "job": job,
                                                    "node": node,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["job"]) -> 'Dbv0037TresList': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["node"]) -> 'Dbv0037TresList': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["job", "node", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["job"]) -> typing.Union['Dbv0037TresList', schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["node"]) -> typing.Union['Dbv0037TresList', schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["job", "node", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                            job: typing.Union['Dbv0037TresList', schemas.Unset] = schemas.unset,
                                            node: typing.Union['Dbv0037TresList', schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'per':
                                            return super().__new__(
                                                cls,
                                                *_args,
                                                job=job,
                                                node=node,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                
                                    @staticmethod
                                    def total() -> typing.Type['Dbv0037TresList']:
                                        return Dbv0037TresList
                                    
                                    
                                    class minutes(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                
                                                
                                                class per(
                                                    schemas.DictSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        
                                                        class properties:
                                                        
                                                            @staticmethod
                                                            def job() -> typing.Type['Dbv0037TresList']:
                                                                return Dbv0037TresList
                                                            __annotations__ = {
                                                                "job": job,
                                                            }
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["job"]) -> 'Dbv0037TresList': ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                    
                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["job", ], str]):
                                                        # dict_instance[name] accessor
                                                        return super().__getitem__(name)
                                                    
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["job"]) -> typing.Union['Dbv0037TresList', schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                    
                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["job", ], str]):
                                                        return super().get_item_oapg(name)
                                                    
                                                
                                                    def __new__(
                                                        cls,
                                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                                        job: typing.Union['Dbv0037TresList', schemas.Unset] = schemas.unset,
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                    ) -> 'per':
                                                        return super().__new__(
                                                            cls,
                                                            *_args,
                                                            job=job,
                                                            _configuration=_configuration,
                                                            **kwargs,
                                                        )
                                            
                                                @staticmethod
                                                def total() -> typing.Type['Dbv0037TresList']:
                                                    return Dbv0037TresList
                                                __annotations__ = {
                                                    "per": per,
                                                    "total": total,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["per"]) -> MetaOapg.properties.per: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["total"]) -> 'Dbv0037TresList': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["per", "total", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["per"]) -> typing.Union[MetaOapg.properties.per, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union['Dbv0037TresList', schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["per", "total", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                            per: typing.Union[MetaOapg.properties.per, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                            total: typing.Union['Dbv0037TresList', schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'minutes':
                                            return super().__new__(
                                                cls,
                                                *_args,
                                                per=per,
                                                total=total,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    __annotations__ = {
                                        "group": group,
                                        "per": per,
                                        "total": total,
                                        "minutes": minutes,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["group"]) -> MetaOapg.properties.group: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["per"]) -> MetaOapg.properties.per: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["total"]) -> 'Dbv0037TresList': ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["minutes"]) -> MetaOapg.properties.minutes: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["group", "per", "total", "minutes", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> typing.Union[MetaOapg.properties.group, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["per"]) -> typing.Union[MetaOapg.properties.per, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union['Dbv0037TresList', schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["minutes"]) -> typing.Union[MetaOapg.properties.minutes, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["group", "per", "total", "minutes", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                group: typing.Union[MetaOapg.properties.group, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                per: typing.Union[MetaOapg.properties.per, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                total: typing.Union['Dbv0037TresList', schemas.Unset] = schemas.unset,
                                minutes: typing.Union[MetaOapg.properties.minutes, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'tres':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    group=group,
                                    per=per,
                                    total=total,
                                    minutes=minutes,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "jobs": jobs,
                            "per": per,
                            "tres": tres,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["jobs"]) -> MetaOapg.properties.jobs: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["per"]) -> MetaOapg.properties.per: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["tres"]) -> MetaOapg.properties.tres: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["jobs", "per", "tres", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["jobs"]) -> typing.Union[MetaOapg.properties.jobs, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["per"]) -> typing.Union[MetaOapg.properties.per, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["tres"]) -> typing.Union[MetaOapg.properties.tres, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["jobs", "per", "tres", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    jobs: typing.Union[MetaOapg.properties.jobs, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    per: typing.Union[MetaOapg.properties.per, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    tres: typing.Union[MetaOapg.properties.tres, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'max':
                    return super().__new__(
                        cls,
                        *_args,
                        jobs=jobs,
                        per=per,
                        tres=tres,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class min(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        priority_threshold = schemas.IntSchema
                        __annotations__ = {
                            "priority_threshold": priority_threshold,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["priority_threshold"]) -> MetaOapg.properties.priority_threshold: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["priority_threshold", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["priority_threshold"]) -> typing.Union[MetaOapg.properties.priority_threshold, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["priority_threshold", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    priority_threshold: typing.Union[MetaOapg.properties.priority_threshold, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'min':
                    return super().__new__(
                        cls,
                        *_args,
                        priority_threshold=priority_threshold,
                        _configuration=_configuration,
                        **kwargs,
                    )
            parent_account = schemas.StrSchema
            partition = schemas.StrSchema
            priority = schemas.IntSchema
            
            
            class qos(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'qos':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            shares_raw = schemas.IntSchema
            
            
            class usage(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        accrue_job_count = schemas.IntSchema
                        group_used_wallclock = schemas.NumberSchema
                        fairshare_factor = schemas.NumberSchema
                        fairshare_shares = schemas.IntSchema
                        normalized_priority = schemas.IntSchema
                        normalized_shares = schemas.NumberSchema
                        effective_normalized_usage = schemas.NumberSchema
                        raw_usage = schemas.IntSchema
                        job_count = schemas.IntSchema
                        fairshare_level = schemas.NumberSchema
                        __annotations__ = {
                            "accrue_job_count": accrue_job_count,
                            "group_used_wallclock": group_used_wallclock,
                            "fairshare_factor": fairshare_factor,
                            "fairshare_shares": fairshare_shares,
                            "normalized_priority": normalized_priority,
                            "normalized_shares": normalized_shares,
                            "effective_normalized_usage": effective_normalized_usage,
                            "raw_usage": raw_usage,
                            "job_count": job_count,
                            "fairshare_level": fairshare_level,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["accrue_job_count"]) -> MetaOapg.properties.accrue_job_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["group_used_wallclock"]) -> MetaOapg.properties.group_used_wallclock: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["fairshare_factor"]) -> MetaOapg.properties.fairshare_factor: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["fairshare_shares"]) -> MetaOapg.properties.fairshare_shares: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["normalized_priority"]) -> MetaOapg.properties.normalized_priority: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["normalized_shares"]) -> MetaOapg.properties.normalized_shares: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["effective_normalized_usage"]) -> MetaOapg.properties.effective_normalized_usage: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["raw_usage"]) -> MetaOapg.properties.raw_usage: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["job_count"]) -> MetaOapg.properties.job_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["fairshare_level"]) -> MetaOapg.properties.fairshare_level: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["accrue_job_count", "group_used_wallclock", "fairshare_factor", "fairshare_shares", "normalized_priority", "normalized_shares", "effective_normalized_usage", "raw_usage", "job_count", "fairshare_level", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["accrue_job_count"]) -> typing.Union[MetaOapg.properties.accrue_job_count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["group_used_wallclock"]) -> typing.Union[MetaOapg.properties.group_used_wallclock, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["fairshare_factor"]) -> typing.Union[MetaOapg.properties.fairshare_factor, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["fairshare_shares"]) -> typing.Union[MetaOapg.properties.fairshare_shares, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["normalized_priority"]) -> typing.Union[MetaOapg.properties.normalized_priority, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["normalized_shares"]) -> typing.Union[MetaOapg.properties.normalized_shares, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["effective_normalized_usage"]) -> typing.Union[MetaOapg.properties.effective_normalized_usage, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["raw_usage"]) -> typing.Union[MetaOapg.properties.raw_usage, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["job_count"]) -> typing.Union[MetaOapg.properties.job_count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["fairshare_level"]) -> typing.Union[MetaOapg.properties.fairshare_level, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accrue_job_count", "group_used_wallclock", "fairshare_factor", "fairshare_shares", "normalized_priority", "normalized_shares", "effective_normalized_usage", "raw_usage", "job_count", "fairshare_level", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    accrue_job_count: typing.Union[MetaOapg.properties.accrue_job_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    group_used_wallclock: typing.Union[MetaOapg.properties.group_used_wallclock, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    fairshare_factor: typing.Union[MetaOapg.properties.fairshare_factor, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    fairshare_shares: typing.Union[MetaOapg.properties.fairshare_shares, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    normalized_priority: typing.Union[MetaOapg.properties.normalized_priority, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    normalized_shares: typing.Union[MetaOapg.properties.normalized_shares, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    effective_normalized_usage: typing.Union[MetaOapg.properties.effective_normalized_usage, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    raw_usage: typing.Union[MetaOapg.properties.raw_usage, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    job_count: typing.Union[MetaOapg.properties.job_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    fairshare_level: typing.Union[MetaOapg.properties.fairshare_level, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'usage':
                    return super().__new__(
                        cls,
                        *_args,
                        accrue_job_count=accrue_job_count,
                        group_used_wallclock=group_used_wallclock,
                        fairshare_factor=fairshare_factor,
                        fairshare_shares=fairshare_shares,
                        normalized_priority=normalized_priority,
                        normalized_shares=normalized_shares,
                        effective_normalized_usage=effective_normalized_usage,
                        raw_usage=raw_usage,
                        job_count=job_count,
                        fairshare_level=fairshare_level,
                        _configuration=_configuration,
                        **kwargs,
                    )
            user = schemas.StrSchema
            __annotations__ = {
                "is_default": is_default,
                "account": account,
                "cluster": cluster,
                "default": default,
                "flags": flags,
                "max": max,
                "min": min,
                "parent_account": parent_account,
                "partition": partition,
                "priority": priority,
                "qos": qos,
                "shares_raw": shares_raw,
                "usage": usage,
                "user": user,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_default"]) -> MetaOapg.properties.is_default: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cluster"]) -> MetaOapg.properties.cluster: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default"]) -> MetaOapg.properties.default: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flags"]) -> MetaOapg.properties.flags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max"]) -> MetaOapg.properties.max: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["min"]) -> MetaOapg.properties.min: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent_account"]) -> MetaOapg.properties.parent_account: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partition"]) -> MetaOapg.properties.partition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qos"]) -> MetaOapg.properties.qos: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shares_raw"]) -> MetaOapg.properties.shares_raw: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usage"]) -> MetaOapg.properties.usage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["is_default", "account", "cluster", "default", "flags", "max", "min", "parent_account", "partition", "priority", "qos", "shares_raw", "usage", "user", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_default"]) -> typing.Union[MetaOapg.properties.is_default, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> typing.Union[MetaOapg.properties.account, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cluster"]) -> typing.Union[MetaOapg.properties.cluster, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default"]) -> typing.Union[MetaOapg.properties.default, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flags"]) -> typing.Union[MetaOapg.properties.flags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max"]) -> typing.Union[MetaOapg.properties.max, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["min"]) -> typing.Union[MetaOapg.properties.min, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent_account"]) -> typing.Union[MetaOapg.properties.parent_account, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partition"]) -> typing.Union[MetaOapg.properties.partition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> typing.Union[MetaOapg.properties.priority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qos"]) -> typing.Union[MetaOapg.properties.qos, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shares_raw"]) -> typing.Union[MetaOapg.properties.shares_raw, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usage"]) -> typing.Union[MetaOapg.properties.usage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union[MetaOapg.properties.user, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["is_default", "account", "cluster", "default", "flags", "max", "min", "parent_account", "partition", "priority", "qos", "shares_raw", "usage", "user", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        is_default: typing.Union[MetaOapg.properties.is_default, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        account: typing.Union[MetaOapg.properties.account, str, schemas.Unset] = schemas.unset,
        cluster: typing.Union[MetaOapg.properties.cluster, str, schemas.Unset] = schemas.unset,
        default: typing.Union[MetaOapg.properties.default, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        flags: typing.Union[MetaOapg.properties.flags, list, tuple, schemas.Unset] = schemas.unset,
        max: typing.Union[MetaOapg.properties.max, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        min: typing.Union[MetaOapg.properties.min, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        parent_account: typing.Union[MetaOapg.properties.parent_account, str, schemas.Unset] = schemas.unset,
        partition: typing.Union[MetaOapg.properties.partition, str, schemas.Unset] = schemas.unset,
        priority: typing.Union[MetaOapg.properties.priority, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        qos: typing.Union[MetaOapg.properties.qos, list, tuple, schemas.Unset] = schemas.unset,
        shares_raw: typing.Union[MetaOapg.properties.shares_raw, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        usage: typing.Union[MetaOapg.properties.usage, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        user: typing.Union[MetaOapg.properties.user, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Dbv0037Association':
        return super().__new__(
            cls,
            *_args,
            is_default=is_default,
            account=account,
            cluster=cluster,
            default=default,
            flags=flags,
            max=max,
            min=min,
            parent_account=parent_account,
            partition=partition,
            priority=priority,
            qos=qos,
            shares_raw=shares_raw,
            usage=usage,
            user=user,
            _configuration=_configuration,
            **kwargs,
        )

from slurmrestapi.model.dbv0037_tres_list import Dbv0037TresList
