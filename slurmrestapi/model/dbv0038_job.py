# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.38
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class Dbv0038Job(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Single job description
    """


    class MetaOapg:
        
        class properties:
            account = schemas.StrSchema
            
            
            class comment(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        administrator = schemas.StrSchema
                        job = schemas.StrSchema
                        system = schemas.StrSchema
                        __annotations__ = {
                            "administrator": administrator,
                            "job": job,
                            "system": system,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["administrator"]) -> MetaOapg.properties.administrator: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["job"]) -> MetaOapg.properties.job: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["system"]) -> MetaOapg.properties.system: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["administrator", "job", "system", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["administrator"]) -> typing.Union[MetaOapg.properties.administrator, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["job"]) -> typing.Union[MetaOapg.properties.job, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["system"]) -> typing.Union[MetaOapg.properties.system, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["administrator", "job", "system", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    administrator: typing.Union[MetaOapg.properties.administrator, str, schemas.Unset] = schemas.unset,
                    job: typing.Union[MetaOapg.properties.job, str, schemas.Unset] = schemas.unset,
                    system: typing.Union[MetaOapg.properties.system, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'comment':
                    return super().__new__(
                        cls,
                        *_args,
                        administrator=administrator,
                        job=job,
                        system=system,
                        _configuration=_configuration,
                        **kwargs,
                    )
            allocation_nodes = schemas.StrSchema
            
            
            class array(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        job_id = schemas.IntSchema
                        
                        
                        class limits(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    
                                    
                                    class max(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                
                                                
                                                class running(
                                                    schemas.DictSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        
                                                        class properties:
                                                            tasks = schemas.IntSchema
                                                            __annotations__ = {
                                                                "tasks": tasks,
                                                            }
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["tasks"]) -> MetaOapg.properties.tasks: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                    
                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tasks", ], str]):
                                                        # dict_instance[name] accessor
                                                        return super().__getitem__(name)
                                                    
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["tasks"]) -> typing.Union[MetaOapg.properties.tasks, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                    
                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tasks", ], str]):
                                                        return super().get_item_oapg(name)
                                                    
                                                
                                                    def __new__(
                                                        cls,
                                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                                        tasks: typing.Union[MetaOapg.properties.tasks, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                    ) -> 'running':
                                                        return super().__new__(
                                                            cls,
                                                            *_args,
                                                            tasks=tasks,
                                                            _configuration=_configuration,
                                                            **kwargs,
                                                        )
                                                __annotations__ = {
                                                    "running": running,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["running"]) -> MetaOapg.properties.running: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["running", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["running"]) -> typing.Union[MetaOapg.properties.running, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["running", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                            running: typing.Union[MetaOapg.properties.running, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'max':
                                            return super().__new__(
                                                cls,
                                                *_args,
                                                running=running,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    __annotations__ = {
                                        "max": max,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["max"]) -> MetaOapg.properties.max: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["max", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["max"]) -> typing.Union[MetaOapg.properties.max, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["max", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                max: typing.Union[MetaOapg.properties.max, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'limits':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    max=max,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        task = schemas.StrSchema
                        task_id = schemas.IntSchema
                        __annotations__ = {
                            "job_id": job_id,
                            "limits": limits,
                            "task": task,
                            "task_id": task_id,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["job_id"]) -> MetaOapg.properties.job_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["limits"]) -> MetaOapg.properties.limits: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["task"]) -> MetaOapg.properties.task: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["task_id"]) -> MetaOapg.properties.task_id: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["job_id", "limits", "task", "task_id", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["job_id"]) -> typing.Union[MetaOapg.properties.job_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["limits"]) -> typing.Union[MetaOapg.properties.limits, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["task"]) -> typing.Union[MetaOapg.properties.task, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["task_id"]) -> typing.Union[MetaOapg.properties.task_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["job_id", "limits", "task", "task_id", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    job_id: typing.Union[MetaOapg.properties.job_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    limits: typing.Union[MetaOapg.properties.limits, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    task: typing.Union[MetaOapg.properties.task, str, schemas.Unset] = schemas.unset,
                    task_id: typing.Union[MetaOapg.properties.task_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'array':
                    return super().__new__(
                        cls,
                        *_args,
                        job_id=job_id,
                        limits=limits,
                        task=task,
                        task_id=task_id,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class time(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        elapsed = schemas.IntSchema
                        eligible = schemas.IntSchema
                        end = schemas.IntSchema
                        start = schemas.IntSchema
                        submission = schemas.IntSchema
                        suspended = schemas.IntSchema
                        
                        
                        class system(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    seconds = schemas.IntSchema
                                    microseconds = schemas.IntSchema
                                    __annotations__ = {
                                        "seconds": seconds,
                                        "microseconds": microseconds,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["seconds"]) -> MetaOapg.properties.seconds: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["microseconds"]) -> MetaOapg.properties.microseconds: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["seconds", "microseconds", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["seconds"]) -> typing.Union[MetaOapg.properties.seconds, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["microseconds"]) -> typing.Union[MetaOapg.properties.microseconds, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["seconds", "microseconds", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                seconds: typing.Union[MetaOapg.properties.seconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                microseconds: typing.Union[MetaOapg.properties.microseconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'system':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    seconds=seconds,
                                    microseconds=microseconds,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class total(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    seconds = schemas.IntSchema
                                    microseconds = schemas.IntSchema
                                    __annotations__ = {
                                        "seconds": seconds,
                                        "microseconds": microseconds,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["seconds"]) -> MetaOapg.properties.seconds: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["microseconds"]) -> MetaOapg.properties.microseconds: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["seconds", "microseconds", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["seconds"]) -> typing.Union[MetaOapg.properties.seconds, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["microseconds"]) -> typing.Union[MetaOapg.properties.microseconds, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["seconds", "microseconds", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                seconds: typing.Union[MetaOapg.properties.seconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                microseconds: typing.Union[MetaOapg.properties.microseconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'total':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    seconds=seconds,
                                    microseconds=microseconds,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class user(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    seconds = schemas.IntSchema
                                    microseconds = schemas.IntSchema
                                    __annotations__ = {
                                        "seconds": seconds,
                                        "microseconds": microseconds,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["seconds"]) -> MetaOapg.properties.seconds: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["microseconds"]) -> MetaOapg.properties.microseconds: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["seconds", "microseconds", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["seconds"]) -> typing.Union[MetaOapg.properties.seconds, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["microseconds"]) -> typing.Union[MetaOapg.properties.microseconds, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["seconds", "microseconds", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                seconds: typing.Union[MetaOapg.properties.seconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                microseconds: typing.Union[MetaOapg.properties.microseconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'user':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    seconds=seconds,
                                    microseconds=microseconds,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        limit = schemas.IntSchema
                        __annotations__ = {
                            "elapsed": elapsed,
                            "eligible": eligible,
                            "end": end,
                            "start": start,
                            "submission": submission,
                            "suspended": suspended,
                            "system": system,
                            "total": total,
                            "user": user,
                            "limit": limit,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["elapsed"]) -> MetaOapg.properties.elapsed: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["eligible"]) -> MetaOapg.properties.eligible: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["end"]) -> MetaOapg.properties.end: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["submission"]) -> MetaOapg.properties.submission: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["suspended"]) -> MetaOapg.properties.suspended: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["system"]) -> MetaOapg.properties.system: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["limit"]) -> MetaOapg.properties.limit: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["elapsed", "eligible", "end", "start", "submission", "suspended", "system", "total", "user", "limit", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["elapsed"]) -> typing.Union[MetaOapg.properties.elapsed, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["eligible"]) -> typing.Union[MetaOapg.properties.eligible, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["end"]) -> typing.Union[MetaOapg.properties.end, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["start"]) -> typing.Union[MetaOapg.properties.start, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["submission"]) -> typing.Union[MetaOapg.properties.submission, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["suspended"]) -> typing.Union[MetaOapg.properties.suspended, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["system"]) -> typing.Union[MetaOapg.properties.system, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union[MetaOapg.properties.user, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["limit"]) -> typing.Union[MetaOapg.properties.limit, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["elapsed", "eligible", "end", "start", "submission", "suspended", "system", "total", "user", "limit", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    elapsed: typing.Union[MetaOapg.properties.elapsed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    eligible: typing.Union[MetaOapg.properties.eligible, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    end: typing.Union[MetaOapg.properties.end, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    start: typing.Union[MetaOapg.properties.start, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    submission: typing.Union[MetaOapg.properties.submission, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    suspended: typing.Union[MetaOapg.properties.suspended, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    system: typing.Union[MetaOapg.properties.system, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    total: typing.Union[MetaOapg.properties.total, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    user: typing.Union[MetaOapg.properties.user, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    limit: typing.Union[MetaOapg.properties.limit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'time':
                    return super().__new__(
                        cls,
                        *_args,
                        elapsed=elapsed,
                        eligible=eligible,
                        end=end,
                        start=start,
                        submission=submission,
                        suspended=suspended,
                        system=system,
                        total=total,
                        user=user,
                        limit=limit,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def association() -> typing.Type['Dbv0038AssociationShortInfo']:
                return Dbv0038AssociationShortInfo
            cluster = schemas.StrSchema
            constraints = schemas.StrSchema
        
            @staticmethod
            def derived_exit_code() -> typing.Type['Dbv0038JobExitCode']:
                return Dbv0038JobExitCode
        
            @staticmethod
            def exit_code() -> typing.Type['Dbv0038JobExitCode']:
                return Dbv0038JobExitCode
            
            
            class flags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'flags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            group = schemas.StrSchema
            
            
            class het(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        job_id = schemas.IntSchema
                        job_offset = schemas.IntSchema
                        __annotations__ = {
                            "job_id": job_id,
                            "job_offset": job_offset,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["job_id"]) -> MetaOapg.properties.job_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["job_offset"]) -> MetaOapg.properties.job_offset: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["job_id", "job_offset", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["job_id"]) -> typing.Union[MetaOapg.properties.job_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["job_offset"]) -> typing.Union[MetaOapg.properties.job_offset, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["job_id", "job_offset", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    job_id: typing.Union[MetaOapg.properties.job_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    job_offset: typing.Union[MetaOapg.properties.job_offset, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'het':
                    return super().__new__(
                        cls,
                        *_args,
                        job_id=job_id,
                        job_offset=job_offset,
                        _configuration=_configuration,
                        **kwargs,
                    )
            job_id = schemas.IntSchema
            name = schemas.StrSchema
            
            
            class mcs(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        label = schemas.StrSchema
                        __annotations__ = {
                            "label": label,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["label", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["label", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'mcs':
                    return super().__new__(
                        cls,
                        *_args,
                        label=label,
                        _configuration=_configuration,
                        **kwargs,
                    )
            nodes = schemas.StrSchema
            partition = schemas.StrSchema
            priority = schemas.IntSchema
            qos = schemas.StrSchema
            
            
            class required(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        CPUs = schemas.IntSchema
                        memory = schemas.IntSchema
                        __annotations__ = {
                            "CPUs": CPUs,
                            "memory": memory,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["CPUs"]) -> MetaOapg.properties.CPUs: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["memory"]) -> MetaOapg.properties.memory: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["CPUs", "memory", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["CPUs"]) -> typing.Union[MetaOapg.properties.CPUs, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["memory"]) -> typing.Union[MetaOapg.properties.memory, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["CPUs", "memory", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    CPUs: typing.Union[MetaOapg.properties.CPUs, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    memory: typing.Union[MetaOapg.properties.memory, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'required':
                    return super().__new__(
                        cls,
                        *_args,
                        CPUs=CPUs,
                        memory=memory,
                        _configuration=_configuration,
                        **kwargs,
                    )
            kill_request_user = schemas.StrSchema
            
            
            class reservation(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        id = schemas.IntSchema
                        name = schemas.IntSchema
                        __annotations__ = {
                            "id": id,
                            "name": name,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    name: typing.Union[MetaOapg.properties.name, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'reservation':
                    return super().__new__(
                        cls,
                        *_args,
                        id=id,
                        name=name,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class state(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        current = schemas.StrSchema
                        reason = schemas.StrSchema
                        __annotations__ = {
                            "current": current,
                            "reason": reason,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["current"]) -> MetaOapg.properties.current: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["current", "reason", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["current"]) -> typing.Union[MetaOapg.properties.current, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["current", "reason", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    current: typing.Union[MetaOapg.properties.current, str, schemas.Unset] = schemas.unset,
                    reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'state':
                    return super().__new__(
                        cls,
                        *_args,
                        current=current,
                        reason=reason,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class steps(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Dbv0038JobStep']:
                        return Dbv0038JobStep
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Dbv0038JobStep'], typing.List['Dbv0038JobStep']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'steps':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Dbv0038JobStep':
                    return super().__getitem__(i)
            
            
            class tres(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                    
                        @staticmethod
                        def allocated() -> typing.Type['Dbv0038TresList']:
                            return Dbv0038TresList
                    
                        @staticmethod
                        def requested() -> typing.Type['Dbv0038TresList']:
                            return Dbv0038TresList
                        __annotations__ = {
                            "allocated": allocated,
                            "requested": requested,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["allocated"]) -> 'Dbv0038TresList': ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["requested"]) -> 'Dbv0038TresList': ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["allocated", "requested", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["allocated"]) -> typing.Union['Dbv0038TresList', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["requested"]) -> typing.Union['Dbv0038TresList', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["allocated", "requested", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    allocated: typing.Union['Dbv0038TresList', schemas.Unset] = schemas.unset,
                    requested: typing.Union['Dbv0038TresList', schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'tres':
                    return super().__new__(
                        cls,
                        *_args,
                        allocated=allocated,
                        requested=requested,
                        _configuration=_configuration,
                        **kwargs,
                    )
            user = schemas.StrSchema
            
            
            class wckey(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        wckey = schemas.StrSchema
                        
                        
                        class flags(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'flags':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "wckey": wckey,
                            "flags": flags,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["wckey"]) -> MetaOapg.properties.wckey: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["flags"]) -> MetaOapg.properties.flags: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["wckey", "flags", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["wckey"]) -> typing.Union[MetaOapg.properties.wckey, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["flags"]) -> typing.Union[MetaOapg.properties.flags, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["wckey", "flags", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    wckey: typing.Union[MetaOapg.properties.wckey, str, schemas.Unset] = schemas.unset,
                    flags: typing.Union[MetaOapg.properties.flags, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'wckey':
                    return super().__new__(
                        cls,
                        *_args,
                        wckey=wckey,
                        flags=flags,
                        _configuration=_configuration,
                        **kwargs,
                    )
            working_directory = schemas.StrSchema
            container = schemas.StrSchema
            __annotations__ = {
                "account": account,
                "comment": comment,
                "allocation_nodes": allocation_nodes,
                "array": array,
                "time": time,
                "association": association,
                "cluster": cluster,
                "constraints": constraints,
                "derived_exit_code": derived_exit_code,
                "exit_code": exit_code,
                "flags": flags,
                "group": group,
                "het": het,
                "job_id": job_id,
                "name": name,
                "mcs": mcs,
                "nodes": nodes,
                "partition": partition,
                "priority": priority,
                "qos": qos,
                "required": required,
                "kill_request_user": kill_request_user,
                "reservation": reservation,
                "state": state,
                "steps": steps,
                "tres": tres,
                "user": user,
                "wckey": wckey,
                "working_directory": working_directory,
                "container": container,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allocation_nodes"]) -> MetaOapg.properties.allocation_nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["array"]) -> MetaOapg.properties.array: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["association"]) -> 'Dbv0038AssociationShortInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cluster"]) -> MetaOapg.properties.cluster: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["constraints"]) -> MetaOapg.properties.constraints: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["derived_exit_code"]) -> 'Dbv0038JobExitCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exit_code"]) -> 'Dbv0038JobExitCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flags"]) -> MetaOapg.properties.flags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group"]) -> MetaOapg.properties.group: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["het"]) -> MetaOapg.properties.het: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_id"]) -> MetaOapg.properties.job_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mcs"]) -> MetaOapg.properties.mcs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodes"]) -> MetaOapg.properties.nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partition"]) -> MetaOapg.properties.partition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qos"]) -> MetaOapg.properties.qos: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["required"]) -> MetaOapg.properties.required: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kill_request_user"]) -> MetaOapg.properties.kill_request_user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reservation"]) -> MetaOapg.properties.reservation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["steps"]) -> MetaOapg.properties.steps: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tres"]) -> MetaOapg.properties.tres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wckey"]) -> MetaOapg.properties.wckey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["working_directory"]) -> MetaOapg.properties.working_directory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["container"]) -> MetaOapg.properties.container: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account", "comment", "allocation_nodes", "array", "time", "association", "cluster", "constraints", "derived_exit_code", "exit_code", "flags", "group", "het", "job_id", "name", "mcs", "nodes", "partition", "priority", "qos", "required", "kill_request_user", "reservation", "state", "steps", "tres", "user", "wckey", "working_directory", "container", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> typing.Union[MetaOapg.properties.account, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allocation_nodes"]) -> typing.Union[MetaOapg.properties.allocation_nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["array"]) -> typing.Union[MetaOapg.properties.array, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> typing.Union[MetaOapg.properties.time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["association"]) -> typing.Union['Dbv0038AssociationShortInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cluster"]) -> typing.Union[MetaOapg.properties.cluster, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["constraints"]) -> typing.Union[MetaOapg.properties.constraints, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["derived_exit_code"]) -> typing.Union['Dbv0038JobExitCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exit_code"]) -> typing.Union['Dbv0038JobExitCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flags"]) -> typing.Union[MetaOapg.properties.flags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> typing.Union[MetaOapg.properties.group, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["het"]) -> typing.Union[MetaOapg.properties.het, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_id"]) -> typing.Union[MetaOapg.properties.job_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mcs"]) -> typing.Union[MetaOapg.properties.mcs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodes"]) -> typing.Union[MetaOapg.properties.nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partition"]) -> typing.Union[MetaOapg.properties.partition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> typing.Union[MetaOapg.properties.priority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qos"]) -> typing.Union[MetaOapg.properties.qos, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["required"]) -> typing.Union[MetaOapg.properties.required, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kill_request_user"]) -> typing.Union[MetaOapg.properties.kill_request_user, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reservation"]) -> typing.Union[MetaOapg.properties.reservation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["steps"]) -> typing.Union[MetaOapg.properties.steps, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tres"]) -> typing.Union[MetaOapg.properties.tres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union[MetaOapg.properties.user, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wckey"]) -> typing.Union[MetaOapg.properties.wckey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["working_directory"]) -> typing.Union[MetaOapg.properties.working_directory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["container"]) -> typing.Union[MetaOapg.properties.container, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account", "comment", "allocation_nodes", "array", "time", "association", "cluster", "constraints", "derived_exit_code", "exit_code", "flags", "group", "het", "job_id", "name", "mcs", "nodes", "partition", "priority", "qos", "required", "kill_request_user", "reservation", "state", "steps", "tres", "user", "wckey", "working_directory", "container", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        account: typing.Union[MetaOapg.properties.account, str, schemas.Unset] = schemas.unset,
        comment: typing.Union[MetaOapg.properties.comment, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        allocation_nodes: typing.Union[MetaOapg.properties.allocation_nodes, str, schemas.Unset] = schemas.unset,
        array: typing.Union[MetaOapg.properties.array, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        time: typing.Union[MetaOapg.properties.time, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        association: typing.Union['Dbv0038AssociationShortInfo', schemas.Unset] = schemas.unset,
        cluster: typing.Union[MetaOapg.properties.cluster, str, schemas.Unset] = schemas.unset,
        constraints: typing.Union[MetaOapg.properties.constraints, str, schemas.Unset] = schemas.unset,
        derived_exit_code: typing.Union['Dbv0038JobExitCode', schemas.Unset] = schemas.unset,
        exit_code: typing.Union['Dbv0038JobExitCode', schemas.Unset] = schemas.unset,
        flags: typing.Union[MetaOapg.properties.flags, list, tuple, schemas.Unset] = schemas.unset,
        group: typing.Union[MetaOapg.properties.group, str, schemas.Unset] = schemas.unset,
        het: typing.Union[MetaOapg.properties.het, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        job_id: typing.Union[MetaOapg.properties.job_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        mcs: typing.Union[MetaOapg.properties.mcs, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        nodes: typing.Union[MetaOapg.properties.nodes, str, schemas.Unset] = schemas.unset,
        partition: typing.Union[MetaOapg.properties.partition, str, schemas.Unset] = schemas.unset,
        priority: typing.Union[MetaOapg.properties.priority, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        qos: typing.Union[MetaOapg.properties.qos, str, schemas.Unset] = schemas.unset,
        required: typing.Union[MetaOapg.properties.required, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        kill_request_user: typing.Union[MetaOapg.properties.kill_request_user, str, schemas.Unset] = schemas.unset,
        reservation: typing.Union[MetaOapg.properties.reservation, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        steps: typing.Union[MetaOapg.properties.steps, list, tuple, schemas.Unset] = schemas.unset,
        tres: typing.Union[MetaOapg.properties.tres, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        user: typing.Union[MetaOapg.properties.user, str, schemas.Unset] = schemas.unset,
        wckey: typing.Union[MetaOapg.properties.wckey, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        working_directory: typing.Union[MetaOapg.properties.working_directory, str, schemas.Unset] = schemas.unset,
        container: typing.Union[MetaOapg.properties.container, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Dbv0038Job':
        return super().__new__(
            cls,
            *_args,
            account=account,
            comment=comment,
            allocation_nodes=allocation_nodes,
            array=array,
            time=time,
            association=association,
            cluster=cluster,
            constraints=constraints,
            derived_exit_code=derived_exit_code,
            exit_code=exit_code,
            flags=flags,
            group=group,
            het=het,
            job_id=job_id,
            name=name,
            mcs=mcs,
            nodes=nodes,
            partition=partition,
            priority=priority,
            qos=qos,
            required=required,
            kill_request_user=kill_request_user,
            reservation=reservation,
            state=state,
            steps=steps,
            tres=tres,
            user=user,
            wckey=wckey,
            working_directory=working_directory,
            container=container,
            _configuration=_configuration,
            **kwargs,
        )

from slurmrestapi.model.dbv0038_association_short_info import Dbv0038AssociationShortInfo
from slurmrestapi.model.dbv0038_job_exit_code import Dbv0038JobExitCode
from slurmrestapi.model.dbv0038_job_step import Dbv0038JobStep
from slurmrestapi.model.dbv0038_tres_list import Dbv0038TresList
