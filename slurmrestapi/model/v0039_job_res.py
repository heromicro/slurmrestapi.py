# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.39
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class V0039JobRes(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            nodes = schemas.StrSchema
            allocated_cores = schemas.Int32Schema
            allocated_cpus = schemas.Int32Schema
            allocated_hosts = schemas.Int32Schema
        
            @staticmethod
            def allocated_nodes() -> typing.Type['V0039JobResNodes']:
                return V0039JobResNodes
            __annotations__ = {
                "nodes": nodes,
                "allocated_cores": allocated_cores,
                "allocated_cpus": allocated_cpus,
                "allocated_hosts": allocated_hosts,
                "allocated_nodes": allocated_nodes,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodes"]) -> MetaOapg.properties.nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allocated_cores"]) -> MetaOapg.properties.allocated_cores: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allocated_cpus"]) -> MetaOapg.properties.allocated_cpus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allocated_hosts"]) -> MetaOapg.properties.allocated_hosts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allocated_nodes"]) -> 'V0039JobResNodes': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["nodes", "allocated_cores", "allocated_cpus", "allocated_hosts", "allocated_nodes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodes"]) -> typing.Union[MetaOapg.properties.nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allocated_cores"]) -> typing.Union[MetaOapg.properties.allocated_cores, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allocated_cpus"]) -> typing.Union[MetaOapg.properties.allocated_cpus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allocated_hosts"]) -> typing.Union[MetaOapg.properties.allocated_hosts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allocated_nodes"]) -> typing.Union['V0039JobResNodes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["nodes", "allocated_cores", "allocated_cpus", "allocated_hosts", "allocated_nodes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        nodes: typing.Union[MetaOapg.properties.nodes, str, schemas.Unset] = schemas.unset,
        allocated_cores: typing.Union[MetaOapg.properties.allocated_cores, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        allocated_cpus: typing.Union[MetaOapg.properties.allocated_cpus, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        allocated_hosts: typing.Union[MetaOapg.properties.allocated_hosts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        allocated_nodes: typing.Union['V0039JobResNodes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V0039JobRes':
        return super().__new__(
            cls,
            *_args,
            nodes=nodes,
            allocated_cores=allocated_cores,
            allocated_cpus=allocated_cpus,
            allocated_hosts=allocated_hosts,
            allocated_nodes=allocated_nodes,
            _configuration=_configuration,
            **kwargs,
        )

from slurmrestapi.model.v0039_job_res_nodes import V0039JobResNodes
