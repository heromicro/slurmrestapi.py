# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.38
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class Dbv0038Diag(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def meta() -> typing.Type['Dbv0038Meta']:
                return Dbv0038Meta
            
            
            class errors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Dbv0038Error']:
                        return Dbv0038Error
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Dbv0038Error'], typing.List['Dbv0038Error']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'errors':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Dbv0038Error':
                    return super().__getitem__(i)
            
            
            class statistics(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        time_start = schemas.IntSchema
                        
                        
                        class rollups(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            type = schemas.StrSchema
                                            last_run = schemas.IntSchema
                                            last_cycle = schemas.IntSchema
                                            max_cycle = schemas.IntSchema
                                            total_time = schemas.IntSchema
                                            mean_cycles = schemas.IntSchema
                                            __annotations__ = {
                                                "type": type,
                                                "last_run": last_run,
                                                "last_cycle": last_cycle,
                                                "max_cycle": max_cycle,
                                                "total_time": total_time,
                                                "mean_cycles": mean_cycles,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["last_run"]) -> MetaOapg.properties.last_run: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["last_cycle"]) -> MetaOapg.properties.last_cycle: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["max_cycle"]) -> MetaOapg.properties.max_cycle: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["total_time"]) -> MetaOapg.properties.total_time: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["mean_cycles"]) -> MetaOapg.properties.mean_cycles: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "last_run", "last_cycle", "max_cycle", "total_time", "mean_cycles", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["last_run"]) -> typing.Union[MetaOapg.properties.last_run, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["last_cycle"]) -> typing.Union[MetaOapg.properties.last_cycle, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["max_cycle"]) -> typing.Union[MetaOapg.properties.max_cycle, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["total_time"]) -> typing.Union[MetaOapg.properties.total_time, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["mean_cycles"]) -> typing.Union[MetaOapg.properties.mean_cycles, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "last_run", "last_cycle", "max_cycle", "total_time", "mean_cycles", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                        last_run: typing.Union[MetaOapg.properties.last_run, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        last_cycle: typing.Union[MetaOapg.properties.last_cycle, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        max_cycle: typing.Union[MetaOapg.properties.max_cycle, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        total_time: typing.Union[MetaOapg.properties.total_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        mean_cycles: typing.Union[MetaOapg.properties.mean_cycles, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            type=type,
                                            last_run=last_run,
                                            last_cycle=last_cycle,
                                            max_cycle=max_cycle,
                                            total_time=total_time,
                                            mean_cycles=mean_cycles,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'rollups':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class RPCs(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            rpc = schemas.StrSchema
                                            count = schemas.IntSchema
                                            
                                            
                                            class time(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                        average = schemas.IntSchema
                                                        total = schemas.IntSchema
                                                        __annotations__ = {
                                                            "average": average,
                                                            "total": total,
                                                        }
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["average"]) -> MetaOapg.properties.average: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["average", "total", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["average"]) -> typing.Union[MetaOapg.properties.average, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["average", "total", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                                    average: typing.Union[MetaOapg.properties.average, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                    total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'time':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        average=average,
                                                        total=total,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            __annotations__ = {
                                                "rpc": rpc,
                                                "count": count,
                                                "time": time,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["rpc"]) -> MetaOapg.properties.rpc: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["rpc", "count", "time", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["rpc"]) -> typing.Union[MetaOapg.properties.rpc, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> typing.Union[MetaOapg.properties.count, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> typing.Union[MetaOapg.properties.time, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["rpc", "count", "time", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        rpc: typing.Union[MetaOapg.properties.rpc, str, schemas.Unset] = schemas.unset,
                                        count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        time: typing.Union[MetaOapg.properties.time, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            rpc=rpc,
                                            count=count,
                                            time=time,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'RPCs':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class users(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            user = schemas.StrSchema
                                            count = schemas.IntSchema
                                            
                                            
                                            class time(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                        average = schemas.IntSchema
                                                        total = schemas.IntSchema
                                                        __annotations__ = {
                                                            "average": average,
                                                            "total": total,
                                                        }
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["average"]) -> MetaOapg.properties.average: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["average", "total", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["average"]) -> typing.Union[MetaOapg.properties.average, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["average", "total", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                                    average: typing.Union[MetaOapg.properties.average, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                    total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'time':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        average=average,
                                                        total=total,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            __annotations__ = {
                                                "user": user,
                                                "count": count,
                                                "time": time,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["user", "count", "time", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union[MetaOapg.properties.user, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> typing.Union[MetaOapg.properties.count, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> typing.Union[MetaOapg.properties.time, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["user", "count", "time", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        user: typing.Union[MetaOapg.properties.user, str, schemas.Unset] = schemas.unset,
                                        count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        time: typing.Union[MetaOapg.properties.time, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            user=user,
                                            count=count,
                                            time=time,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'users':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "time_start": time_start,
                            "rollups": rollups,
                            "RPCs": RPCs,
                            "users": users,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["time_start"]) -> MetaOapg.properties.time_start: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["rollups"]) -> MetaOapg.properties.rollups: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["RPCs"]) -> MetaOapg.properties.RPCs: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["users"]) -> MetaOapg.properties.users: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["time_start", "rollups", "RPCs", "users", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["time_start"]) -> typing.Union[MetaOapg.properties.time_start, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["rollups"]) -> typing.Union[MetaOapg.properties.rollups, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["RPCs"]) -> typing.Union[MetaOapg.properties.RPCs, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["users"]) -> typing.Union[MetaOapg.properties.users, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["time_start", "rollups", "RPCs", "users", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    time_start: typing.Union[MetaOapg.properties.time_start, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    rollups: typing.Union[MetaOapg.properties.rollups, list, tuple, schemas.Unset] = schemas.unset,
                    RPCs: typing.Union[MetaOapg.properties.RPCs, list, tuple, schemas.Unset] = schemas.unset,
                    users: typing.Union[MetaOapg.properties.users, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'statistics':
                    return super().__new__(
                        cls,
                        *_args,
                        time_start=time_start,
                        rollups=rollups,
                        RPCs=RPCs,
                        users=users,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "meta": meta,
                "errors": errors,
                "statistics": statistics,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meta"]) -> 'Dbv0038Meta': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errors"]) -> MetaOapg.properties.errors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statistics"]) -> MetaOapg.properties.statistics: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["meta", "errors", "statistics", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> typing.Union['Dbv0038Meta', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errors"]) -> typing.Union[MetaOapg.properties.errors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statistics"]) -> typing.Union[MetaOapg.properties.statistics, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["meta", "errors", "statistics", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        meta: typing.Union['Dbv0038Meta', schemas.Unset] = schemas.unset,
        errors: typing.Union[MetaOapg.properties.errors, list, tuple, schemas.Unset] = schemas.unset,
        statistics: typing.Union[MetaOapg.properties.statistics, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Dbv0038Diag':
        return super().__new__(
            cls,
            *_args,
            meta=meta,
            errors=errors,
            statistics=statistics,
            _configuration=_configuration,
            **kwargs,
        )

from slurmrestapi.model.dbv0038_error import Dbv0038Error
from slurmrestapi.model.dbv0038_meta import Dbv0038Meta
