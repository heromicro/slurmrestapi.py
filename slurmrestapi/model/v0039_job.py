# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.39
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class V0039Job(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            account = schemas.StrSchema
            
            
            class comment(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        system = schemas.StrSchema
                        __annotations__ = {
                            "system": system,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["system"]) -> MetaOapg.properties.system: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["system", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["system"]) -> typing.Union[MetaOapg.properties.system, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["system", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    system: typing.Union[MetaOapg.properties.system, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'comment':
                    return super().__new__(
                        cls,
                        *_args,
                        system=system,
                        _configuration=_configuration,
                        **kwargs,
                    )
            allocation_nodes = schemas.Int32Schema
            
            
            class array(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        task = schemas.StrSchema
                        __annotations__ = {
                            "task": task,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["task"]) -> MetaOapg.properties.task: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["task", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["task"]) -> typing.Union[MetaOapg.properties.task, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["task", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    task: typing.Union[MetaOapg.properties.task, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'array':
                    return super().__new__(
                        cls,
                        *_args,
                        task=task,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def association() -> typing.Type['V0039AssocShort']:
                return V0039AssocShort
            block = schemas.StrSchema
            cluster = schemas.StrSchema
            constraints = schemas.StrSchema
            container = schemas.StrSchema
        
            @staticmethod
            def derived_exit_code() -> typing.Type['V0039JobExitCode']:
                return V0039JobExitCode
            
            
            class time(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class user(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    microseconds = schemas.Int64Schema
                                    __annotations__ = {
                                        "microseconds": microseconds,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["microseconds"]) -> MetaOapg.properties.microseconds: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["microseconds", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["microseconds"]) -> typing.Union[MetaOapg.properties.microseconds, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["microseconds", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                microseconds: typing.Union[MetaOapg.properties.microseconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'user':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    microseconds=microseconds,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "user": user,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["user", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union[MetaOapg.properties.user, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["user", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    user: typing.Union[MetaOapg.properties.user, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'time':
                    return super().__new__(
                        cls,
                        *_args,
                        user=user,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def exit_code() -> typing.Type['V0039JobExitCode']:
                return V0039JobExitCode
            extra = schemas.StrSchema
            failed_node = schemas.StrSchema
            
            
            class flags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "NONE": "NONE",
                                "CLEAR_SCHEDULING": "CLEAR_SCHEDULING",
                                "NOT_SET": "NOT_SET",
                                "STARTED_ON_SUBMIT": "STARTED_ON_SUBMIT",
                                "STARTED_ON_SCHEDULE": "STARTED_ON_SCHEDULE",
                                "STARTED_ON_BACKFILL": "STARTED_ON_BACKFILL",
                            }
                        
                        @schemas.classproperty
                        def NONE(cls):
                            return cls("NONE")
                        
                        @schemas.classproperty
                        def CLEAR_SCHEDULING(cls):
                            return cls("CLEAR_SCHEDULING")
                        
                        @schemas.classproperty
                        def NOT_SET(cls):
                            return cls("NOT_SET")
                        
                        @schemas.classproperty
                        def STARTED_ON_SUBMIT(cls):
                            return cls("STARTED_ON_SUBMIT")
                        
                        @schemas.classproperty
                        def STARTED_ON_SCHEDULE(cls):
                            return cls("STARTED_ON_SCHEDULE")
                        
                        @schemas.classproperty
                        def STARTED_ON_BACKFILL(cls):
                            return cls("STARTED_ON_BACKFILL")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'flags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            group = schemas.StrSchema
            
            
            class het(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                    
                        @staticmethod
                        def job_offset() -> typing.Type['V0039Uint32NoVal']:
                            return V0039Uint32NoVal
                        __annotations__ = {
                            "job_offset": job_offset,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["job_offset"]) -> 'V0039Uint32NoVal': ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["job_offset", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["job_offset"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["job_offset", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    job_offset: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'het':
                    return super().__new__(
                        cls,
                        *_args,
                        job_offset=job_offset,
                        _configuration=_configuration,
                        **kwargs,
                    )
            job_id = schemas.Int32Schema
            name = schemas.StrSchema
            licenses = schemas.StrSchema
            
            
            class mcs(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        label = schemas.StrSchema
                        __annotations__ = {
                            "label": label,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["label", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["label", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'mcs':
                    return super().__new__(
                        cls,
                        *_args,
                        label=label,
                        _configuration=_configuration,
                        **kwargs,
                    )
            nodes = schemas.StrSchema
            partition = schemas.StrSchema
        
            @staticmethod
            def priority() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
            qos = schemas.StrSchema
            
            
            class required(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        memory = schemas.Int64Schema
                        __annotations__ = {
                            "memory": memory,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["memory"]) -> MetaOapg.properties.memory: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["memory", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["memory"]) -> typing.Union[MetaOapg.properties.memory, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["memory", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    memory: typing.Union[MetaOapg.properties.memory, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'required':
                    return super().__new__(
                        cls,
                        *_args,
                        memory=memory,
                        _configuration=_configuration,
                        **kwargs,
                    )
            kill_request_user = schemas.StrSchema
            
            
            class reservation(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        name = schemas.StrSchema
                        __annotations__ = {
                            "name": name,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'reservation':
                    return super().__new__(
                        cls,
                        *_args,
                        name=name,
                        _configuration=_configuration,
                        **kwargs,
                    )
            script = schemas.StrSchema
            
            
            class state(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        reason = schemas.StrSchema
                        __annotations__ = {
                            "reason": reason,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["reason", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["reason", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'state':
                    return super().__new__(
                        cls,
                        *_args,
                        reason=reason,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def steps() -> typing.Type['V0039StepList']:
                return V0039StepList
            submit_line = schemas.StrSchema
            
            
            class tres(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                    
                        @staticmethod
                        def requested() -> typing.Type['V0039TresList']:
                            return V0039TresList
                        __annotations__ = {
                            "requested": requested,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["requested"]) -> 'V0039TresList': ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["requested", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["requested"]) -> typing.Union['V0039TresList', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["requested", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    requested: typing.Union['V0039TresList', schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'tres':
                    return super().__new__(
                        cls,
                        *_args,
                        requested=requested,
                        _configuration=_configuration,
                        **kwargs,
                    )
            used_gres = schemas.StrSchema
            user = schemas.StrSchema
        
            @staticmethod
            def wckey() -> typing.Type['V0039WckeyTag']:
                return V0039WckeyTag
            working_directory = schemas.StrSchema
            __annotations__ = {
                "account": account,
                "comment": comment,
                "allocation_nodes": allocation_nodes,
                "array": array,
                "association": association,
                "block": block,
                "cluster": cluster,
                "constraints": constraints,
                "container": container,
                "derived_exit_code": derived_exit_code,
                "time": time,
                "exit_code": exit_code,
                "extra": extra,
                "failed_node": failed_node,
                "flags": flags,
                "group": group,
                "het": het,
                "job_id": job_id,
                "name": name,
                "licenses": licenses,
                "mcs": mcs,
                "nodes": nodes,
                "partition": partition,
                "priority": priority,
                "qos": qos,
                "required": required,
                "kill_request_user": kill_request_user,
                "reservation": reservation,
                "script": script,
                "state": state,
                "steps": steps,
                "submit_line": submit_line,
                "tres": tres,
                "used_gres": used_gres,
                "user": user,
                "wckey": wckey,
                "working_directory": working_directory,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allocation_nodes"]) -> MetaOapg.properties.allocation_nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["array"]) -> MetaOapg.properties.array: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["association"]) -> 'V0039AssocShort': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["block"]) -> MetaOapg.properties.block: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cluster"]) -> MetaOapg.properties.cluster: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["constraints"]) -> MetaOapg.properties.constraints: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["container"]) -> MetaOapg.properties.container: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["derived_exit_code"]) -> 'V0039JobExitCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exit_code"]) -> 'V0039JobExitCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extra"]) -> MetaOapg.properties.extra: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["failed_node"]) -> MetaOapg.properties.failed_node: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flags"]) -> MetaOapg.properties.flags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group"]) -> MetaOapg.properties.group: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["het"]) -> MetaOapg.properties.het: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_id"]) -> MetaOapg.properties.job_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["licenses"]) -> MetaOapg.properties.licenses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mcs"]) -> MetaOapg.properties.mcs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodes"]) -> MetaOapg.properties.nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partition"]) -> MetaOapg.properties.partition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qos"]) -> MetaOapg.properties.qos: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["required"]) -> MetaOapg.properties.required: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kill_request_user"]) -> MetaOapg.properties.kill_request_user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reservation"]) -> MetaOapg.properties.reservation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["script"]) -> MetaOapg.properties.script: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["steps"]) -> 'V0039StepList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["submit_line"]) -> MetaOapg.properties.submit_line: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tres"]) -> MetaOapg.properties.tres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["used_gres"]) -> MetaOapg.properties.used_gres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wckey"]) -> 'V0039WckeyTag': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["working_directory"]) -> MetaOapg.properties.working_directory: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account", "comment", "allocation_nodes", "array", "association", "block", "cluster", "constraints", "container", "derived_exit_code", "time", "exit_code", "extra", "failed_node", "flags", "group", "het", "job_id", "name", "licenses", "mcs", "nodes", "partition", "priority", "qos", "required", "kill_request_user", "reservation", "script", "state", "steps", "submit_line", "tres", "used_gres", "user", "wckey", "working_directory", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> typing.Union[MetaOapg.properties.account, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allocation_nodes"]) -> typing.Union[MetaOapg.properties.allocation_nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["array"]) -> typing.Union[MetaOapg.properties.array, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["association"]) -> typing.Union['V0039AssocShort', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["block"]) -> typing.Union[MetaOapg.properties.block, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cluster"]) -> typing.Union[MetaOapg.properties.cluster, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["constraints"]) -> typing.Union[MetaOapg.properties.constraints, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["container"]) -> typing.Union[MetaOapg.properties.container, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["derived_exit_code"]) -> typing.Union['V0039JobExitCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> typing.Union[MetaOapg.properties.time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exit_code"]) -> typing.Union['V0039JobExitCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extra"]) -> typing.Union[MetaOapg.properties.extra, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["failed_node"]) -> typing.Union[MetaOapg.properties.failed_node, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flags"]) -> typing.Union[MetaOapg.properties.flags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> typing.Union[MetaOapg.properties.group, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["het"]) -> typing.Union[MetaOapg.properties.het, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_id"]) -> typing.Union[MetaOapg.properties.job_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["licenses"]) -> typing.Union[MetaOapg.properties.licenses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mcs"]) -> typing.Union[MetaOapg.properties.mcs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodes"]) -> typing.Union[MetaOapg.properties.nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partition"]) -> typing.Union[MetaOapg.properties.partition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qos"]) -> typing.Union[MetaOapg.properties.qos, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["required"]) -> typing.Union[MetaOapg.properties.required, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kill_request_user"]) -> typing.Union[MetaOapg.properties.kill_request_user, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reservation"]) -> typing.Union[MetaOapg.properties.reservation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["script"]) -> typing.Union[MetaOapg.properties.script, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["steps"]) -> typing.Union['V0039StepList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["submit_line"]) -> typing.Union[MetaOapg.properties.submit_line, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tres"]) -> typing.Union[MetaOapg.properties.tres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["used_gres"]) -> typing.Union[MetaOapg.properties.used_gres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union[MetaOapg.properties.user, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wckey"]) -> typing.Union['V0039WckeyTag', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["working_directory"]) -> typing.Union[MetaOapg.properties.working_directory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account", "comment", "allocation_nodes", "array", "association", "block", "cluster", "constraints", "container", "derived_exit_code", "time", "exit_code", "extra", "failed_node", "flags", "group", "het", "job_id", "name", "licenses", "mcs", "nodes", "partition", "priority", "qos", "required", "kill_request_user", "reservation", "script", "state", "steps", "submit_line", "tres", "used_gres", "user", "wckey", "working_directory", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        account: typing.Union[MetaOapg.properties.account, str, schemas.Unset] = schemas.unset,
        comment: typing.Union[MetaOapg.properties.comment, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        allocation_nodes: typing.Union[MetaOapg.properties.allocation_nodes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        array: typing.Union[MetaOapg.properties.array, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        association: typing.Union['V0039AssocShort', schemas.Unset] = schemas.unset,
        block: typing.Union[MetaOapg.properties.block, str, schemas.Unset] = schemas.unset,
        cluster: typing.Union[MetaOapg.properties.cluster, str, schemas.Unset] = schemas.unset,
        constraints: typing.Union[MetaOapg.properties.constraints, str, schemas.Unset] = schemas.unset,
        container: typing.Union[MetaOapg.properties.container, str, schemas.Unset] = schemas.unset,
        derived_exit_code: typing.Union['V0039JobExitCode', schemas.Unset] = schemas.unset,
        time: typing.Union[MetaOapg.properties.time, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        exit_code: typing.Union['V0039JobExitCode', schemas.Unset] = schemas.unset,
        extra: typing.Union[MetaOapg.properties.extra, str, schemas.Unset] = schemas.unset,
        failed_node: typing.Union[MetaOapg.properties.failed_node, str, schemas.Unset] = schemas.unset,
        flags: typing.Union[MetaOapg.properties.flags, list, tuple, schemas.Unset] = schemas.unset,
        group: typing.Union[MetaOapg.properties.group, str, schemas.Unset] = schemas.unset,
        het: typing.Union[MetaOapg.properties.het, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        job_id: typing.Union[MetaOapg.properties.job_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        licenses: typing.Union[MetaOapg.properties.licenses, str, schemas.Unset] = schemas.unset,
        mcs: typing.Union[MetaOapg.properties.mcs, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        nodes: typing.Union[MetaOapg.properties.nodes, str, schemas.Unset] = schemas.unset,
        partition: typing.Union[MetaOapg.properties.partition, str, schemas.Unset] = schemas.unset,
        priority: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        qos: typing.Union[MetaOapg.properties.qos, str, schemas.Unset] = schemas.unset,
        required: typing.Union[MetaOapg.properties.required, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        kill_request_user: typing.Union[MetaOapg.properties.kill_request_user, str, schemas.Unset] = schemas.unset,
        reservation: typing.Union[MetaOapg.properties.reservation, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        script: typing.Union[MetaOapg.properties.script, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        steps: typing.Union['V0039StepList', schemas.Unset] = schemas.unset,
        submit_line: typing.Union[MetaOapg.properties.submit_line, str, schemas.Unset] = schemas.unset,
        tres: typing.Union[MetaOapg.properties.tres, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        used_gres: typing.Union[MetaOapg.properties.used_gres, str, schemas.Unset] = schemas.unset,
        user: typing.Union[MetaOapg.properties.user, str, schemas.Unset] = schemas.unset,
        wckey: typing.Union['V0039WckeyTag', schemas.Unset] = schemas.unset,
        working_directory: typing.Union[MetaOapg.properties.working_directory, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V0039Job':
        return super().__new__(
            cls,
            *_args,
            account=account,
            comment=comment,
            allocation_nodes=allocation_nodes,
            array=array,
            association=association,
            block=block,
            cluster=cluster,
            constraints=constraints,
            container=container,
            derived_exit_code=derived_exit_code,
            time=time,
            exit_code=exit_code,
            extra=extra,
            failed_node=failed_node,
            flags=flags,
            group=group,
            het=het,
            job_id=job_id,
            name=name,
            licenses=licenses,
            mcs=mcs,
            nodes=nodes,
            partition=partition,
            priority=priority,
            qos=qos,
            required=required,
            kill_request_user=kill_request_user,
            reservation=reservation,
            script=script,
            state=state,
            steps=steps,
            submit_line=submit_line,
            tres=tres,
            used_gres=used_gres,
            user=user,
            wckey=wckey,
            working_directory=working_directory,
            _configuration=_configuration,
            **kwargs,
        )

from slurmrestapi.model.v0039_assoc_short import V0039AssocShort
from slurmrestapi.model.v0039_job_exit_code import V0039JobExitCode
from slurmrestapi.model.v0039_step_list import V0039StepList
from slurmrestapi.model.v0039_tres_list import V0039TresList
from slurmrestapi.model.v0039_uint32_no_val import V0039Uint32NoVal
from slurmrestapi.model.v0039_wckey_tag import V0039WckeyTag
