# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.37
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class V0037Reservation(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            accounts = schemas.StrSchema
            burst_buffer = schemas.StrSchema
            core_count = schemas.IntSchema
            core_spec_cnt = schemas.IntSchema
            end_time = schemas.IntSchema
            features = schemas.StrSchema
            
            
            class flags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'flags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            groups = schemas.StrSchema
            licenses = schemas.StrSchema
            max_start_delay = schemas.IntSchema
            name = schemas.StrSchema
            node_count = schemas.IntSchema
            node_list = schemas.StrSchema
            partition = schemas.StrSchema
            
            
            class purge_completed(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        time = schemas.IntSchema
                        __annotations__ = {
                            "time": time,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["time", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> typing.Union[MetaOapg.properties.time, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["time", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    time: typing.Union[MetaOapg.properties.time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'purge_completed':
                    return super().__new__(
                        cls,
                        *_args,
                        time=time,
                        _configuration=_configuration,
                        **kwargs,
                    )
            start_time = schemas.IntSchema
            watts = schemas.IntSchema
            tres = schemas.StrSchema
            users = schemas.StrSchema
            __annotations__ = {
                "accounts": accounts,
                "burst_buffer": burst_buffer,
                "core_count": core_count,
                "core_spec_cnt": core_spec_cnt,
                "end_time": end_time,
                "features": features,
                "flags": flags,
                "groups": groups,
                "licenses": licenses,
                "max_start_delay": max_start_delay,
                "name": name,
                "node_count": node_count,
                "node_list": node_list,
                "partition": partition,
                "purge_completed": purge_completed,
                "start_time": start_time,
                "watts": watts,
                "tres": tres,
                "users": users,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accounts"]) -> MetaOapg.properties.accounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["burst_buffer"]) -> MetaOapg.properties.burst_buffer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["core_count"]) -> MetaOapg.properties.core_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["core_spec_cnt"]) -> MetaOapg.properties.core_spec_cnt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_time"]) -> MetaOapg.properties.end_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["features"]) -> MetaOapg.properties.features: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flags"]) -> MetaOapg.properties.flags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["licenses"]) -> MetaOapg.properties.licenses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_start_delay"]) -> MetaOapg.properties.max_start_delay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["node_count"]) -> MetaOapg.properties.node_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["node_list"]) -> MetaOapg.properties.node_list: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partition"]) -> MetaOapg.properties.partition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purge_completed"]) -> MetaOapg.properties.purge_completed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_time"]) -> MetaOapg.properties.start_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["watts"]) -> MetaOapg.properties.watts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tres"]) -> MetaOapg.properties.tres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["users"]) -> MetaOapg.properties.users: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accounts", "burst_buffer", "core_count", "core_spec_cnt", "end_time", "features", "flags", "groups", "licenses", "max_start_delay", "name", "node_count", "node_list", "partition", "purge_completed", "start_time", "watts", "tres", "users", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accounts"]) -> typing.Union[MetaOapg.properties.accounts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["burst_buffer"]) -> typing.Union[MetaOapg.properties.burst_buffer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["core_count"]) -> typing.Union[MetaOapg.properties.core_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["core_spec_cnt"]) -> typing.Union[MetaOapg.properties.core_spec_cnt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_time"]) -> typing.Union[MetaOapg.properties.end_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["features"]) -> typing.Union[MetaOapg.properties.features, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flags"]) -> typing.Union[MetaOapg.properties.flags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groups"]) -> typing.Union[MetaOapg.properties.groups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["licenses"]) -> typing.Union[MetaOapg.properties.licenses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_start_delay"]) -> typing.Union[MetaOapg.properties.max_start_delay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["node_count"]) -> typing.Union[MetaOapg.properties.node_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["node_list"]) -> typing.Union[MetaOapg.properties.node_list, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partition"]) -> typing.Union[MetaOapg.properties.partition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purge_completed"]) -> typing.Union[MetaOapg.properties.purge_completed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_time"]) -> typing.Union[MetaOapg.properties.start_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["watts"]) -> typing.Union[MetaOapg.properties.watts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tres"]) -> typing.Union[MetaOapg.properties.tres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["users"]) -> typing.Union[MetaOapg.properties.users, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accounts", "burst_buffer", "core_count", "core_spec_cnt", "end_time", "features", "flags", "groups", "licenses", "max_start_delay", "name", "node_count", "node_list", "partition", "purge_completed", "start_time", "watts", "tres", "users", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        accounts: typing.Union[MetaOapg.properties.accounts, str, schemas.Unset] = schemas.unset,
        burst_buffer: typing.Union[MetaOapg.properties.burst_buffer, str, schemas.Unset] = schemas.unset,
        core_count: typing.Union[MetaOapg.properties.core_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        core_spec_cnt: typing.Union[MetaOapg.properties.core_spec_cnt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        end_time: typing.Union[MetaOapg.properties.end_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        features: typing.Union[MetaOapg.properties.features, str, schemas.Unset] = schemas.unset,
        flags: typing.Union[MetaOapg.properties.flags, list, tuple, schemas.Unset] = schemas.unset,
        groups: typing.Union[MetaOapg.properties.groups, str, schemas.Unset] = schemas.unset,
        licenses: typing.Union[MetaOapg.properties.licenses, str, schemas.Unset] = schemas.unset,
        max_start_delay: typing.Union[MetaOapg.properties.max_start_delay, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        node_count: typing.Union[MetaOapg.properties.node_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        node_list: typing.Union[MetaOapg.properties.node_list, str, schemas.Unset] = schemas.unset,
        partition: typing.Union[MetaOapg.properties.partition, str, schemas.Unset] = schemas.unset,
        purge_completed: typing.Union[MetaOapg.properties.purge_completed, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        start_time: typing.Union[MetaOapg.properties.start_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        watts: typing.Union[MetaOapg.properties.watts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tres: typing.Union[MetaOapg.properties.tres, str, schemas.Unset] = schemas.unset,
        users: typing.Union[MetaOapg.properties.users, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V0037Reservation':
        return super().__new__(
            cls,
            *_args,
            accounts=accounts,
            burst_buffer=burst_buffer,
            core_count=core_count,
            core_spec_cnt=core_spec_cnt,
            end_time=end_time,
            features=features,
            flags=flags,
            groups=groups,
            licenses=licenses,
            max_start_delay=max_start_delay,
            name=name,
            node_count=node_count,
            node_list=node_list,
            partition=partition,
            purge_completed=purge_completed,
            start_time=start_time,
            watts=watts,
            tres=tres,
            users=users,
            _configuration=_configuration,
            **kwargs,
        )
