# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.38
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class V0038Partition(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class flags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'flags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class preemption_mode(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'preemption_mode':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            allowed_allocation_nodes = schemas.StrSchema
            allowed_accounts = schemas.StrSchema
            allowed_groups = schemas.StrSchema
            allowed_qos = schemas.StrSchema
            alternative = schemas.StrSchema
            billing_weights = schemas.StrSchema
            default_memory_per_cpu = schemas.Int64Schema
            default_time_limit = schemas.Int64Schema
            denied_accounts = schemas.StrSchema
            denied_qos = schemas.StrSchema
            preemption_grace_time = schemas.Int64Schema
            maximum_cpus_per_node = schemas.IntSchema
            maximum_memory_per_node = schemas.Int64Schema
            maximum_nodes_per_job = schemas.IntSchema
            max_time_limit = schemas.Int64Schema
            min_nodes_per_job = schemas.IntSchema
            name = schemas.StrSchema
            nodes = schemas.StrSchema
            over_time_limit = schemas.IntSchema
            priority_job_factor = schemas.IntSchema
            priority_tier = schemas.IntSchema
            qos = schemas.StrSchema
            state = schemas.StrSchema
            total_cpus = schemas.IntSchema
            total_nodes = schemas.IntSchema
            tres = schemas.StrSchema
            maximum_memory_per_cpu = schemas.Int64Schema
            default_memory_per_node = schemas.Int64Schema
            __annotations__ = {
                "flags": flags,
                "preemption_mode": preemption_mode,
                "allowed_allocation_nodes": allowed_allocation_nodes,
                "allowed_accounts": allowed_accounts,
                "allowed_groups": allowed_groups,
                "allowed_qos": allowed_qos,
                "alternative": alternative,
                "billing_weights": billing_weights,
                "default_memory_per_cpu": default_memory_per_cpu,
                "default_time_limit": default_time_limit,
                "denied_accounts": denied_accounts,
                "denied_qos": denied_qos,
                "preemption_grace_time": preemption_grace_time,
                "maximum_cpus_per_node": maximum_cpus_per_node,
                "maximum_memory_per_node": maximum_memory_per_node,
                "maximum_nodes_per_job": maximum_nodes_per_job,
                "max_time_limit": max_time_limit,
                "min_nodes_per_job": min_nodes_per_job,
                "name": name,
                "nodes": nodes,
                "over_time_limit": over_time_limit,
                "priority_job_factor": priority_job_factor,
                "priority_tier": priority_tier,
                "qos": qos,
                "state": state,
                "total_cpus": total_cpus,
                "total_nodes": total_nodes,
                "tres": tres,
                "maximum_memory_per_cpu": maximum_memory_per_cpu,
                "default_memory_per_node": default_memory_per_node,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flags"]) -> MetaOapg.properties.flags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preemption_mode"]) -> MetaOapg.properties.preemption_mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowed_allocation_nodes"]) -> MetaOapg.properties.allowed_allocation_nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowed_accounts"]) -> MetaOapg.properties.allowed_accounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowed_groups"]) -> MetaOapg.properties.allowed_groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowed_qos"]) -> MetaOapg.properties.allowed_qos: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alternative"]) -> MetaOapg.properties.alternative: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billing_weights"]) -> MetaOapg.properties.billing_weights: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_memory_per_cpu"]) -> MetaOapg.properties.default_memory_per_cpu: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_time_limit"]) -> MetaOapg.properties.default_time_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["denied_accounts"]) -> MetaOapg.properties.denied_accounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["denied_qos"]) -> MetaOapg.properties.denied_qos: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preemption_grace_time"]) -> MetaOapg.properties.preemption_grace_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maximum_cpus_per_node"]) -> MetaOapg.properties.maximum_cpus_per_node: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maximum_memory_per_node"]) -> MetaOapg.properties.maximum_memory_per_node: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maximum_nodes_per_job"]) -> MetaOapg.properties.maximum_nodes_per_job: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_time_limit"]) -> MetaOapg.properties.max_time_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["min_nodes_per_job"]) -> MetaOapg.properties.min_nodes_per_job: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodes"]) -> MetaOapg.properties.nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["over_time_limit"]) -> MetaOapg.properties.over_time_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priority_job_factor"]) -> MetaOapg.properties.priority_job_factor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priority_tier"]) -> MetaOapg.properties.priority_tier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qos"]) -> MetaOapg.properties.qos: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_cpus"]) -> MetaOapg.properties.total_cpus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_nodes"]) -> MetaOapg.properties.total_nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tres"]) -> MetaOapg.properties.tres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maximum_memory_per_cpu"]) -> MetaOapg.properties.maximum_memory_per_cpu: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_memory_per_node"]) -> MetaOapg.properties.default_memory_per_node: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["flags", "preemption_mode", "allowed_allocation_nodes", "allowed_accounts", "allowed_groups", "allowed_qos", "alternative", "billing_weights", "default_memory_per_cpu", "default_time_limit", "denied_accounts", "denied_qos", "preemption_grace_time", "maximum_cpus_per_node", "maximum_memory_per_node", "maximum_nodes_per_job", "max_time_limit", "min_nodes_per_job", "name", "nodes", "over_time_limit", "priority_job_factor", "priority_tier", "qos", "state", "total_cpus", "total_nodes", "tres", "maximum_memory_per_cpu", "default_memory_per_node", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flags"]) -> typing.Union[MetaOapg.properties.flags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preemption_mode"]) -> typing.Union[MetaOapg.properties.preemption_mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowed_allocation_nodes"]) -> typing.Union[MetaOapg.properties.allowed_allocation_nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowed_accounts"]) -> typing.Union[MetaOapg.properties.allowed_accounts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowed_groups"]) -> typing.Union[MetaOapg.properties.allowed_groups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowed_qos"]) -> typing.Union[MetaOapg.properties.allowed_qos, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alternative"]) -> typing.Union[MetaOapg.properties.alternative, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billing_weights"]) -> typing.Union[MetaOapg.properties.billing_weights, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_memory_per_cpu"]) -> typing.Union[MetaOapg.properties.default_memory_per_cpu, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_time_limit"]) -> typing.Union[MetaOapg.properties.default_time_limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["denied_accounts"]) -> typing.Union[MetaOapg.properties.denied_accounts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["denied_qos"]) -> typing.Union[MetaOapg.properties.denied_qos, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preemption_grace_time"]) -> typing.Union[MetaOapg.properties.preemption_grace_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maximum_cpus_per_node"]) -> typing.Union[MetaOapg.properties.maximum_cpus_per_node, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maximum_memory_per_node"]) -> typing.Union[MetaOapg.properties.maximum_memory_per_node, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maximum_nodes_per_job"]) -> typing.Union[MetaOapg.properties.maximum_nodes_per_job, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_time_limit"]) -> typing.Union[MetaOapg.properties.max_time_limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["min_nodes_per_job"]) -> typing.Union[MetaOapg.properties.min_nodes_per_job, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodes"]) -> typing.Union[MetaOapg.properties.nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["over_time_limit"]) -> typing.Union[MetaOapg.properties.over_time_limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priority_job_factor"]) -> typing.Union[MetaOapg.properties.priority_job_factor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priority_tier"]) -> typing.Union[MetaOapg.properties.priority_tier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qos"]) -> typing.Union[MetaOapg.properties.qos, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_cpus"]) -> typing.Union[MetaOapg.properties.total_cpus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_nodes"]) -> typing.Union[MetaOapg.properties.total_nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tres"]) -> typing.Union[MetaOapg.properties.tres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maximum_memory_per_cpu"]) -> typing.Union[MetaOapg.properties.maximum_memory_per_cpu, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_memory_per_node"]) -> typing.Union[MetaOapg.properties.default_memory_per_node, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["flags", "preemption_mode", "allowed_allocation_nodes", "allowed_accounts", "allowed_groups", "allowed_qos", "alternative", "billing_weights", "default_memory_per_cpu", "default_time_limit", "denied_accounts", "denied_qos", "preemption_grace_time", "maximum_cpus_per_node", "maximum_memory_per_node", "maximum_nodes_per_job", "max_time_limit", "min_nodes_per_job", "name", "nodes", "over_time_limit", "priority_job_factor", "priority_tier", "qos", "state", "total_cpus", "total_nodes", "tres", "maximum_memory_per_cpu", "default_memory_per_node", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        flags: typing.Union[MetaOapg.properties.flags, list, tuple, schemas.Unset] = schemas.unset,
        preemption_mode: typing.Union[MetaOapg.properties.preemption_mode, list, tuple, schemas.Unset] = schemas.unset,
        allowed_allocation_nodes: typing.Union[MetaOapg.properties.allowed_allocation_nodes, str, schemas.Unset] = schemas.unset,
        allowed_accounts: typing.Union[MetaOapg.properties.allowed_accounts, str, schemas.Unset] = schemas.unset,
        allowed_groups: typing.Union[MetaOapg.properties.allowed_groups, str, schemas.Unset] = schemas.unset,
        allowed_qos: typing.Union[MetaOapg.properties.allowed_qos, str, schemas.Unset] = schemas.unset,
        alternative: typing.Union[MetaOapg.properties.alternative, str, schemas.Unset] = schemas.unset,
        billing_weights: typing.Union[MetaOapg.properties.billing_weights, str, schemas.Unset] = schemas.unset,
        default_memory_per_cpu: typing.Union[MetaOapg.properties.default_memory_per_cpu, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        default_time_limit: typing.Union[MetaOapg.properties.default_time_limit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        denied_accounts: typing.Union[MetaOapg.properties.denied_accounts, str, schemas.Unset] = schemas.unset,
        denied_qos: typing.Union[MetaOapg.properties.denied_qos, str, schemas.Unset] = schemas.unset,
        preemption_grace_time: typing.Union[MetaOapg.properties.preemption_grace_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        maximum_cpus_per_node: typing.Union[MetaOapg.properties.maximum_cpus_per_node, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        maximum_memory_per_node: typing.Union[MetaOapg.properties.maximum_memory_per_node, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        maximum_nodes_per_job: typing.Union[MetaOapg.properties.maximum_nodes_per_job, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        max_time_limit: typing.Union[MetaOapg.properties.max_time_limit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        min_nodes_per_job: typing.Union[MetaOapg.properties.min_nodes_per_job, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        nodes: typing.Union[MetaOapg.properties.nodes, str, schemas.Unset] = schemas.unset,
        over_time_limit: typing.Union[MetaOapg.properties.over_time_limit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        priority_job_factor: typing.Union[MetaOapg.properties.priority_job_factor, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        priority_tier: typing.Union[MetaOapg.properties.priority_tier, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        qos: typing.Union[MetaOapg.properties.qos, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        total_cpus: typing.Union[MetaOapg.properties.total_cpus, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_nodes: typing.Union[MetaOapg.properties.total_nodes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tres: typing.Union[MetaOapg.properties.tres, str, schemas.Unset] = schemas.unset,
        maximum_memory_per_cpu: typing.Union[MetaOapg.properties.maximum_memory_per_cpu, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        default_memory_per_node: typing.Union[MetaOapg.properties.default_memory_per_node, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V0038Partition':
        return super().__new__(
            cls,
            *_args,
            flags=flags,
            preemption_mode=preemption_mode,
            allowed_allocation_nodes=allowed_allocation_nodes,
            allowed_accounts=allowed_accounts,
            allowed_groups=allowed_groups,
            allowed_qos=allowed_qos,
            alternative=alternative,
            billing_weights=billing_weights,
            default_memory_per_cpu=default_memory_per_cpu,
            default_time_limit=default_time_limit,
            denied_accounts=denied_accounts,
            denied_qos=denied_qos,
            preemption_grace_time=preemption_grace_time,
            maximum_cpus_per_node=maximum_cpus_per_node,
            maximum_memory_per_node=maximum_memory_per_node,
            maximum_nodes_per_job=maximum_nodes_per_job,
            max_time_limit=max_time_limit,
            min_nodes_per_job=min_nodes_per_job,
            name=name,
            nodes=nodes,
            over_time_limit=over_time_limit,
            priority_job_factor=priority_job_factor,
            priority_tier=priority_tier,
            qos=qos,
            state=state,
            total_cpus=total_cpus,
            total_nodes=total_nodes,
            tres=tres,
            maximum_memory_per_cpu=maximum_memory_per_cpu,
            default_memory_per_node=default_memory_per_node,
            _configuration=_configuration,
            **kwargs,
        )
