# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.38
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class Dbv0038JobStep(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class time(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        elapsed = schemas.IntSchema
                        end = schemas.IntSchema
                        start = schemas.IntSchema
                        suspended = schemas.IntSchema
                        
                        
                        class system(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    seconds = schemas.IntSchema
                                    microseconds = schemas.IntSchema
                                    __annotations__ = {
                                        "seconds": seconds,
                                        "microseconds": microseconds,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["seconds"]) -> MetaOapg.properties.seconds: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["microseconds"]) -> MetaOapg.properties.microseconds: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["seconds", "microseconds", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["seconds"]) -> typing.Union[MetaOapg.properties.seconds, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["microseconds"]) -> typing.Union[MetaOapg.properties.microseconds, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["seconds", "microseconds", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                seconds: typing.Union[MetaOapg.properties.seconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                microseconds: typing.Union[MetaOapg.properties.microseconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'system':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    seconds=seconds,
                                    microseconds=microseconds,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class total(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    seconds = schemas.IntSchema
                                    microseconds = schemas.IntSchema
                                    __annotations__ = {
                                        "seconds": seconds,
                                        "microseconds": microseconds,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["seconds"]) -> MetaOapg.properties.seconds: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["microseconds"]) -> MetaOapg.properties.microseconds: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["seconds", "microseconds", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["seconds"]) -> typing.Union[MetaOapg.properties.seconds, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["microseconds"]) -> typing.Union[MetaOapg.properties.microseconds, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["seconds", "microseconds", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                seconds: typing.Union[MetaOapg.properties.seconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                microseconds: typing.Union[MetaOapg.properties.microseconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'total':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    seconds=seconds,
                                    microseconds=microseconds,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class user(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    seconds = schemas.IntSchema
                                    microseconds = schemas.IntSchema
                                    __annotations__ = {
                                        "seconds": seconds,
                                        "microseconds": microseconds,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["seconds"]) -> MetaOapg.properties.seconds: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["microseconds"]) -> MetaOapg.properties.microseconds: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["seconds", "microseconds", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["seconds"]) -> typing.Union[MetaOapg.properties.seconds, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["microseconds"]) -> typing.Union[MetaOapg.properties.microseconds, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["seconds", "microseconds", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                seconds: typing.Union[MetaOapg.properties.seconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                microseconds: typing.Union[MetaOapg.properties.microseconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'user':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    seconds=seconds,
                                    microseconds=microseconds,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "elapsed": elapsed,
                            "end": end,
                            "start": start,
                            "suspended": suspended,
                            "system": system,
                            "total": total,
                            "user": user,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["elapsed"]) -> MetaOapg.properties.elapsed: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["end"]) -> MetaOapg.properties.end: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["suspended"]) -> MetaOapg.properties.suspended: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["system"]) -> MetaOapg.properties.system: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["elapsed", "end", "start", "suspended", "system", "total", "user", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["elapsed"]) -> typing.Union[MetaOapg.properties.elapsed, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["end"]) -> typing.Union[MetaOapg.properties.end, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["start"]) -> typing.Union[MetaOapg.properties.start, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["suspended"]) -> typing.Union[MetaOapg.properties.suspended, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["system"]) -> typing.Union[MetaOapg.properties.system, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union[MetaOapg.properties.user, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["elapsed", "end", "start", "suspended", "system", "total", "user", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    elapsed: typing.Union[MetaOapg.properties.elapsed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    end: typing.Union[MetaOapg.properties.end, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    start: typing.Union[MetaOapg.properties.start, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    suspended: typing.Union[MetaOapg.properties.suspended, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    system: typing.Union[MetaOapg.properties.system, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    total: typing.Union[MetaOapg.properties.total, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    user: typing.Union[MetaOapg.properties.user, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'time':
                    return super().__new__(
                        cls,
                        *_args,
                        elapsed=elapsed,
                        end=end,
                        start=start,
                        suspended=suspended,
                        system=system,
                        total=total,
                        user=user,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def exit_code() -> typing.Type['Dbv0038JobExitCode']:
                return Dbv0038JobExitCode
            
            
            class nodes(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        count = schemas.IntSchema
                        range = schemas.StrSchema
                        __annotations__ = {
                            "count": count,
                            "range": range,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["range"]) -> MetaOapg.properties.range: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["count", "range", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> typing.Union[MetaOapg.properties.count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["range"]) -> typing.Union[MetaOapg.properties.range, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["count", "range", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    range: typing.Union[MetaOapg.properties.range, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'nodes':
                    return super().__new__(
                        cls,
                        *_args,
                        count=count,
                        range=range,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class tasks(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        count = schemas.IntSchema
                        __annotations__ = {
                            "count": count,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["count", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> typing.Union[MetaOapg.properties.count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["count", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'tasks':
                    return super().__new__(
                        cls,
                        *_args,
                        count=count,
                        _configuration=_configuration,
                        **kwargs,
                    )
            pid = schemas.StrSchema
            
            
            class CPU(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class requested_frequency(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    min = schemas.IntSchema
                                    max = schemas.IntSchema
                                    __annotations__ = {
                                        "min": min,
                                        "max": max,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["min"]) -> MetaOapg.properties.min: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["max"]) -> MetaOapg.properties.max: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["min", "max", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["min"]) -> typing.Union[MetaOapg.properties.min, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["max"]) -> typing.Union[MetaOapg.properties.max, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["min", "max", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                min: typing.Union[MetaOapg.properties.min, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                max: typing.Union[MetaOapg.properties.max, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'requested_frequency':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    min=min,
                                    max=max,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class governor(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'governor':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "requested_frequency": requested_frequency,
                            "governor": governor,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["requested_frequency"]) -> MetaOapg.properties.requested_frequency: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["governor"]) -> MetaOapg.properties.governor: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["requested_frequency", "governor", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["requested_frequency"]) -> typing.Union[MetaOapg.properties.requested_frequency, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["governor"]) -> typing.Union[MetaOapg.properties.governor, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["requested_frequency", "governor", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    requested_frequency: typing.Union[MetaOapg.properties.requested_frequency, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    governor: typing.Union[MetaOapg.properties.governor, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'CPU':
                    return super().__new__(
                        cls,
                        *_args,
                        requested_frequency=requested_frequency,
                        governor=governor,
                        _configuration=_configuration,
                        **kwargs,
                    )
            kill_request_user = schemas.StrSchema
            state = schemas.StrSchema
            
            
            class statistics(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class CPU(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    actual_frequency = schemas.IntSchema
                                    __annotations__ = {
                                        "actual_frequency": actual_frequency,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["actual_frequency"]) -> MetaOapg.properties.actual_frequency: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["actual_frequency", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["actual_frequency"]) -> typing.Union[MetaOapg.properties.actual_frequency, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["actual_frequency", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                actual_frequency: typing.Union[MetaOapg.properties.actual_frequency, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'CPU':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    actual_frequency=actual_frequency,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class energy(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    consumed = schemas.IntSchema
                                    __annotations__ = {
                                        "consumed": consumed,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["consumed"]) -> MetaOapg.properties.consumed: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["consumed", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["consumed"]) -> typing.Union[MetaOapg.properties.consumed, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["consumed", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                consumed: typing.Union[MetaOapg.properties.consumed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'energy':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    consumed=consumed,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "CPU": CPU,
                            "energy": energy,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["CPU"]) -> MetaOapg.properties.CPU: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["energy"]) -> MetaOapg.properties.energy: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["CPU", "energy", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["CPU"]) -> typing.Union[MetaOapg.properties.CPU, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["energy"]) -> typing.Union[MetaOapg.properties.energy, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["CPU", "energy", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    CPU: typing.Union[MetaOapg.properties.CPU, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    energy: typing.Union[MetaOapg.properties.energy, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'statistics':
                    return super().__new__(
                        cls,
                        *_args,
                        CPU=CPU,
                        energy=energy,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class step(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        job_id = schemas.IntSchema
                        
                        
                        class het(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    component = schemas.IntSchema
                                    __annotations__ = {
                                        "component": component,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["component"]) -> MetaOapg.properties.component: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["component", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["component"]) -> typing.Union[MetaOapg.properties.component, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["component", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                component: typing.Union[MetaOapg.properties.component, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'het':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    component=component,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        id = schemas.StrSchema
                        name = schemas.StrSchema
                        __annotations__ = {
                            "job_id": job_id,
                            "het": het,
                            "id": id,
                            "name": name,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["job_id"]) -> MetaOapg.properties.job_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["het"]) -> MetaOapg.properties.het: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["job_id", "het", "id", "name", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["job_id"]) -> typing.Union[MetaOapg.properties.job_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["het"]) -> typing.Union[MetaOapg.properties.het, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["job_id", "het", "id", "name", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    job_id: typing.Union[MetaOapg.properties.job_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    het: typing.Union[MetaOapg.properties.het, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                    name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'step':
                    return super().__new__(
                        cls,
                        *_args,
                        job_id=job_id,
                        het=het,
                        id=id,
                        name=name,
                        _configuration=_configuration,
                        **kwargs,
                    )
            task = schemas.StrSchema
            
            
            class tres(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class requested(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                
                                    @staticmethod
                                    def average() -> typing.Type['Dbv0038TresList']:
                                        return Dbv0038TresList
                                
                                    @staticmethod
                                    def max() -> typing.Type['Dbv0038TresList']:
                                        return Dbv0038TresList
                                
                                    @staticmethod
                                    def min() -> typing.Type['Dbv0038TresList']:
                                        return Dbv0038TresList
                                
                                    @staticmethod
                                    def total() -> typing.Type['Dbv0038TresList']:
                                        return Dbv0038TresList
                                    __annotations__ = {
                                        "average": average,
                                        "max": max,
                                        "min": min,
                                        "total": total,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["average"]) -> 'Dbv0038TresList': ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["max"]) -> 'Dbv0038TresList': ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["min"]) -> 'Dbv0038TresList': ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["total"]) -> 'Dbv0038TresList': ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["average", "max", "min", "total", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["average"]) -> typing.Union['Dbv0038TresList', schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["max"]) -> typing.Union['Dbv0038TresList', schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["min"]) -> typing.Union['Dbv0038TresList', schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union['Dbv0038TresList', schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["average", "max", "min", "total", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                average: typing.Union['Dbv0038TresList', schemas.Unset] = schemas.unset,
                                max: typing.Union['Dbv0038TresList', schemas.Unset] = schemas.unset,
                                min: typing.Union['Dbv0038TresList', schemas.Unset] = schemas.unset,
                                total: typing.Union['Dbv0038TresList', schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'requested':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    average=average,
                                    max=max,
                                    min=min,
                                    total=total,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class consumed(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                
                                    @staticmethod
                                    def average() -> typing.Type['Dbv0038TresList']:
                                        return Dbv0038TresList
                                
                                    @staticmethod
                                    def max() -> typing.Type['Dbv0038TresList']:
                                        return Dbv0038TresList
                                
                                    @staticmethod
                                    def min() -> typing.Type['Dbv0038TresList']:
                                        return Dbv0038TresList
                                
                                    @staticmethod
                                    def total() -> typing.Type['Dbv0038TresList']:
                                        return Dbv0038TresList
                                    __annotations__ = {
                                        "average": average,
                                        "max": max,
                                        "min": min,
                                        "total": total,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["average"]) -> 'Dbv0038TresList': ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["max"]) -> 'Dbv0038TresList': ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["min"]) -> 'Dbv0038TresList': ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["total"]) -> 'Dbv0038TresList': ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["average", "max", "min", "total", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["average"]) -> typing.Union['Dbv0038TresList', schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["max"]) -> typing.Union['Dbv0038TresList', schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["min"]) -> typing.Union['Dbv0038TresList', schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union['Dbv0038TresList', schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["average", "max", "min", "total", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                average: typing.Union['Dbv0038TresList', schemas.Unset] = schemas.unset,
                                max: typing.Union['Dbv0038TresList', schemas.Unset] = schemas.unset,
                                min: typing.Union['Dbv0038TresList', schemas.Unset] = schemas.unset,
                                total: typing.Union['Dbv0038TresList', schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'consumed':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    average=average,
                                    max=max,
                                    min=min,
                                    total=total,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                    
                        @staticmethod
                        def allocated() -> typing.Type['Dbv0038TresList']:
                            return Dbv0038TresList
                        __annotations__ = {
                            "requested": requested,
                            "consumed": consumed,
                            "allocated": allocated,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["requested"]) -> MetaOapg.properties.requested: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["consumed"]) -> MetaOapg.properties.consumed: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["allocated"]) -> 'Dbv0038TresList': ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["requested", "consumed", "allocated", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["requested"]) -> typing.Union[MetaOapg.properties.requested, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["consumed"]) -> typing.Union[MetaOapg.properties.consumed, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["allocated"]) -> typing.Union['Dbv0038TresList', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["requested", "consumed", "allocated", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    requested: typing.Union[MetaOapg.properties.requested, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    consumed: typing.Union[MetaOapg.properties.consumed, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    allocated: typing.Union['Dbv0038TresList', schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'tres':
                    return super().__new__(
                        cls,
                        *_args,
                        requested=requested,
                        consumed=consumed,
                        allocated=allocated,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "time": time,
                "exit_code": exit_code,
                "nodes": nodes,
                "tasks": tasks,
                "pid": pid,
                "CPU": CPU,
                "kill_request_user": kill_request_user,
                "state": state,
                "statistics": statistics,
                "step": step,
                "task": task,
                "tres": tres,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exit_code"]) -> 'Dbv0038JobExitCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodes"]) -> MetaOapg.properties.nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tasks"]) -> MetaOapg.properties.tasks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pid"]) -> MetaOapg.properties.pid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CPU"]) -> MetaOapg.properties.CPU: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kill_request_user"]) -> MetaOapg.properties.kill_request_user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statistics"]) -> MetaOapg.properties.statistics: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["step"]) -> MetaOapg.properties.step: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["task"]) -> MetaOapg.properties.task: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tres"]) -> MetaOapg.properties.tres: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["time", "exit_code", "nodes", "tasks", "pid", "CPU", "kill_request_user", "state", "statistics", "step", "task", "tres", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> typing.Union[MetaOapg.properties.time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exit_code"]) -> typing.Union['Dbv0038JobExitCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodes"]) -> typing.Union[MetaOapg.properties.nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tasks"]) -> typing.Union[MetaOapg.properties.tasks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pid"]) -> typing.Union[MetaOapg.properties.pid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CPU"]) -> typing.Union[MetaOapg.properties.CPU, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kill_request_user"]) -> typing.Union[MetaOapg.properties.kill_request_user, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statistics"]) -> typing.Union[MetaOapg.properties.statistics, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["step"]) -> typing.Union[MetaOapg.properties.step, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["task"]) -> typing.Union[MetaOapg.properties.task, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tres"]) -> typing.Union[MetaOapg.properties.tres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["time", "exit_code", "nodes", "tasks", "pid", "CPU", "kill_request_user", "state", "statistics", "step", "task", "tres", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        time: typing.Union[MetaOapg.properties.time, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        exit_code: typing.Union['Dbv0038JobExitCode', schemas.Unset] = schemas.unset,
        nodes: typing.Union[MetaOapg.properties.nodes, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        tasks: typing.Union[MetaOapg.properties.tasks, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        pid: typing.Union[MetaOapg.properties.pid, str, schemas.Unset] = schemas.unset,
        CPU: typing.Union[MetaOapg.properties.CPU, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        kill_request_user: typing.Union[MetaOapg.properties.kill_request_user, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        statistics: typing.Union[MetaOapg.properties.statistics, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        step: typing.Union[MetaOapg.properties.step, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        task: typing.Union[MetaOapg.properties.task, str, schemas.Unset] = schemas.unset,
        tres: typing.Union[MetaOapg.properties.tres, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Dbv0038JobStep':
        return super().__new__(
            cls,
            *_args,
            time=time,
            exit_code=exit_code,
            nodes=nodes,
            tasks=tasks,
            pid=pid,
            CPU=CPU,
            kill_request_user=kill_request_user,
            state=state,
            statistics=statistics,
            step=step,
            task=task,
            tres=tres,
            _configuration=_configuration,
            **kwargs,
        )

from slurmrestapi.model.dbv0038_job_exit_code import Dbv0038JobExitCode
from slurmrestapi.model.dbv0038_tres_list import Dbv0038TresList
