# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.38
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class V0038JobResources(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            nodes = schemas.StrSchema
            allocated_cpus = schemas.IntSchema
            allocated_hosts = schemas.IntSchema
            
            
            class allocated_nodes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V0038NodeAllocation']:
                        return V0038NodeAllocation
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['V0038NodeAllocation'], typing.List['V0038NodeAllocation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'allocated_nodes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V0038NodeAllocation':
                    return super().__getitem__(i)
            __annotations__ = {
                "nodes": nodes,
                "allocated_cpus": allocated_cpus,
                "allocated_hosts": allocated_hosts,
                "allocated_nodes": allocated_nodes,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodes"]) -> MetaOapg.properties.nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allocated_cpus"]) -> MetaOapg.properties.allocated_cpus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allocated_hosts"]) -> MetaOapg.properties.allocated_hosts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allocated_nodes"]) -> MetaOapg.properties.allocated_nodes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["nodes", "allocated_cpus", "allocated_hosts", "allocated_nodes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodes"]) -> typing.Union[MetaOapg.properties.nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allocated_cpus"]) -> typing.Union[MetaOapg.properties.allocated_cpus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allocated_hosts"]) -> typing.Union[MetaOapg.properties.allocated_hosts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allocated_nodes"]) -> typing.Union[MetaOapg.properties.allocated_nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["nodes", "allocated_cpus", "allocated_hosts", "allocated_nodes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        nodes: typing.Union[MetaOapg.properties.nodes, str, schemas.Unset] = schemas.unset,
        allocated_cpus: typing.Union[MetaOapg.properties.allocated_cpus, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        allocated_hosts: typing.Union[MetaOapg.properties.allocated_hosts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        allocated_nodes: typing.Union[MetaOapg.properties.allocated_nodes, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V0038JobResources':
        return super().__new__(
            cls,
            *_args,
            nodes=nodes,
            allocated_cpus=allocated_cpus,
            allocated_hosts=allocated_hosts,
            allocated_nodes=allocated_nodes,
            _configuration=_configuration,
            **kwargs,
        )

from slurmrestapi.model.v0038_node_allocation import V0038NodeAllocation
