# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.39
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class V0039JobDescMsg(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            account = schemas.StrSchema
            account_gather_frequency = schemas.StrSchema
            admin_comment = schemas.StrSchema
            allocation_node_list = schemas.StrSchema
            allocation_node_port = schemas.Int32Schema
        
            @staticmethod
            def argv() -> typing.Type['V0039StringArray']:
                return V0039StringArray
            array = schemas.StrSchema
            batch_features = schemas.StrSchema
            begin_time = schemas.Int64Schema
            
            
            class flags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def KILL_INVALID_DEPENDENCY(cls):
                            return cls("KILL_INVALID_DEPENDENCY")
                        
                        @schemas.classproperty
                        def NO_KILL_INVALID_DEPENDENCY(cls):
                            return cls("NO_KILL_INVALID_DEPENDENCY")
                        
                        @schemas.classproperty
                        def HAS_STATE_DIRECTORY(cls):
                            return cls("HAS_STATE_DIRECTORY")
                        
                        @schemas.classproperty
                        def TESTING_BACKFILL(cls):
                            return cls("TESTING_BACKFILL")
                        
                        @schemas.classproperty
                        def GRES_BINDING_ENFORCED(cls):
                            return cls("GRES_BINDING_ENFORCED")
                        
                        @schemas.classproperty
                        def TEST_NOW_ONLY(cls):
                            return cls("TEST_NOW_ONLY")
                        
                        @schemas.classproperty
                        def SEND_JOB_ENVIRONMENT(cls):
                            return cls("SEND_JOB_ENVIRONMENT")
                        
                        @schemas.classproperty
                        def SPREAD_JOB(cls):
                            return cls("SPREAD_JOB")
                        
                        @schemas.classproperty
                        def PREFER_MINIMUM_NODE_COUNT(cls):
                            return cls("PREFER_MINIMUM_NODE_COUNT")
                        
                        @schemas.classproperty
                        def JOB_KILL_HURRY(cls):
                            return cls("JOB_KILL_HURRY")
                        
                        @schemas.classproperty
                        def SKIP_TRES_STRING_ACCOUNTING(cls):
                            return cls("SKIP_TRES_STRING_ACCOUNTING")
                        
                        @schemas.classproperty
                        def SIBLING_CLUSTER_UPDATE_ONLY(cls):
                            return cls("SIBLING_CLUSTER_UPDATE_ONLY")
                        
                        @schemas.classproperty
                        def HETEROGENEOUS_JOB(cls):
                            return cls("HETEROGENEOUS_JOB")
                        
                        @schemas.classproperty
                        def EXACT_TASK_COUNT_REQUESTED(cls):
                            return cls("EXACT_TASK_COUNT_REQUESTED")
                        
                        @schemas.classproperty
                        def EXACT_CPU_COUNT_REQUESTED(cls):
                            return cls("EXACT_CPU_COUNT_REQUESTED")
                        
                        @schemas.classproperty
                        def TESTING_WHOLE_NODE_BACKFILL(cls):
                            return cls("TESTING_WHOLE_NODE_BACKFILL")
                        
                        @schemas.classproperty
                        def TOP_PRIORITY_JOB(cls):
                            return cls("TOP_PRIORITY_JOB")
                        
                        @schemas.classproperty
                        def ACCRUE_COUNT_CLEARED(cls):
                            return cls("ACCRUE_COUNT_CLEARED")
                        
                        @schemas.classproperty
                        def GRED_BINDING_DISABLED(cls):
                            return cls("GRED_BINDING_DISABLED")
                        
                        @schemas.classproperty
                        def JOB_WAS_RUNNING(cls):
                            return cls("JOB_WAS_RUNNING")
                        
                        @schemas.classproperty
                        def JOB_ACCRUE_TIME_RESET(cls):
                            return cls("JOB_ACCRUE_TIME_RESET")
                        
                        @schemas.classproperty
                        def CRON_JOB(cls):
                            return cls("CRON_JOB")
                        
                        @schemas.classproperty
                        def EXACT_MEMORY_REQUESTED(cls):
                            return cls("EXACT_MEMORY_REQUESTED")
                        
                        @schemas.classproperty
                        def JOB_RESIZED(cls):
                            return cls("JOB_RESIZED")
                        
                        @schemas.classproperty
                        def USING_DEFAULT_ACCOUNT(cls):
                            return cls("USING_DEFAULT_ACCOUNT")
                        
                        @schemas.classproperty
                        def USING_DEFAULT_PARTITION(cls):
                            return cls("USING_DEFAULT_PARTITION")
                        
                        @schemas.classproperty
                        def USING_DEFAULT_QOS(cls):
                            return cls("USING_DEFAULT_QOS")
                        
                        @schemas.classproperty
                        def USING_DEFAULT_WCKEY(cls):
                            return cls("USING_DEFAULT_WCKEY")
                        
                        @schemas.classproperty
                        def DEPENDENT(cls):
                            return cls("DEPENDENT")
                        
                        @schemas.classproperty
                        def MAGNETIC(cls):
                            return cls("MAGNETIC")
                        
                        @schemas.classproperty
                        def PARTITION_ASSIGNED(cls):
                            return cls("PARTITION_ASSIGNED")
                        
                        @schemas.classproperty
                        def BACKFILL_ATTEMPTED(cls):
                            return cls("BACKFILL_ATTEMPTED")
                        
                        @schemas.classproperty
                        def SCHEDULING_ATTEMPTED(cls):
                            return cls("SCHEDULING_ATTEMPTED")
                        
                        @schemas.classproperty
                        def SAVE_BATCH_SCRIPT(cls):
                            return cls("SAVE_BATCH_SCRIPT")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'flags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            burst_buffer = schemas.StrSchema
            clusters = schemas.StrSchema
            cluster_constraint = schemas.StrSchema
            comment = schemas.StrSchema
            contiguous = schemas.BoolSchema
            container = schemas.StrSchema
            container_id = schemas.StrSchema
            core_specification = schemas.Int32Schema
            thread_specification = schemas.Int32Schema
            cpu_binding = schemas.StrSchema
            
            
            class cpu_binding_flags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def VERBOSE(cls):
                            return cls("VERBOSE")
                        
                        @schemas.classproperty
                        def CPU_BIND_TO_THREADS(cls):
                            return cls("CPU_BIND_TO_THREADS")
                        
                        @schemas.classproperty
                        def CPU_BIND_TO_CORES(cls):
                            return cls("CPU_BIND_TO_CORES")
                        
                        @schemas.classproperty
                        def CPU_BIND_TO_SOCKETS(cls):
                            return cls("CPU_BIND_TO_SOCKETS")
                        
                        @schemas.classproperty
                        def CPU_BIND_TO_LDOMS(cls):
                            return cls("CPU_BIND_TO_LDOMS")
                        
                        @schemas.classproperty
                        def CPU_BIND_NONE(cls):
                            return cls("CPU_BIND_NONE")
                        
                        @schemas.classproperty
                        def CPU_BIND_RANK(cls):
                            return cls("CPU_BIND_RANK")
                        
                        @schemas.classproperty
                        def CPU_BIND_MAP(cls):
                            return cls("CPU_BIND_MAP")
                        
                        @schemas.classproperty
                        def CPU_BIND_MASK(cls):
                            return cls("CPU_BIND_MASK")
                        
                        @schemas.classproperty
                        def CPU_BIND_LDRANK(cls):
                            return cls("CPU_BIND_LDRANK")
                        
                        @schemas.classproperty
                        def CPU_BIND_LDMAP(cls):
                            return cls("CPU_BIND_LDMAP")
                        
                        @schemas.classproperty
                        def CPU_BIND_LDMASK(cls):
                            return cls("CPU_BIND_LDMASK")
                        
                        @schemas.classproperty
                        def CPU_BIND_ONE_THREAD_PER_CORE(cls):
                            return cls("CPU_BIND_ONE_THREAD_PER_CORE")
                        
                        @schemas.classproperty
                        def CPU_AUTO_BIND_TO_THREADS(cls):
                            return cls("CPU_AUTO_BIND_TO_THREADS")
                        
                        @schemas.classproperty
                        def CPU_AUTO_BIND_TO_CORES(cls):
                            return cls("CPU_AUTO_BIND_TO_CORES")
                        
                        @schemas.classproperty
                        def CPU_AUTO_BIND_TO_SOCKETS(cls):
                            return cls("CPU_AUTO_BIND_TO_SOCKETS")
                        
                        @schemas.classproperty
                        def SLURMD_OFF_SPEC(cls):
                            return cls("SLURMD_OFF_SPEC")
                        
                        @schemas.classproperty
                        def CPU_BIND_OFF(cls):
                            return cls("CPU_BIND_OFF")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cpu_binding_flags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            cpu_frequency = schemas.StrSchema
            cpus_per_tres = schemas.StrSchema
        
            @staticmethod
            def crontab() -> typing.Type['V0039CronEntry']:
                return V0039CronEntry
            deadline = schemas.Int64Schema
            delay_boot = schemas.Int32Schema
            dependency = schemas.StrSchema
            end_time = schemas.Int64Schema
        
            @staticmethod
            def environment() -> typing.Type['V0039StringArray']:
                return V0039StringArray
        
            @staticmethod
            def excluded_nodes() -> typing.Type['V0039CsvList']:
                return V0039CsvList
            extra = schemas.StrSchema
            constraints = schemas.StrSchema
            group_id = schemas.StrSchema
            hetjob_group = schemas.Int32Schema
            immediate = schemas.BoolSchema
            job_id = schemas.Int32Schema
            kill_on_node_fail = schemas.BoolSchema
            licenses = schemas.StrSchema
            
            
            class mail_type(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def BEGIN(cls):
                            return cls("BEGIN")
                        
                        @schemas.classproperty
                        def END(cls):
                            return cls("END")
                        
                        @schemas.classproperty
                        def FAIL(cls):
                            return cls("FAIL")
                        
                        @schemas.classproperty
                        def REQUEUE(cls):
                            return cls("REQUEUE")
                        
                        @schemas.classproperty
                        def TIME100(cls):
                            return cls("TIME=100%")
                        
                        @schemas.classproperty
                        def TIME90(cls):
                            return cls("TIME=90%")
                        
                        @schemas.classproperty
                        def TIME80(cls):
                            return cls("TIME=80%")
                        
                        @schemas.classproperty
                        def TIME50(cls):
                            return cls("TIME=50%")
                        
                        @schemas.classproperty
                        def STAGE_OUT(cls):
                            return cls("STAGE_OUT")
                        
                        @schemas.classproperty
                        def ARRAY_TASKS(cls):
                            return cls("ARRAY_TASKS")
                        
                        @schemas.classproperty
                        def INVALID_DEPENDENCY(cls):
                            return cls("INVALID_DEPENDENCY")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mail_type':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            mail_user = schemas.StrSchema
            mcs_label = schemas.StrSchema
            memory_binding = schemas.StrSchema
            
            
            class memory_binding_type(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def VERBOSE(cls):
                            return cls("VERBOSE")
                        
                        @schemas.classproperty
                        def NONE(cls):
                            return cls("NONE")
                        
                        @schemas.classproperty
                        def RANK(cls):
                            return cls("RANK")
                        
                        @schemas.classproperty
                        def MAP(cls):
                            return cls("MAP")
                        
                        @schemas.classproperty
                        def MASK(cls):
                            return cls("MASK")
                        
                        @schemas.classproperty
                        def LOCAL(cls):
                            return cls("LOCAL")
                        
                        @schemas.classproperty
                        def SORT(cls):
                            return cls("SORT")
                        
                        @schemas.classproperty
                        def PREFER(cls):
                            return cls("PREFER")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'memory_binding_type':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            memory_per_tres = schemas.StrSchema
            name = schemas.StrSchema
            network = schemas.StrSchema
            nice = schemas.Int32Schema
            tasks = schemas.Int32Schema
            
            
            class open_mode(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def APPEND(cls):
                            return cls("APPEND")
                        
                        @schemas.classproperty
                        def TRUNCATE(cls):
                            return cls("TRUNCATE")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'open_mode':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            reserve_ports = schemas.Int32Schema
            overcommit = schemas.BoolSchema
            partition = schemas.StrSchema
            distribution_plane_size = schemas.Int32Schema
            
            
            class power_flags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def EQUAL_POWER(cls):
                            return cls("EQUAL_POWER")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'power_flags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            prefer = schemas.StrSchema
            priority = schemas.Int32Schema
            
            
            class profile(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def NOT_SET(cls):
                            return cls("NOT_SET")
                        
                        @schemas.classproperty
                        def NONE(cls):
                            return cls("NONE")
                        
                        @schemas.classproperty
                        def ENERGY(cls):
                            return cls("ENERGY")
                        
                        @schemas.classproperty
                        def LUSTRE(cls):
                            return cls("LUSTRE")
                        
                        @schemas.classproperty
                        def NETWORK(cls):
                            return cls("NETWORK")
                        
                        @schemas.classproperty
                        def TASK(cls):
                            return cls("TASK")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'profile':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            qos = schemas.StrSchema
            reboot = schemas.BoolSchema
        
            @staticmethod
            def required_nodes() -> typing.Type['V0039CsvList']:
                return V0039CsvList
            requeue = schemas.BoolSchema
            reservation = schemas.StrSchema
            script = schemas.StrSchema
            
            
            class shared(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def NONE(cls):
                            return cls("none")
                        
                        @schemas.classproperty
                        def OVERSUBSCRIBE(cls):
                            return cls("oversubscribe")
                        
                        @schemas.classproperty
                        def USER(cls):
                            return cls("user")
                        
                        @schemas.classproperty
                        def MCS(cls):
                            return cls("mcs")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'shared':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def exclusive() -> typing.Type['V0039JobExclusive']:
                return V0039JobExclusive
            site_factor = schemas.Int32Schema
        
            @staticmethod
            def spank_environment() -> typing.Type['V0039StringArray']:
                return V0039StringArray
            distribution = schemas.StrSchema
        
            @staticmethod
            def time_limit() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
        
            @staticmethod
            def time_minimum() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
            tres_bind = schemas.StrSchema
            tres_freq = schemas.StrSchema
            tres_per_job = schemas.StrSchema
            tres_per_node = schemas.StrSchema
            tres_per_socket = schemas.StrSchema
            tres_per_task = schemas.StrSchema
            user_id = schemas.StrSchema
            wait_all_nodes = schemas.BoolSchema
            
            
            class kill_warning_flags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def BATCH_JOB(cls):
                            return cls("BATCH_JOB")
                        
                        @schemas.classproperty
                        def ARRAY_JOB(cls):
                            return cls("ARRAY_JOB")
                        
                        @schemas.classproperty
                        def FULL_STEPS_ONLY(cls):
                            return cls("FULL_STEPS_ONLY")
                        
                        @schemas.classproperty
                        def FULL_JOB(cls):
                            return cls("FULL_JOB")
                        
                        @schemas.classproperty
                        def FEDERATION_REQUEUE(cls):
                            return cls("FEDERATION_REQUEUE")
                        
                        @schemas.classproperty
                        def HURRY(cls):
                            return cls("HURRY")
                        
                        @schemas.classproperty
                        def OUT_OF_MEMORY(cls):
                            return cls("OUT_OF_MEMORY")
                        
                        @schemas.classproperty
                        def NO_SIBLING_JOBS(cls):
                            return cls("NO_SIBLING_JOBS")
                        
                        @schemas.classproperty
                        def RESERVATION_JOB(cls):
                            return cls("RESERVATION_JOB")
                        
                        @schemas.classproperty
                        def WARNING_SENT(cls):
                            return cls("WARNING_SENT")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'kill_warning_flags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            kill_warning_signal = schemas.StrSchema
        
            @staticmethod
            def kill_warning_delay() -> typing.Type['V0039Uint16NoVal']:
                return V0039Uint16NoVal
            current_working_directory = schemas.StrSchema
            cpus_per_task = schemas.Int32Schema
            minimum_cpus = schemas.Int32Schema
            maximum_cpus = schemas.Int32Schema
            nodes = schemas.StrSchema
            minimum_nodes = schemas.Int32Schema
            maximum_nodes = schemas.Int32Schema
            minimum_boards_per_node = schemas.Int32Schema
            minimum_sockets_per_board = schemas.Int32Schema
            sockets_per_node = schemas.Int32Schema
            threads_per_core = schemas.Int32Schema
            tasks_per_node = schemas.Int32Schema
            tasks_per_socket = schemas.Int32Schema
            tasks_per_core = schemas.Int32Schema
            tasks_per_board = schemas.Int32Schema
            ntasks_per_tres = schemas.Int32Schema
            minimum_cpus_per_node = schemas.Int32Schema
        
            @staticmethod
            def memory_per_cpu() -> typing.Type['V0039Uint64NoVal']:
                return V0039Uint64NoVal
        
            @staticmethod
            def memory_per_node() -> typing.Type['V0039Uint64NoVal']:
                return V0039Uint64NoVal
            temporary_disk_per_node = schemas.Int32Schema
            selinux_context = schemas.StrSchema
        
            @staticmethod
            def required_switches() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
            standard_error = schemas.StrSchema
            standard_input = schemas.StrSchema
            standard_output = schemas.StrSchema
            wait_for_switch = schemas.Int32Schema
            wckey = schemas.StrSchema
            
            
            class x11(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def FORWARD_ALL_NODES(cls):
                            return cls("FORWARD_ALL_NODES")
                        
                        @schemas.classproperty
                        def BATCH_NODE(cls):
                            return cls("BATCH_NODE")
                        
                        @schemas.classproperty
                        def FIRST_NODE(cls):
                            return cls("FIRST_NODE")
                        
                        @schemas.classproperty
                        def LAST_NODE(cls):
                            return cls("LAST_NODE")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'x11':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            x11_magic_cookie = schemas.StrSchema
            x11_target_host = schemas.StrSchema
            x11_target_port = schemas.Int32Schema
            __annotations__ = {
                "account": account,
                "account_gather_frequency": account_gather_frequency,
                "admin_comment": admin_comment,
                "allocation_node_list": allocation_node_list,
                "allocation_node_port": allocation_node_port,
                "argv": argv,
                "array": array,
                "batch_features": batch_features,
                "begin_time": begin_time,
                "flags": flags,
                "burst_buffer": burst_buffer,
                "clusters": clusters,
                "cluster_constraint": cluster_constraint,
                "comment": comment,
                "contiguous": contiguous,
                "container": container,
                "container_id": container_id,
                "core_specification": core_specification,
                "thread_specification": thread_specification,
                "cpu_binding": cpu_binding,
                "cpu_binding_flags": cpu_binding_flags,
                "cpu_frequency": cpu_frequency,
                "cpus_per_tres": cpus_per_tres,
                "crontab": crontab,
                "deadline": deadline,
                "delay_boot": delay_boot,
                "dependency": dependency,
                "end_time": end_time,
                "environment": environment,
                "excluded_nodes": excluded_nodes,
                "extra": extra,
                "constraints": constraints,
                "group_id": group_id,
                "hetjob_group": hetjob_group,
                "immediate": immediate,
                "job_id": job_id,
                "kill_on_node_fail": kill_on_node_fail,
                "licenses": licenses,
                "mail_type": mail_type,
                "mail_user": mail_user,
                "mcs_label": mcs_label,
                "memory_binding": memory_binding,
                "memory_binding_type": memory_binding_type,
                "memory_per_tres": memory_per_tres,
                "name": name,
                "network": network,
                "nice": nice,
                "tasks": tasks,
                "open_mode": open_mode,
                "reserve_ports": reserve_ports,
                "overcommit": overcommit,
                "partition": partition,
                "distribution_plane_size": distribution_plane_size,
                "power_flags": power_flags,
                "prefer": prefer,
                "priority": priority,
                "profile": profile,
                "qos": qos,
                "reboot": reboot,
                "required_nodes": required_nodes,
                "requeue": requeue,
                "reservation": reservation,
                "script": script,
                "shared": shared,
                "exclusive": exclusive,
                "site_factor": site_factor,
                "spank_environment": spank_environment,
                "distribution": distribution,
                "time_limit": time_limit,
                "time_minimum": time_minimum,
                "tres_bind": tres_bind,
                "tres_freq": tres_freq,
                "tres_per_job": tres_per_job,
                "tres_per_node": tres_per_node,
                "tres_per_socket": tres_per_socket,
                "tres_per_task": tres_per_task,
                "user_id": user_id,
                "wait_all_nodes": wait_all_nodes,
                "kill_warning_flags": kill_warning_flags,
                "kill_warning_signal": kill_warning_signal,
                "kill_warning_delay": kill_warning_delay,
                "current_working_directory": current_working_directory,
                "cpus_per_task": cpus_per_task,
                "minimum_cpus": minimum_cpus,
                "maximum_cpus": maximum_cpus,
                "nodes": nodes,
                "minimum_nodes": minimum_nodes,
                "maximum_nodes": maximum_nodes,
                "minimum_boards_per_node": minimum_boards_per_node,
                "minimum_sockets_per_board": minimum_sockets_per_board,
                "sockets_per_node": sockets_per_node,
                "threads_per_core": threads_per_core,
                "tasks_per_node": tasks_per_node,
                "tasks_per_socket": tasks_per_socket,
                "tasks_per_core": tasks_per_core,
                "tasks_per_board": tasks_per_board,
                "ntasks_per_tres": ntasks_per_tres,
                "minimum_cpus_per_node": minimum_cpus_per_node,
                "memory_per_cpu": memory_per_cpu,
                "memory_per_node": memory_per_node,
                "temporary_disk_per_node": temporary_disk_per_node,
                "selinux_context": selinux_context,
                "required_switches": required_switches,
                "standard_error": standard_error,
                "standard_input": standard_input,
                "standard_output": standard_output,
                "wait_for_switch": wait_for_switch,
                "wckey": wckey,
                "x11": x11,
                "x11_magic_cookie": x11_magic_cookie,
                "x11_target_host": x11_target_host,
                "x11_target_port": x11_target_port,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_gather_frequency"]) -> MetaOapg.properties.account_gather_frequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["admin_comment"]) -> MetaOapg.properties.admin_comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allocation_node_list"]) -> MetaOapg.properties.allocation_node_list: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allocation_node_port"]) -> MetaOapg.properties.allocation_node_port: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["argv"]) -> 'V0039StringArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["array"]) -> MetaOapg.properties.array: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["batch_features"]) -> MetaOapg.properties.batch_features: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["begin_time"]) -> MetaOapg.properties.begin_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flags"]) -> MetaOapg.properties.flags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["burst_buffer"]) -> MetaOapg.properties.burst_buffer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clusters"]) -> MetaOapg.properties.clusters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cluster_constraint"]) -> MetaOapg.properties.cluster_constraint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contiguous"]) -> MetaOapg.properties.contiguous: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["container"]) -> MetaOapg.properties.container: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["container_id"]) -> MetaOapg.properties.container_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["core_specification"]) -> MetaOapg.properties.core_specification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thread_specification"]) -> MetaOapg.properties.thread_specification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpu_binding"]) -> MetaOapg.properties.cpu_binding: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpu_binding_flags"]) -> MetaOapg.properties.cpu_binding_flags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpu_frequency"]) -> MetaOapg.properties.cpu_frequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpus_per_tres"]) -> MetaOapg.properties.cpus_per_tres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crontab"]) -> 'V0039CronEntry': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deadline"]) -> MetaOapg.properties.deadline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delay_boot"]) -> MetaOapg.properties.delay_boot: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dependency"]) -> MetaOapg.properties.dependency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_time"]) -> MetaOapg.properties.end_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environment"]) -> 'V0039StringArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excluded_nodes"]) -> 'V0039CsvList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extra"]) -> MetaOapg.properties.extra: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["constraints"]) -> MetaOapg.properties.constraints: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group_id"]) -> MetaOapg.properties.group_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hetjob_group"]) -> MetaOapg.properties.hetjob_group: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["immediate"]) -> MetaOapg.properties.immediate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_id"]) -> MetaOapg.properties.job_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kill_on_node_fail"]) -> MetaOapg.properties.kill_on_node_fail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["licenses"]) -> MetaOapg.properties.licenses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mail_type"]) -> MetaOapg.properties.mail_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mail_user"]) -> MetaOapg.properties.mail_user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mcs_label"]) -> MetaOapg.properties.mcs_label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memory_binding"]) -> MetaOapg.properties.memory_binding: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memory_binding_type"]) -> MetaOapg.properties.memory_binding_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memory_per_tres"]) -> MetaOapg.properties.memory_per_tres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network"]) -> MetaOapg.properties.network: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nice"]) -> MetaOapg.properties.nice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tasks"]) -> MetaOapg.properties.tasks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["open_mode"]) -> MetaOapg.properties.open_mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reserve_ports"]) -> MetaOapg.properties.reserve_ports: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overcommit"]) -> MetaOapg.properties.overcommit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partition"]) -> MetaOapg.properties.partition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["distribution_plane_size"]) -> MetaOapg.properties.distribution_plane_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["power_flags"]) -> MetaOapg.properties.power_flags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefer"]) -> MetaOapg.properties.prefer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profile"]) -> MetaOapg.properties.profile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qos"]) -> MetaOapg.properties.qos: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reboot"]) -> MetaOapg.properties.reboot: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["required_nodes"]) -> 'V0039CsvList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requeue"]) -> MetaOapg.properties.requeue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reservation"]) -> MetaOapg.properties.reservation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["script"]) -> MetaOapg.properties.script: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shared"]) -> MetaOapg.properties.shared: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exclusive"]) -> 'V0039JobExclusive': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["site_factor"]) -> MetaOapg.properties.site_factor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spank_environment"]) -> 'V0039StringArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["distribution"]) -> MetaOapg.properties.distribution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_limit"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_minimum"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tres_bind"]) -> MetaOapg.properties.tres_bind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tres_freq"]) -> MetaOapg.properties.tres_freq: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tres_per_job"]) -> MetaOapg.properties.tres_per_job: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tres_per_node"]) -> MetaOapg.properties.tres_per_node: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tres_per_socket"]) -> MetaOapg.properties.tres_per_socket: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tres_per_task"]) -> MetaOapg.properties.tres_per_task: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wait_all_nodes"]) -> MetaOapg.properties.wait_all_nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kill_warning_flags"]) -> MetaOapg.properties.kill_warning_flags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kill_warning_signal"]) -> MetaOapg.properties.kill_warning_signal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kill_warning_delay"]) -> 'V0039Uint16NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_working_directory"]) -> MetaOapg.properties.current_working_directory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpus_per_task"]) -> MetaOapg.properties.cpus_per_task: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimum_cpus"]) -> MetaOapg.properties.minimum_cpus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maximum_cpus"]) -> MetaOapg.properties.maximum_cpus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodes"]) -> MetaOapg.properties.nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimum_nodes"]) -> MetaOapg.properties.minimum_nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maximum_nodes"]) -> MetaOapg.properties.maximum_nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimum_boards_per_node"]) -> MetaOapg.properties.minimum_boards_per_node: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimum_sockets_per_board"]) -> MetaOapg.properties.minimum_sockets_per_board: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sockets_per_node"]) -> MetaOapg.properties.sockets_per_node: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["threads_per_core"]) -> MetaOapg.properties.threads_per_core: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tasks_per_node"]) -> MetaOapg.properties.tasks_per_node: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tasks_per_socket"]) -> MetaOapg.properties.tasks_per_socket: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tasks_per_core"]) -> MetaOapg.properties.tasks_per_core: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tasks_per_board"]) -> MetaOapg.properties.tasks_per_board: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ntasks_per_tres"]) -> MetaOapg.properties.ntasks_per_tres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimum_cpus_per_node"]) -> MetaOapg.properties.minimum_cpus_per_node: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memory_per_cpu"]) -> 'V0039Uint64NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memory_per_node"]) -> 'V0039Uint64NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["temporary_disk_per_node"]) -> MetaOapg.properties.temporary_disk_per_node: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selinux_context"]) -> MetaOapg.properties.selinux_context: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["required_switches"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["standard_error"]) -> MetaOapg.properties.standard_error: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["standard_input"]) -> MetaOapg.properties.standard_input: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["standard_output"]) -> MetaOapg.properties.standard_output: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wait_for_switch"]) -> MetaOapg.properties.wait_for_switch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wckey"]) -> MetaOapg.properties.wckey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x11"]) -> MetaOapg.properties.x11: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x11_magic_cookie"]) -> MetaOapg.properties.x11_magic_cookie: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x11_target_host"]) -> MetaOapg.properties.x11_target_host: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x11_target_port"]) -> MetaOapg.properties.x11_target_port: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account", "account_gather_frequency", "admin_comment", "allocation_node_list", "allocation_node_port", "argv", "array", "batch_features", "begin_time", "flags", "burst_buffer", "clusters", "cluster_constraint", "comment", "contiguous", "container", "container_id", "core_specification", "thread_specification", "cpu_binding", "cpu_binding_flags", "cpu_frequency", "cpus_per_tres", "crontab", "deadline", "delay_boot", "dependency", "end_time", "environment", "excluded_nodes", "extra", "constraints", "group_id", "hetjob_group", "immediate", "job_id", "kill_on_node_fail", "licenses", "mail_type", "mail_user", "mcs_label", "memory_binding", "memory_binding_type", "memory_per_tres", "name", "network", "nice", "tasks", "open_mode", "reserve_ports", "overcommit", "partition", "distribution_plane_size", "power_flags", "prefer", "priority", "profile", "qos", "reboot", "required_nodes", "requeue", "reservation", "script", "shared", "exclusive", "site_factor", "spank_environment", "distribution", "time_limit", "time_minimum", "tres_bind", "tres_freq", "tres_per_job", "tres_per_node", "tres_per_socket", "tres_per_task", "user_id", "wait_all_nodes", "kill_warning_flags", "kill_warning_signal", "kill_warning_delay", "current_working_directory", "cpus_per_task", "minimum_cpus", "maximum_cpus", "nodes", "minimum_nodes", "maximum_nodes", "minimum_boards_per_node", "minimum_sockets_per_board", "sockets_per_node", "threads_per_core", "tasks_per_node", "tasks_per_socket", "tasks_per_core", "tasks_per_board", "ntasks_per_tres", "minimum_cpus_per_node", "memory_per_cpu", "memory_per_node", "temporary_disk_per_node", "selinux_context", "required_switches", "standard_error", "standard_input", "standard_output", "wait_for_switch", "wckey", "x11", "x11_magic_cookie", "x11_target_host", "x11_target_port", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> typing.Union[MetaOapg.properties.account, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_gather_frequency"]) -> typing.Union[MetaOapg.properties.account_gather_frequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["admin_comment"]) -> typing.Union[MetaOapg.properties.admin_comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allocation_node_list"]) -> typing.Union[MetaOapg.properties.allocation_node_list, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allocation_node_port"]) -> typing.Union[MetaOapg.properties.allocation_node_port, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["argv"]) -> typing.Union['V0039StringArray', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["array"]) -> typing.Union[MetaOapg.properties.array, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["batch_features"]) -> typing.Union[MetaOapg.properties.batch_features, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["begin_time"]) -> typing.Union[MetaOapg.properties.begin_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flags"]) -> typing.Union[MetaOapg.properties.flags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["burst_buffer"]) -> typing.Union[MetaOapg.properties.burst_buffer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clusters"]) -> typing.Union[MetaOapg.properties.clusters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cluster_constraint"]) -> typing.Union[MetaOapg.properties.cluster_constraint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contiguous"]) -> typing.Union[MetaOapg.properties.contiguous, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["container"]) -> typing.Union[MetaOapg.properties.container, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["container_id"]) -> typing.Union[MetaOapg.properties.container_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["core_specification"]) -> typing.Union[MetaOapg.properties.core_specification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thread_specification"]) -> typing.Union[MetaOapg.properties.thread_specification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpu_binding"]) -> typing.Union[MetaOapg.properties.cpu_binding, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpu_binding_flags"]) -> typing.Union[MetaOapg.properties.cpu_binding_flags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpu_frequency"]) -> typing.Union[MetaOapg.properties.cpu_frequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpus_per_tres"]) -> typing.Union[MetaOapg.properties.cpus_per_tres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crontab"]) -> typing.Union['V0039CronEntry', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deadline"]) -> typing.Union[MetaOapg.properties.deadline, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delay_boot"]) -> typing.Union[MetaOapg.properties.delay_boot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dependency"]) -> typing.Union[MetaOapg.properties.dependency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_time"]) -> typing.Union[MetaOapg.properties.end_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environment"]) -> typing.Union['V0039StringArray', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excluded_nodes"]) -> typing.Union['V0039CsvList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extra"]) -> typing.Union[MetaOapg.properties.extra, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["constraints"]) -> typing.Union[MetaOapg.properties.constraints, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group_id"]) -> typing.Union[MetaOapg.properties.group_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hetjob_group"]) -> typing.Union[MetaOapg.properties.hetjob_group, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["immediate"]) -> typing.Union[MetaOapg.properties.immediate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_id"]) -> typing.Union[MetaOapg.properties.job_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kill_on_node_fail"]) -> typing.Union[MetaOapg.properties.kill_on_node_fail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["licenses"]) -> typing.Union[MetaOapg.properties.licenses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mail_type"]) -> typing.Union[MetaOapg.properties.mail_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mail_user"]) -> typing.Union[MetaOapg.properties.mail_user, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mcs_label"]) -> typing.Union[MetaOapg.properties.mcs_label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memory_binding"]) -> typing.Union[MetaOapg.properties.memory_binding, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memory_binding_type"]) -> typing.Union[MetaOapg.properties.memory_binding_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memory_per_tres"]) -> typing.Union[MetaOapg.properties.memory_per_tres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network"]) -> typing.Union[MetaOapg.properties.network, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nice"]) -> typing.Union[MetaOapg.properties.nice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tasks"]) -> typing.Union[MetaOapg.properties.tasks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["open_mode"]) -> typing.Union[MetaOapg.properties.open_mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reserve_ports"]) -> typing.Union[MetaOapg.properties.reserve_ports, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overcommit"]) -> typing.Union[MetaOapg.properties.overcommit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partition"]) -> typing.Union[MetaOapg.properties.partition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["distribution_plane_size"]) -> typing.Union[MetaOapg.properties.distribution_plane_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["power_flags"]) -> typing.Union[MetaOapg.properties.power_flags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefer"]) -> typing.Union[MetaOapg.properties.prefer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> typing.Union[MetaOapg.properties.priority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profile"]) -> typing.Union[MetaOapg.properties.profile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qos"]) -> typing.Union[MetaOapg.properties.qos, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reboot"]) -> typing.Union[MetaOapg.properties.reboot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["required_nodes"]) -> typing.Union['V0039CsvList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requeue"]) -> typing.Union[MetaOapg.properties.requeue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reservation"]) -> typing.Union[MetaOapg.properties.reservation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["script"]) -> typing.Union[MetaOapg.properties.script, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shared"]) -> typing.Union[MetaOapg.properties.shared, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exclusive"]) -> typing.Union['V0039JobExclusive', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["site_factor"]) -> typing.Union[MetaOapg.properties.site_factor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spank_environment"]) -> typing.Union['V0039StringArray', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["distribution"]) -> typing.Union[MetaOapg.properties.distribution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_limit"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_minimum"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tres_bind"]) -> typing.Union[MetaOapg.properties.tres_bind, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tres_freq"]) -> typing.Union[MetaOapg.properties.tres_freq, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tres_per_job"]) -> typing.Union[MetaOapg.properties.tres_per_job, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tres_per_node"]) -> typing.Union[MetaOapg.properties.tres_per_node, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tres_per_socket"]) -> typing.Union[MetaOapg.properties.tres_per_socket, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tres_per_task"]) -> typing.Union[MetaOapg.properties.tres_per_task, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> typing.Union[MetaOapg.properties.user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wait_all_nodes"]) -> typing.Union[MetaOapg.properties.wait_all_nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kill_warning_flags"]) -> typing.Union[MetaOapg.properties.kill_warning_flags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kill_warning_signal"]) -> typing.Union[MetaOapg.properties.kill_warning_signal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kill_warning_delay"]) -> typing.Union['V0039Uint16NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_working_directory"]) -> typing.Union[MetaOapg.properties.current_working_directory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpus_per_task"]) -> typing.Union[MetaOapg.properties.cpus_per_task, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimum_cpus"]) -> typing.Union[MetaOapg.properties.minimum_cpus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maximum_cpus"]) -> typing.Union[MetaOapg.properties.maximum_cpus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodes"]) -> typing.Union[MetaOapg.properties.nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimum_nodes"]) -> typing.Union[MetaOapg.properties.minimum_nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maximum_nodes"]) -> typing.Union[MetaOapg.properties.maximum_nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimum_boards_per_node"]) -> typing.Union[MetaOapg.properties.minimum_boards_per_node, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimum_sockets_per_board"]) -> typing.Union[MetaOapg.properties.minimum_sockets_per_board, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sockets_per_node"]) -> typing.Union[MetaOapg.properties.sockets_per_node, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["threads_per_core"]) -> typing.Union[MetaOapg.properties.threads_per_core, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tasks_per_node"]) -> typing.Union[MetaOapg.properties.tasks_per_node, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tasks_per_socket"]) -> typing.Union[MetaOapg.properties.tasks_per_socket, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tasks_per_core"]) -> typing.Union[MetaOapg.properties.tasks_per_core, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tasks_per_board"]) -> typing.Union[MetaOapg.properties.tasks_per_board, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ntasks_per_tres"]) -> typing.Union[MetaOapg.properties.ntasks_per_tres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimum_cpus_per_node"]) -> typing.Union[MetaOapg.properties.minimum_cpus_per_node, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memory_per_cpu"]) -> typing.Union['V0039Uint64NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memory_per_node"]) -> typing.Union['V0039Uint64NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["temporary_disk_per_node"]) -> typing.Union[MetaOapg.properties.temporary_disk_per_node, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selinux_context"]) -> typing.Union[MetaOapg.properties.selinux_context, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["required_switches"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["standard_error"]) -> typing.Union[MetaOapg.properties.standard_error, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["standard_input"]) -> typing.Union[MetaOapg.properties.standard_input, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["standard_output"]) -> typing.Union[MetaOapg.properties.standard_output, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wait_for_switch"]) -> typing.Union[MetaOapg.properties.wait_for_switch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wckey"]) -> typing.Union[MetaOapg.properties.wckey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x11"]) -> typing.Union[MetaOapg.properties.x11, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x11_magic_cookie"]) -> typing.Union[MetaOapg.properties.x11_magic_cookie, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x11_target_host"]) -> typing.Union[MetaOapg.properties.x11_target_host, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x11_target_port"]) -> typing.Union[MetaOapg.properties.x11_target_port, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account", "account_gather_frequency", "admin_comment", "allocation_node_list", "allocation_node_port", "argv", "array", "batch_features", "begin_time", "flags", "burst_buffer", "clusters", "cluster_constraint", "comment", "contiguous", "container", "container_id", "core_specification", "thread_specification", "cpu_binding", "cpu_binding_flags", "cpu_frequency", "cpus_per_tres", "crontab", "deadline", "delay_boot", "dependency", "end_time", "environment", "excluded_nodes", "extra", "constraints", "group_id", "hetjob_group", "immediate", "job_id", "kill_on_node_fail", "licenses", "mail_type", "mail_user", "mcs_label", "memory_binding", "memory_binding_type", "memory_per_tres", "name", "network", "nice", "tasks", "open_mode", "reserve_ports", "overcommit", "partition", "distribution_plane_size", "power_flags", "prefer", "priority", "profile", "qos", "reboot", "required_nodes", "requeue", "reservation", "script", "shared", "exclusive", "site_factor", "spank_environment", "distribution", "time_limit", "time_minimum", "tres_bind", "tres_freq", "tres_per_job", "tres_per_node", "tres_per_socket", "tres_per_task", "user_id", "wait_all_nodes", "kill_warning_flags", "kill_warning_signal", "kill_warning_delay", "current_working_directory", "cpus_per_task", "minimum_cpus", "maximum_cpus", "nodes", "minimum_nodes", "maximum_nodes", "minimum_boards_per_node", "minimum_sockets_per_board", "sockets_per_node", "threads_per_core", "tasks_per_node", "tasks_per_socket", "tasks_per_core", "tasks_per_board", "ntasks_per_tres", "minimum_cpus_per_node", "memory_per_cpu", "memory_per_node", "temporary_disk_per_node", "selinux_context", "required_switches", "standard_error", "standard_input", "standard_output", "wait_for_switch", "wckey", "x11", "x11_magic_cookie", "x11_target_host", "x11_target_port", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        account: typing.Union[MetaOapg.properties.account, str, schemas.Unset] = schemas.unset,
        account_gather_frequency: typing.Union[MetaOapg.properties.account_gather_frequency, str, schemas.Unset] = schemas.unset,
        admin_comment: typing.Union[MetaOapg.properties.admin_comment, str, schemas.Unset] = schemas.unset,
        allocation_node_list: typing.Union[MetaOapg.properties.allocation_node_list, str, schemas.Unset] = schemas.unset,
        allocation_node_port: typing.Union[MetaOapg.properties.allocation_node_port, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        argv: typing.Union['V0039StringArray', schemas.Unset] = schemas.unset,
        array: typing.Union[MetaOapg.properties.array, str, schemas.Unset] = schemas.unset,
        batch_features: typing.Union[MetaOapg.properties.batch_features, str, schemas.Unset] = schemas.unset,
        begin_time: typing.Union[MetaOapg.properties.begin_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        flags: typing.Union[MetaOapg.properties.flags, list, tuple, schemas.Unset] = schemas.unset,
        burst_buffer: typing.Union[MetaOapg.properties.burst_buffer, str, schemas.Unset] = schemas.unset,
        clusters: typing.Union[MetaOapg.properties.clusters, str, schemas.Unset] = schemas.unset,
        cluster_constraint: typing.Union[MetaOapg.properties.cluster_constraint, str, schemas.Unset] = schemas.unset,
        comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
        contiguous: typing.Union[MetaOapg.properties.contiguous, bool, schemas.Unset] = schemas.unset,
        container: typing.Union[MetaOapg.properties.container, str, schemas.Unset] = schemas.unset,
        container_id: typing.Union[MetaOapg.properties.container_id, str, schemas.Unset] = schemas.unset,
        core_specification: typing.Union[MetaOapg.properties.core_specification, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        thread_specification: typing.Union[MetaOapg.properties.thread_specification, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cpu_binding: typing.Union[MetaOapg.properties.cpu_binding, str, schemas.Unset] = schemas.unset,
        cpu_binding_flags: typing.Union[MetaOapg.properties.cpu_binding_flags, list, tuple, schemas.Unset] = schemas.unset,
        cpu_frequency: typing.Union[MetaOapg.properties.cpu_frequency, str, schemas.Unset] = schemas.unset,
        cpus_per_tres: typing.Union[MetaOapg.properties.cpus_per_tres, str, schemas.Unset] = schemas.unset,
        crontab: typing.Union['V0039CronEntry', schemas.Unset] = schemas.unset,
        deadline: typing.Union[MetaOapg.properties.deadline, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        delay_boot: typing.Union[MetaOapg.properties.delay_boot, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        dependency: typing.Union[MetaOapg.properties.dependency, str, schemas.Unset] = schemas.unset,
        end_time: typing.Union[MetaOapg.properties.end_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        environment: typing.Union['V0039StringArray', schemas.Unset] = schemas.unset,
        excluded_nodes: typing.Union['V0039CsvList', schemas.Unset] = schemas.unset,
        extra: typing.Union[MetaOapg.properties.extra, str, schemas.Unset] = schemas.unset,
        constraints: typing.Union[MetaOapg.properties.constraints, str, schemas.Unset] = schemas.unset,
        group_id: typing.Union[MetaOapg.properties.group_id, str, schemas.Unset] = schemas.unset,
        hetjob_group: typing.Union[MetaOapg.properties.hetjob_group, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        immediate: typing.Union[MetaOapg.properties.immediate, bool, schemas.Unset] = schemas.unset,
        job_id: typing.Union[MetaOapg.properties.job_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        kill_on_node_fail: typing.Union[MetaOapg.properties.kill_on_node_fail, bool, schemas.Unset] = schemas.unset,
        licenses: typing.Union[MetaOapg.properties.licenses, str, schemas.Unset] = schemas.unset,
        mail_type: typing.Union[MetaOapg.properties.mail_type, list, tuple, schemas.Unset] = schemas.unset,
        mail_user: typing.Union[MetaOapg.properties.mail_user, str, schemas.Unset] = schemas.unset,
        mcs_label: typing.Union[MetaOapg.properties.mcs_label, str, schemas.Unset] = schemas.unset,
        memory_binding: typing.Union[MetaOapg.properties.memory_binding, str, schemas.Unset] = schemas.unset,
        memory_binding_type: typing.Union[MetaOapg.properties.memory_binding_type, list, tuple, schemas.Unset] = schemas.unset,
        memory_per_tres: typing.Union[MetaOapg.properties.memory_per_tres, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        network: typing.Union[MetaOapg.properties.network, str, schemas.Unset] = schemas.unset,
        nice: typing.Union[MetaOapg.properties.nice, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tasks: typing.Union[MetaOapg.properties.tasks, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        open_mode: typing.Union[MetaOapg.properties.open_mode, list, tuple, schemas.Unset] = schemas.unset,
        reserve_ports: typing.Union[MetaOapg.properties.reserve_ports, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        overcommit: typing.Union[MetaOapg.properties.overcommit, bool, schemas.Unset] = schemas.unset,
        partition: typing.Union[MetaOapg.properties.partition, str, schemas.Unset] = schemas.unset,
        distribution_plane_size: typing.Union[MetaOapg.properties.distribution_plane_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        power_flags: typing.Union[MetaOapg.properties.power_flags, list, tuple, schemas.Unset] = schemas.unset,
        prefer: typing.Union[MetaOapg.properties.prefer, str, schemas.Unset] = schemas.unset,
        priority: typing.Union[MetaOapg.properties.priority, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        profile: typing.Union[MetaOapg.properties.profile, list, tuple, schemas.Unset] = schemas.unset,
        qos: typing.Union[MetaOapg.properties.qos, str, schemas.Unset] = schemas.unset,
        reboot: typing.Union[MetaOapg.properties.reboot, bool, schemas.Unset] = schemas.unset,
        required_nodes: typing.Union['V0039CsvList', schemas.Unset] = schemas.unset,
        requeue: typing.Union[MetaOapg.properties.requeue, bool, schemas.Unset] = schemas.unset,
        reservation: typing.Union[MetaOapg.properties.reservation, str, schemas.Unset] = schemas.unset,
        script: typing.Union[MetaOapg.properties.script, str, schemas.Unset] = schemas.unset,
        shared: typing.Union[MetaOapg.properties.shared, list, tuple, schemas.Unset] = schemas.unset,
        exclusive: typing.Union['V0039JobExclusive', schemas.Unset] = schemas.unset,
        site_factor: typing.Union[MetaOapg.properties.site_factor, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        spank_environment: typing.Union['V0039StringArray', schemas.Unset] = schemas.unset,
        distribution: typing.Union[MetaOapg.properties.distribution, str, schemas.Unset] = schemas.unset,
        time_limit: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        time_minimum: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        tres_bind: typing.Union[MetaOapg.properties.tres_bind, str, schemas.Unset] = schemas.unset,
        tres_freq: typing.Union[MetaOapg.properties.tres_freq, str, schemas.Unset] = schemas.unset,
        tres_per_job: typing.Union[MetaOapg.properties.tres_per_job, str, schemas.Unset] = schemas.unset,
        tres_per_node: typing.Union[MetaOapg.properties.tres_per_node, str, schemas.Unset] = schemas.unset,
        tres_per_socket: typing.Union[MetaOapg.properties.tres_per_socket, str, schemas.Unset] = schemas.unset,
        tres_per_task: typing.Union[MetaOapg.properties.tres_per_task, str, schemas.Unset] = schemas.unset,
        user_id: typing.Union[MetaOapg.properties.user_id, str, schemas.Unset] = schemas.unset,
        wait_all_nodes: typing.Union[MetaOapg.properties.wait_all_nodes, bool, schemas.Unset] = schemas.unset,
        kill_warning_flags: typing.Union[MetaOapg.properties.kill_warning_flags, list, tuple, schemas.Unset] = schemas.unset,
        kill_warning_signal: typing.Union[MetaOapg.properties.kill_warning_signal, str, schemas.Unset] = schemas.unset,
        kill_warning_delay: typing.Union['V0039Uint16NoVal', schemas.Unset] = schemas.unset,
        current_working_directory: typing.Union[MetaOapg.properties.current_working_directory, str, schemas.Unset] = schemas.unset,
        cpus_per_task: typing.Union[MetaOapg.properties.cpus_per_task, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        minimum_cpus: typing.Union[MetaOapg.properties.minimum_cpus, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        maximum_cpus: typing.Union[MetaOapg.properties.maximum_cpus, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        nodes: typing.Union[MetaOapg.properties.nodes, str, schemas.Unset] = schemas.unset,
        minimum_nodes: typing.Union[MetaOapg.properties.minimum_nodes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        maximum_nodes: typing.Union[MetaOapg.properties.maximum_nodes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        minimum_boards_per_node: typing.Union[MetaOapg.properties.minimum_boards_per_node, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        minimum_sockets_per_board: typing.Union[MetaOapg.properties.minimum_sockets_per_board, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sockets_per_node: typing.Union[MetaOapg.properties.sockets_per_node, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        threads_per_core: typing.Union[MetaOapg.properties.threads_per_core, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tasks_per_node: typing.Union[MetaOapg.properties.tasks_per_node, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tasks_per_socket: typing.Union[MetaOapg.properties.tasks_per_socket, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tasks_per_core: typing.Union[MetaOapg.properties.tasks_per_core, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tasks_per_board: typing.Union[MetaOapg.properties.tasks_per_board, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ntasks_per_tres: typing.Union[MetaOapg.properties.ntasks_per_tres, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        minimum_cpus_per_node: typing.Union[MetaOapg.properties.minimum_cpus_per_node, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        memory_per_cpu: typing.Union['V0039Uint64NoVal', schemas.Unset] = schemas.unset,
        memory_per_node: typing.Union['V0039Uint64NoVal', schemas.Unset] = schemas.unset,
        temporary_disk_per_node: typing.Union[MetaOapg.properties.temporary_disk_per_node, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        selinux_context: typing.Union[MetaOapg.properties.selinux_context, str, schemas.Unset] = schemas.unset,
        required_switches: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        standard_error: typing.Union[MetaOapg.properties.standard_error, str, schemas.Unset] = schemas.unset,
        standard_input: typing.Union[MetaOapg.properties.standard_input, str, schemas.Unset] = schemas.unset,
        standard_output: typing.Union[MetaOapg.properties.standard_output, str, schemas.Unset] = schemas.unset,
        wait_for_switch: typing.Union[MetaOapg.properties.wait_for_switch, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        wckey: typing.Union[MetaOapg.properties.wckey, str, schemas.Unset] = schemas.unset,
        x11: typing.Union[MetaOapg.properties.x11, list, tuple, schemas.Unset] = schemas.unset,
        x11_magic_cookie: typing.Union[MetaOapg.properties.x11_magic_cookie, str, schemas.Unset] = schemas.unset,
        x11_target_host: typing.Union[MetaOapg.properties.x11_target_host, str, schemas.Unset] = schemas.unset,
        x11_target_port: typing.Union[MetaOapg.properties.x11_target_port, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V0039JobDescMsg':
        return super().__new__(
            cls,
            *_args,
            account=account,
            account_gather_frequency=account_gather_frequency,
            admin_comment=admin_comment,
            allocation_node_list=allocation_node_list,
            allocation_node_port=allocation_node_port,
            argv=argv,
            array=array,
            batch_features=batch_features,
            begin_time=begin_time,
            flags=flags,
            burst_buffer=burst_buffer,
            clusters=clusters,
            cluster_constraint=cluster_constraint,
            comment=comment,
            contiguous=contiguous,
            container=container,
            container_id=container_id,
            core_specification=core_specification,
            thread_specification=thread_specification,
            cpu_binding=cpu_binding,
            cpu_binding_flags=cpu_binding_flags,
            cpu_frequency=cpu_frequency,
            cpus_per_tres=cpus_per_tres,
            crontab=crontab,
            deadline=deadline,
            delay_boot=delay_boot,
            dependency=dependency,
            end_time=end_time,
            environment=environment,
            excluded_nodes=excluded_nodes,
            extra=extra,
            constraints=constraints,
            group_id=group_id,
            hetjob_group=hetjob_group,
            immediate=immediate,
            job_id=job_id,
            kill_on_node_fail=kill_on_node_fail,
            licenses=licenses,
            mail_type=mail_type,
            mail_user=mail_user,
            mcs_label=mcs_label,
            memory_binding=memory_binding,
            memory_binding_type=memory_binding_type,
            memory_per_tres=memory_per_tres,
            name=name,
            network=network,
            nice=nice,
            tasks=tasks,
            open_mode=open_mode,
            reserve_ports=reserve_ports,
            overcommit=overcommit,
            partition=partition,
            distribution_plane_size=distribution_plane_size,
            power_flags=power_flags,
            prefer=prefer,
            priority=priority,
            profile=profile,
            qos=qos,
            reboot=reboot,
            required_nodes=required_nodes,
            requeue=requeue,
            reservation=reservation,
            script=script,
            shared=shared,
            exclusive=exclusive,
            site_factor=site_factor,
            spank_environment=spank_environment,
            distribution=distribution,
            time_limit=time_limit,
            time_minimum=time_minimum,
            tres_bind=tres_bind,
            tres_freq=tres_freq,
            tres_per_job=tres_per_job,
            tres_per_node=tres_per_node,
            tres_per_socket=tres_per_socket,
            tres_per_task=tres_per_task,
            user_id=user_id,
            wait_all_nodes=wait_all_nodes,
            kill_warning_flags=kill_warning_flags,
            kill_warning_signal=kill_warning_signal,
            kill_warning_delay=kill_warning_delay,
            current_working_directory=current_working_directory,
            cpus_per_task=cpus_per_task,
            minimum_cpus=minimum_cpus,
            maximum_cpus=maximum_cpus,
            nodes=nodes,
            minimum_nodes=minimum_nodes,
            maximum_nodes=maximum_nodes,
            minimum_boards_per_node=minimum_boards_per_node,
            minimum_sockets_per_board=minimum_sockets_per_board,
            sockets_per_node=sockets_per_node,
            threads_per_core=threads_per_core,
            tasks_per_node=tasks_per_node,
            tasks_per_socket=tasks_per_socket,
            tasks_per_core=tasks_per_core,
            tasks_per_board=tasks_per_board,
            ntasks_per_tres=ntasks_per_tres,
            minimum_cpus_per_node=minimum_cpus_per_node,
            memory_per_cpu=memory_per_cpu,
            memory_per_node=memory_per_node,
            temporary_disk_per_node=temporary_disk_per_node,
            selinux_context=selinux_context,
            required_switches=required_switches,
            standard_error=standard_error,
            standard_input=standard_input,
            standard_output=standard_output,
            wait_for_switch=wait_for_switch,
            wckey=wckey,
            x11=x11,
            x11_magic_cookie=x11_magic_cookie,
            x11_target_host=x11_target_host,
            x11_target_port=x11_target_port,
            _configuration=_configuration,
            **kwargs,
        )

from slurmrestapi.model.v0039_cron_entry import V0039CronEntry
from slurmrestapi.model.v0039_csv_list import V0039CsvList
from slurmrestapi.model.v0039_job_exclusive import V0039JobExclusive
from slurmrestapi.model.v0039_string_array import V0039StringArray
from slurmrestapi.model.v0039_uint16_no_val import V0039Uint16NoVal
from slurmrestapi.model.v0039_uint32_no_val import V0039Uint32NoVal
from slurmrestapi.model.v0039_uint64_no_val import V0039Uint64NoVal
