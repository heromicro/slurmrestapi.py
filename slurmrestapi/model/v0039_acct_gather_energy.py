# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.39
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class V0039AcctGatherEnergy(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            average_watts = schemas.Int32Schema
            base_consumed_energy = schemas.Int64Schema
            consumed_energy = schemas.Int64Schema
            current_watts = schemas.Int32Schema
            previous_consumed_energy = schemas.Int64Schema
            last_collected = schemas.Int64Schema
            __annotations__ = {
                "average_watts": average_watts,
                "base_consumed_energy": base_consumed_energy,
                "consumed_energy": consumed_energy,
                "current_watts": current_watts,
                "previous_consumed_energy": previous_consumed_energy,
                "last_collected": last_collected,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["average_watts"]) -> MetaOapg.properties.average_watts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["base_consumed_energy"]) -> MetaOapg.properties.base_consumed_energy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consumed_energy"]) -> MetaOapg.properties.consumed_energy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_watts"]) -> MetaOapg.properties.current_watts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["previous_consumed_energy"]) -> MetaOapg.properties.previous_consumed_energy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_collected"]) -> MetaOapg.properties.last_collected: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["average_watts", "base_consumed_energy", "consumed_energy", "current_watts", "previous_consumed_energy", "last_collected", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["average_watts"]) -> typing.Union[MetaOapg.properties.average_watts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["base_consumed_energy"]) -> typing.Union[MetaOapg.properties.base_consumed_energy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consumed_energy"]) -> typing.Union[MetaOapg.properties.consumed_energy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_watts"]) -> typing.Union[MetaOapg.properties.current_watts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["previous_consumed_energy"]) -> typing.Union[MetaOapg.properties.previous_consumed_energy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_collected"]) -> typing.Union[MetaOapg.properties.last_collected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["average_watts", "base_consumed_energy", "consumed_energy", "current_watts", "previous_consumed_energy", "last_collected", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        average_watts: typing.Union[MetaOapg.properties.average_watts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        base_consumed_energy: typing.Union[MetaOapg.properties.base_consumed_energy, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        consumed_energy: typing.Union[MetaOapg.properties.consumed_energy, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        current_watts: typing.Union[MetaOapg.properties.current_watts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        previous_consumed_energy: typing.Union[MetaOapg.properties.previous_consumed_energy, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_collected: typing.Union[MetaOapg.properties.last_collected, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V0039AcctGatherEnergy':
        return super().__new__(
            cls,
            *_args,
            average_watts=average_watts,
            base_consumed_energy=base_consumed_energy,
            consumed_energy=consumed_energy,
            current_watts=current_watts,
            previous_consumed_energy=previous_consumed_energy,
            last_collected=last_collected,
            _configuration=_configuration,
            **kwargs,
        )
