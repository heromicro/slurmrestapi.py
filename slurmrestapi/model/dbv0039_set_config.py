# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.39
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class Dbv0039SetConfig(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def clusters() -> typing.Type['V0039ClusterRecList']:
                return V0039ClusterRecList
            
            
            class TRES(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V0039TresList']:
                        return V0039TresList
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['V0039TresList'], typing.List['V0039TresList']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'TRES':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V0039TresList':
                    return super().__getitem__(i)
        
            @staticmethod
            def accounts() -> typing.Type['V0039AccountList']:
                return V0039AccountList
        
            @staticmethod
            def users() -> typing.Type['V0039UserList']:
                return V0039UserList
        
            @staticmethod
            def qos() -> typing.Type['V0039QosList']:
                return V0039QosList
        
            @staticmethod
            def wckeys() -> typing.Type['V0039WckeyList']:
                return V0039WckeyList
        
            @staticmethod
            def associations() -> typing.Type['V0039AssocList']:
                return V0039AssocList
            __annotations__ = {
                "clusters": clusters,
                "TRES": TRES,
                "accounts": accounts,
                "users": users,
                "qos": qos,
                "wckeys": wckeys,
                "associations": associations,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clusters"]) -> 'V0039ClusterRecList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TRES"]) -> MetaOapg.properties.TRES: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accounts"]) -> 'V0039AccountList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["users"]) -> 'V0039UserList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qos"]) -> 'V0039QosList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wckeys"]) -> 'V0039WckeyList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["associations"]) -> 'V0039AssocList': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["clusters", "TRES", "accounts", "users", "qos", "wckeys", "associations", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clusters"]) -> typing.Union['V0039ClusterRecList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TRES"]) -> typing.Union[MetaOapg.properties.TRES, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accounts"]) -> typing.Union['V0039AccountList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["users"]) -> typing.Union['V0039UserList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qos"]) -> typing.Union['V0039QosList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wckeys"]) -> typing.Union['V0039WckeyList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["associations"]) -> typing.Union['V0039AssocList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["clusters", "TRES", "accounts", "users", "qos", "wckeys", "associations", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        clusters: typing.Union['V0039ClusterRecList', schemas.Unset] = schemas.unset,
        TRES: typing.Union[MetaOapg.properties.TRES, list, tuple, schemas.Unset] = schemas.unset,
        accounts: typing.Union['V0039AccountList', schemas.Unset] = schemas.unset,
        users: typing.Union['V0039UserList', schemas.Unset] = schemas.unset,
        qos: typing.Union['V0039QosList', schemas.Unset] = schemas.unset,
        wckeys: typing.Union['V0039WckeyList', schemas.Unset] = schemas.unset,
        associations: typing.Union['V0039AssocList', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Dbv0039SetConfig':
        return super().__new__(
            cls,
            *_args,
            clusters=clusters,
            TRES=TRES,
            accounts=accounts,
            users=users,
            qos=qos,
            wckeys=wckeys,
            associations=associations,
            _configuration=_configuration,
            **kwargs,
        )

from slurmrestapi.model.v0039_account_list import V0039AccountList
from slurmrestapi.model.v0039_assoc_list import V0039AssocList
from slurmrestapi.model.v0039_cluster_rec_list import V0039ClusterRecList
from slurmrestapi.model.v0039_qos_list import V0039QosList
from slurmrestapi.model.v0039_tres_list import V0039TresList
from slurmrestapi.model.v0039_user_list import V0039UserList
from slurmrestapi.model.v0039_wckey_list import V0039WckeyList
