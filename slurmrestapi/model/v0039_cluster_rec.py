# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.39
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class V0039ClusterRec(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class controller(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        port = schemas.Int32Schema
                        __annotations__ = {
                            "port": port,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["port"]) -> MetaOapg.properties.port: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["port", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["port"]) -> typing.Union[MetaOapg.properties.port, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["port", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    port: typing.Union[MetaOapg.properties.port, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'controller':
                    return super().__new__(
                        cls,
                        *_args,
                        port=port,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class flags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "REGISTERING": "REGISTERING",
                                "MULTIPLE_SLURMD": "MULTIPLE_SLURMD",
                                "FRONT_END": "FRONT_END",
                                "CRAY_NATIVE": "CRAY_NATIVE",
                                "FEDERATION": "FEDERATION",
                                "EXTERNAL": "EXTERNAL",
                            }
                        
                        @schemas.classproperty
                        def REGISTERING(cls):
                            return cls("REGISTERING")
                        
                        @schemas.classproperty
                        def MULTIPLE_SLURMD(cls):
                            return cls("MULTIPLE_SLURMD")
                        
                        @schemas.classproperty
                        def FRONT_END(cls):
                            return cls("FRONT_END")
                        
                        @schemas.classproperty
                        def CRAY_NATIVE(cls):
                            return cls("CRAY_NATIVE")
                        
                        @schemas.classproperty
                        def FEDERATION(cls):
                            return cls("FEDERATION")
                        
                        @schemas.classproperty
                        def EXTERNAL(cls):
                            return cls("EXTERNAL")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'flags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            name = schemas.StrSchema
            nodes = schemas.StrSchema
            select_plugin = schemas.StrSchema
            
            
            class associations(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                    
                        @staticmethod
                        def root() -> typing.Type['V0039AssocShort']:
                            return V0039AssocShort
                        __annotations__ = {
                            "root": root,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["root"]) -> 'V0039AssocShort': ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["root", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["root"]) -> typing.Union['V0039AssocShort', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["root", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    root: typing.Union['V0039AssocShort', schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'associations':
                    return super().__new__(
                        cls,
                        *_args,
                        root=root,
                        _configuration=_configuration,
                        **kwargs,
                    )
            rpc_version = schemas.Int32Schema
        
            @staticmethod
            def tres() -> typing.Type['V0039TresList']:
                return V0039TresList
            __annotations__ = {
                "controller": controller,
                "flags": flags,
                "name": name,
                "nodes": nodes,
                "select_plugin": select_plugin,
                "associations": associations,
                "rpc_version": rpc_version,
                "tres": tres,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["controller"]) -> MetaOapg.properties.controller: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flags"]) -> MetaOapg.properties.flags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodes"]) -> MetaOapg.properties.nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["select_plugin"]) -> MetaOapg.properties.select_plugin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["associations"]) -> MetaOapg.properties.associations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rpc_version"]) -> MetaOapg.properties.rpc_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tres"]) -> 'V0039TresList': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["controller", "flags", "name", "nodes", "select_plugin", "associations", "rpc_version", "tres", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["controller"]) -> typing.Union[MetaOapg.properties.controller, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flags"]) -> typing.Union[MetaOapg.properties.flags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodes"]) -> typing.Union[MetaOapg.properties.nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["select_plugin"]) -> typing.Union[MetaOapg.properties.select_plugin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["associations"]) -> typing.Union[MetaOapg.properties.associations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rpc_version"]) -> typing.Union[MetaOapg.properties.rpc_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tres"]) -> typing.Union['V0039TresList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["controller", "flags", "name", "nodes", "select_plugin", "associations", "rpc_version", "tres", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        controller: typing.Union[MetaOapg.properties.controller, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        flags: typing.Union[MetaOapg.properties.flags, list, tuple, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        nodes: typing.Union[MetaOapg.properties.nodes, str, schemas.Unset] = schemas.unset,
        select_plugin: typing.Union[MetaOapg.properties.select_plugin, str, schemas.Unset] = schemas.unset,
        associations: typing.Union[MetaOapg.properties.associations, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        rpc_version: typing.Union[MetaOapg.properties.rpc_version, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tres: typing.Union['V0039TresList', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V0039ClusterRec':
        return super().__new__(
            cls,
            *_args,
            controller=controller,
            flags=flags,
            name=name,
            nodes=nodes,
            select_plugin=select_plugin,
            associations=associations,
            rpc_version=rpc_version,
            tres=tres,
            _configuration=_configuration,
            **kwargs,
        )

from slurmrestapi.model.v0039_assoc_short import V0039AssocShort
from slurmrestapi.model.v0039_tres_list import V0039TresList
