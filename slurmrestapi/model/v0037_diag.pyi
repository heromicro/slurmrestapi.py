# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.37
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class V0037Diag(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class errors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V0037Error']:
                        return V0037Error
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['V0037Error'], typing.List['V0037Error']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'errors':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V0037Error':
                    return super().__getitem__(i)
            
            
            class statistics(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        parts_packed = schemas.IntSchema
                        req_time = schemas.IntSchema
                        req_time_start = schemas.IntSchema
                        server_thread_count = schemas.IntSchema
                        agent_queue_size = schemas.IntSchema
                        agent_count = schemas.IntSchema
                        agent_thread_count = schemas.IntSchema
                        dbd_agent_queue_size = schemas.IntSchema
                        gettimeofday_latency = schemas.IntSchema
                        schedule_cycle_max = schemas.IntSchema
                        schedule_cycle_last = schemas.IntSchema
                        schedule_cycle_total = schemas.IntSchema
                        schedule_cycle_mean = schemas.IntSchema
                        schedule_cycle_mean_depth = schemas.IntSchema
                        schedule_cycle_per_minute = schemas.IntSchema
                        schedule_queue_length = schemas.IntSchema
                        jobs_submitted = schemas.IntSchema
                        jobs_started = schemas.IntSchema
                        jobs_completed = schemas.IntSchema
                        jobs_canceled = schemas.IntSchema
                        jobs_failed = schemas.IntSchema
                        jobs_pending = schemas.IntSchema
                        jobs_running = schemas.IntSchema
                        job_states_ts = schemas.IntSchema
                        bf_backfilled_jobs = schemas.IntSchema
                        bf_last_backfilled_jobs = schemas.IntSchema
                        bf_backfilled_het_jobs = schemas.IntSchema
                        bf_cycle_counter = schemas.IntSchema
                        bf_cycle_mean = schemas.IntSchema
                        bf_cycle_max = schemas.IntSchema
                        bf_last_depth = schemas.IntSchema
                        bf_last_depth_try = schemas.IntSchema
                        bf_depth_mean = schemas.IntSchema
                        bf_depth_mean_try = schemas.IntSchema
                        bf_cycle_last = schemas.IntSchema
                        bf_queue_len = schemas.IntSchema
                        bf_queue_len_mean = schemas.IntSchema
                        bf_when_last_cycle = schemas.IntSchema
                        bf_active = schemas.BoolSchema
                        __annotations__ = {
                            "parts_packed": parts_packed,
                            "req_time": req_time,
                            "req_time_start": req_time_start,
                            "server_thread_count": server_thread_count,
                            "agent_queue_size": agent_queue_size,
                            "agent_count": agent_count,
                            "agent_thread_count": agent_thread_count,
                            "dbd_agent_queue_size": dbd_agent_queue_size,
                            "gettimeofday_latency": gettimeofday_latency,
                            "schedule_cycle_max": schedule_cycle_max,
                            "schedule_cycle_last": schedule_cycle_last,
                            "schedule_cycle_total": schedule_cycle_total,
                            "schedule_cycle_mean": schedule_cycle_mean,
                            "schedule_cycle_mean_depth": schedule_cycle_mean_depth,
                            "schedule_cycle_per_minute": schedule_cycle_per_minute,
                            "schedule_queue_length": schedule_queue_length,
                            "jobs_submitted": jobs_submitted,
                            "jobs_started": jobs_started,
                            "jobs_completed": jobs_completed,
                            "jobs_canceled": jobs_canceled,
                            "jobs_failed": jobs_failed,
                            "jobs_pending": jobs_pending,
                            "jobs_running": jobs_running,
                            "job_states_ts": job_states_ts,
                            "bf_backfilled_jobs": bf_backfilled_jobs,
                            "bf_last_backfilled_jobs": bf_last_backfilled_jobs,
                            "bf_backfilled_het_jobs": bf_backfilled_het_jobs,
                            "bf_cycle_counter": bf_cycle_counter,
                            "bf_cycle_mean": bf_cycle_mean,
                            "bf_cycle_max": bf_cycle_max,
                            "bf_last_depth": bf_last_depth,
                            "bf_last_depth_try": bf_last_depth_try,
                            "bf_depth_mean": bf_depth_mean,
                            "bf_depth_mean_try": bf_depth_mean_try,
                            "bf_cycle_last": bf_cycle_last,
                            "bf_queue_len": bf_queue_len,
                            "bf_queue_len_mean": bf_queue_len_mean,
                            "bf_when_last_cycle": bf_when_last_cycle,
                            "bf_active": bf_active,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["parts_packed"]) -> MetaOapg.properties.parts_packed: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["req_time"]) -> MetaOapg.properties.req_time: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["req_time_start"]) -> MetaOapg.properties.req_time_start: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["server_thread_count"]) -> MetaOapg.properties.server_thread_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["agent_queue_size"]) -> MetaOapg.properties.agent_queue_size: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["agent_count"]) -> MetaOapg.properties.agent_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["agent_thread_count"]) -> MetaOapg.properties.agent_thread_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dbd_agent_queue_size"]) -> MetaOapg.properties.dbd_agent_queue_size: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["gettimeofday_latency"]) -> MetaOapg.properties.gettimeofday_latency: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["schedule_cycle_max"]) -> MetaOapg.properties.schedule_cycle_max: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["schedule_cycle_last"]) -> MetaOapg.properties.schedule_cycle_last: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["schedule_cycle_total"]) -> MetaOapg.properties.schedule_cycle_total: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["schedule_cycle_mean"]) -> MetaOapg.properties.schedule_cycle_mean: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["schedule_cycle_mean_depth"]) -> MetaOapg.properties.schedule_cycle_mean_depth: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["schedule_cycle_per_minute"]) -> MetaOapg.properties.schedule_cycle_per_minute: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["schedule_queue_length"]) -> MetaOapg.properties.schedule_queue_length: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["jobs_submitted"]) -> MetaOapg.properties.jobs_submitted: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["jobs_started"]) -> MetaOapg.properties.jobs_started: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["jobs_completed"]) -> MetaOapg.properties.jobs_completed: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["jobs_canceled"]) -> MetaOapg.properties.jobs_canceled: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["jobs_failed"]) -> MetaOapg.properties.jobs_failed: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["jobs_pending"]) -> MetaOapg.properties.jobs_pending: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["jobs_running"]) -> MetaOapg.properties.jobs_running: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["job_states_ts"]) -> MetaOapg.properties.job_states_ts: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["bf_backfilled_jobs"]) -> MetaOapg.properties.bf_backfilled_jobs: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["bf_last_backfilled_jobs"]) -> MetaOapg.properties.bf_last_backfilled_jobs: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["bf_backfilled_het_jobs"]) -> MetaOapg.properties.bf_backfilled_het_jobs: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["bf_cycle_counter"]) -> MetaOapg.properties.bf_cycle_counter: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["bf_cycle_mean"]) -> MetaOapg.properties.bf_cycle_mean: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["bf_cycle_max"]) -> MetaOapg.properties.bf_cycle_max: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["bf_last_depth"]) -> MetaOapg.properties.bf_last_depth: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["bf_last_depth_try"]) -> MetaOapg.properties.bf_last_depth_try: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["bf_depth_mean"]) -> MetaOapg.properties.bf_depth_mean: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["bf_depth_mean_try"]) -> MetaOapg.properties.bf_depth_mean_try: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["bf_cycle_last"]) -> MetaOapg.properties.bf_cycle_last: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["bf_queue_len"]) -> MetaOapg.properties.bf_queue_len: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["bf_queue_len_mean"]) -> MetaOapg.properties.bf_queue_len_mean: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["bf_when_last_cycle"]) -> MetaOapg.properties.bf_when_last_cycle: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["bf_active"]) -> MetaOapg.properties.bf_active: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["parts_packed", "req_time", "req_time_start", "server_thread_count", "agent_queue_size", "agent_count", "agent_thread_count", "dbd_agent_queue_size", "gettimeofday_latency", "schedule_cycle_max", "schedule_cycle_last", "schedule_cycle_total", "schedule_cycle_mean", "schedule_cycle_mean_depth", "schedule_cycle_per_minute", "schedule_queue_length", "jobs_submitted", "jobs_started", "jobs_completed", "jobs_canceled", "jobs_failed", "jobs_pending", "jobs_running", "job_states_ts", "bf_backfilled_jobs", "bf_last_backfilled_jobs", "bf_backfilled_het_jobs", "bf_cycle_counter", "bf_cycle_mean", "bf_cycle_max", "bf_last_depth", "bf_last_depth_try", "bf_depth_mean", "bf_depth_mean_try", "bf_cycle_last", "bf_queue_len", "bf_queue_len_mean", "bf_when_last_cycle", "bf_active", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["parts_packed"]) -> typing.Union[MetaOapg.properties.parts_packed, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["req_time"]) -> typing.Union[MetaOapg.properties.req_time, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["req_time_start"]) -> typing.Union[MetaOapg.properties.req_time_start, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["server_thread_count"]) -> typing.Union[MetaOapg.properties.server_thread_count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["agent_queue_size"]) -> typing.Union[MetaOapg.properties.agent_queue_size, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["agent_count"]) -> typing.Union[MetaOapg.properties.agent_count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["agent_thread_count"]) -> typing.Union[MetaOapg.properties.agent_thread_count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dbd_agent_queue_size"]) -> typing.Union[MetaOapg.properties.dbd_agent_queue_size, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["gettimeofday_latency"]) -> typing.Union[MetaOapg.properties.gettimeofday_latency, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["schedule_cycle_max"]) -> typing.Union[MetaOapg.properties.schedule_cycle_max, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["schedule_cycle_last"]) -> typing.Union[MetaOapg.properties.schedule_cycle_last, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["schedule_cycle_total"]) -> typing.Union[MetaOapg.properties.schedule_cycle_total, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["schedule_cycle_mean"]) -> typing.Union[MetaOapg.properties.schedule_cycle_mean, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["schedule_cycle_mean_depth"]) -> typing.Union[MetaOapg.properties.schedule_cycle_mean_depth, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["schedule_cycle_per_minute"]) -> typing.Union[MetaOapg.properties.schedule_cycle_per_minute, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["schedule_queue_length"]) -> typing.Union[MetaOapg.properties.schedule_queue_length, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["jobs_submitted"]) -> typing.Union[MetaOapg.properties.jobs_submitted, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["jobs_started"]) -> typing.Union[MetaOapg.properties.jobs_started, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["jobs_completed"]) -> typing.Union[MetaOapg.properties.jobs_completed, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["jobs_canceled"]) -> typing.Union[MetaOapg.properties.jobs_canceled, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["jobs_failed"]) -> typing.Union[MetaOapg.properties.jobs_failed, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["jobs_pending"]) -> typing.Union[MetaOapg.properties.jobs_pending, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["jobs_running"]) -> typing.Union[MetaOapg.properties.jobs_running, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["job_states_ts"]) -> typing.Union[MetaOapg.properties.job_states_ts, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["bf_backfilled_jobs"]) -> typing.Union[MetaOapg.properties.bf_backfilled_jobs, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["bf_last_backfilled_jobs"]) -> typing.Union[MetaOapg.properties.bf_last_backfilled_jobs, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["bf_backfilled_het_jobs"]) -> typing.Union[MetaOapg.properties.bf_backfilled_het_jobs, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["bf_cycle_counter"]) -> typing.Union[MetaOapg.properties.bf_cycle_counter, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["bf_cycle_mean"]) -> typing.Union[MetaOapg.properties.bf_cycle_mean, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["bf_cycle_max"]) -> typing.Union[MetaOapg.properties.bf_cycle_max, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["bf_last_depth"]) -> typing.Union[MetaOapg.properties.bf_last_depth, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["bf_last_depth_try"]) -> typing.Union[MetaOapg.properties.bf_last_depth_try, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["bf_depth_mean"]) -> typing.Union[MetaOapg.properties.bf_depth_mean, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["bf_depth_mean_try"]) -> typing.Union[MetaOapg.properties.bf_depth_mean_try, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["bf_cycle_last"]) -> typing.Union[MetaOapg.properties.bf_cycle_last, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["bf_queue_len"]) -> typing.Union[MetaOapg.properties.bf_queue_len, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["bf_queue_len_mean"]) -> typing.Union[MetaOapg.properties.bf_queue_len_mean, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["bf_when_last_cycle"]) -> typing.Union[MetaOapg.properties.bf_when_last_cycle, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["bf_active"]) -> typing.Union[MetaOapg.properties.bf_active, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["parts_packed", "req_time", "req_time_start", "server_thread_count", "agent_queue_size", "agent_count", "agent_thread_count", "dbd_agent_queue_size", "gettimeofday_latency", "schedule_cycle_max", "schedule_cycle_last", "schedule_cycle_total", "schedule_cycle_mean", "schedule_cycle_mean_depth", "schedule_cycle_per_minute", "schedule_queue_length", "jobs_submitted", "jobs_started", "jobs_completed", "jobs_canceled", "jobs_failed", "jobs_pending", "jobs_running", "job_states_ts", "bf_backfilled_jobs", "bf_last_backfilled_jobs", "bf_backfilled_het_jobs", "bf_cycle_counter", "bf_cycle_mean", "bf_cycle_max", "bf_last_depth", "bf_last_depth_try", "bf_depth_mean", "bf_depth_mean_try", "bf_cycle_last", "bf_queue_len", "bf_queue_len_mean", "bf_when_last_cycle", "bf_active", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    parts_packed: typing.Union[MetaOapg.properties.parts_packed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    req_time: typing.Union[MetaOapg.properties.req_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    req_time_start: typing.Union[MetaOapg.properties.req_time_start, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    server_thread_count: typing.Union[MetaOapg.properties.server_thread_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    agent_queue_size: typing.Union[MetaOapg.properties.agent_queue_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    agent_count: typing.Union[MetaOapg.properties.agent_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    agent_thread_count: typing.Union[MetaOapg.properties.agent_thread_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    dbd_agent_queue_size: typing.Union[MetaOapg.properties.dbd_agent_queue_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    gettimeofday_latency: typing.Union[MetaOapg.properties.gettimeofday_latency, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    schedule_cycle_max: typing.Union[MetaOapg.properties.schedule_cycle_max, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    schedule_cycle_last: typing.Union[MetaOapg.properties.schedule_cycle_last, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    schedule_cycle_total: typing.Union[MetaOapg.properties.schedule_cycle_total, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    schedule_cycle_mean: typing.Union[MetaOapg.properties.schedule_cycle_mean, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    schedule_cycle_mean_depth: typing.Union[MetaOapg.properties.schedule_cycle_mean_depth, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    schedule_cycle_per_minute: typing.Union[MetaOapg.properties.schedule_cycle_per_minute, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    schedule_queue_length: typing.Union[MetaOapg.properties.schedule_queue_length, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    jobs_submitted: typing.Union[MetaOapg.properties.jobs_submitted, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    jobs_started: typing.Union[MetaOapg.properties.jobs_started, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    jobs_completed: typing.Union[MetaOapg.properties.jobs_completed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    jobs_canceled: typing.Union[MetaOapg.properties.jobs_canceled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    jobs_failed: typing.Union[MetaOapg.properties.jobs_failed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    jobs_pending: typing.Union[MetaOapg.properties.jobs_pending, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    jobs_running: typing.Union[MetaOapg.properties.jobs_running, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    job_states_ts: typing.Union[MetaOapg.properties.job_states_ts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    bf_backfilled_jobs: typing.Union[MetaOapg.properties.bf_backfilled_jobs, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    bf_last_backfilled_jobs: typing.Union[MetaOapg.properties.bf_last_backfilled_jobs, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    bf_backfilled_het_jobs: typing.Union[MetaOapg.properties.bf_backfilled_het_jobs, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    bf_cycle_counter: typing.Union[MetaOapg.properties.bf_cycle_counter, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    bf_cycle_mean: typing.Union[MetaOapg.properties.bf_cycle_mean, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    bf_cycle_max: typing.Union[MetaOapg.properties.bf_cycle_max, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    bf_last_depth: typing.Union[MetaOapg.properties.bf_last_depth, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    bf_last_depth_try: typing.Union[MetaOapg.properties.bf_last_depth_try, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    bf_depth_mean: typing.Union[MetaOapg.properties.bf_depth_mean, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    bf_depth_mean_try: typing.Union[MetaOapg.properties.bf_depth_mean_try, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    bf_cycle_last: typing.Union[MetaOapg.properties.bf_cycle_last, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    bf_queue_len: typing.Union[MetaOapg.properties.bf_queue_len, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    bf_queue_len_mean: typing.Union[MetaOapg.properties.bf_queue_len_mean, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    bf_when_last_cycle: typing.Union[MetaOapg.properties.bf_when_last_cycle, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    bf_active: typing.Union[MetaOapg.properties.bf_active, bool, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'statistics':
                    return super().__new__(
                        cls,
                        *_args,
                        parts_packed=parts_packed,
                        req_time=req_time,
                        req_time_start=req_time_start,
                        server_thread_count=server_thread_count,
                        agent_queue_size=agent_queue_size,
                        agent_count=agent_count,
                        agent_thread_count=agent_thread_count,
                        dbd_agent_queue_size=dbd_agent_queue_size,
                        gettimeofday_latency=gettimeofday_latency,
                        schedule_cycle_max=schedule_cycle_max,
                        schedule_cycle_last=schedule_cycle_last,
                        schedule_cycle_total=schedule_cycle_total,
                        schedule_cycle_mean=schedule_cycle_mean,
                        schedule_cycle_mean_depth=schedule_cycle_mean_depth,
                        schedule_cycle_per_minute=schedule_cycle_per_minute,
                        schedule_queue_length=schedule_queue_length,
                        jobs_submitted=jobs_submitted,
                        jobs_started=jobs_started,
                        jobs_completed=jobs_completed,
                        jobs_canceled=jobs_canceled,
                        jobs_failed=jobs_failed,
                        jobs_pending=jobs_pending,
                        jobs_running=jobs_running,
                        job_states_ts=job_states_ts,
                        bf_backfilled_jobs=bf_backfilled_jobs,
                        bf_last_backfilled_jobs=bf_last_backfilled_jobs,
                        bf_backfilled_het_jobs=bf_backfilled_het_jobs,
                        bf_cycle_counter=bf_cycle_counter,
                        bf_cycle_mean=bf_cycle_mean,
                        bf_cycle_max=bf_cycle_max,
                        bf_last_depth=bf_last_depth,
                        bf_last_depth_try=bf_last_depth_try,
                        bf_depth_mean=bf_depth_mean,
                        bf_depth_mean_try=bf_depth_mean_try,
                        bf_cycle_last=bf_cycle_last,
                        bf_queue_len=bf_queue_len,
                        bf_queue_len_mean=bf_queue_len_mean,
                        bf_when_last_cycle=bf_when_last_cycle,
                        bf_active=bf_active,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "errors": errors,
                "statistics": statistics,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errors"]) -> MetaOapg.properties.errors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statistics"]) -> MetaOapg.properties.statistics: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["errors", "statistics", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errors"]) -> typing.Union[MetaOapg.properties.errors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statistics"]) -> typing.Union[MetaOapg.properties.statistics, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["errors", "statistics", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        errors: typing.Union[MetaOapg.properties.errors, list, tuple, schemas.Unset] = schemas.unset,
        statistics: typing.Union[MetaOapg.properties.statistics, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V0037Diag':
        return super().__new__(
            cls,
            *_args,
            errors=errors,
            statistics=statistics,
            _configuration=_configuration,
            **kwargs,
        )

from slurmrestapi.model.v0037_error import V0037Error
