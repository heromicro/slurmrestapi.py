# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.37
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class Dbv0037Qos(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    QOS description
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            
            
            class flags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'flags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            id = schemas.StrSchema
            
            
            class limits(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        factor = schemas.NumberSchema
                        
                        
                        class max(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    
                                    
                                    class wall_clock(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                
                                                
                                                class per(
                                                    schemas.DictSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        
                                                        class properties:
                                                            qos = schemas.IntSchema
                                                            job = schemas.IntSchema
                                                            __annotations__ = {
                                                                "qos": qos,
                                                                "job": job,
                                                            }
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["qos"]) -> MetaOapg.properties.qos: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["job"]) -> MetaOapg.properties.job: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                    
                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["qos", "job", ], str]):
                                                        # dict_instance[name] accessor
                                                        return super().__getitem__(name)
                                                    
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["qos"]) -> typing.Union[MetaOapg.properties.qos, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["job"]) -> typing.Union[MetaOapg.properties.job, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                    
                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["qos", "job", ], str]):
                                                        return super().get_item_oapg(name)
                                                    
                                                
                                                    def __new__(
                                                        cls,
                                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                                        qos: typing.Union[MetaOapg.properties.qos, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                        job: typing.Union[MetaOapg.properties.job, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                    ) -> 'per':
                                                        return super().__new__(
                                                            cls,
                                                            *_args,
                                                            qos=qos,
                                                            job=job,
                                                            _configuration=_configuration,
                                                            **kwargs,
                                                        )
                                                __annotations__ = {
                                                    "per": per,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["per"]) -> MetaOapg.properties.per: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["per", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["per"]) -> typing.Union[MetaOapg.properties.per, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["per", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                            per: typing.Union[MetaOapg.properties.per, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'wall_clock':
                                            return super().__new__(
                                                cls,
                                                *_args,
                                                per=per,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    
                                    class jobs(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                
                                                
                                                class active_jobs(
                                                    schemas.DictSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        
                                                        class properties:
                                                            
                                                            
                                                            class per(
                                                                schemas.DictSchema
                                                            ):
                                                            
                                                            
                                                                class MetaOapg:
                                                                    
                                                                    class properties:
                                                                        account = schemas.IntSchema
                                                                        user = schemas.IntSchema
                                                                        __annotations__ = {
                                                                            "account": account,
                                                                            "user": user,
                                                                        }
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                
                                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["account", "user", ], str]):
                                                                    # dict_instance[name] accessor
                                                                    return super().__getitem__(name)
                                                                
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> typing.Union[MetaOapg.properties.account, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union[MetaOapg.properties.user, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                
                                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account", "user", ], str]):
                                                                    return super().get_item_oapg(name)
                                                                
                                                            
                                                                def __new__(
                                                                    cls,
                                                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                                                    account: typing.Union[MetaOapg.properties.account, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                                    user: typing.Union[MetaOapg.properties.user, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                ) -> 'per':
                                                                    return super().__new__(
                                                                        cls,
                                                                        *_args,
                                                                        account=account,
                                                                        user=user,
                                                                        _configuration=_configuration,
                                                                        **kwargs,
                                                                    )
                                                            __annotations__ = {
                                                                "per": per,
                                                            }
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["per"]) -> MetaOapg.properties.per: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                    
                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["per", ], str]):
                                                        # dict_instance[name] accessor
                                                        return super().__getitem__(name)
                                                    
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["per"]) -> typing.Union[MetaOapg.properties.per, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                    
                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["per", ], str]):
                                                        return super().get_item_oapg(name)
                                                    
                                                
                                                    def __new__(
                                                        cls,
                                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                                        per: typing.Union[MetaOapg.properties.per, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                    ) -> 'active_jobs':
                                                        return super().__new__(
                                                            cls,
                                                            *_args,
                                                            per=per,
                                                            _configuration=_configuration,
                                                            **kwargs,
                                                        )
                                                __annotations__ = {
                                                    "active_jobs": active_jobs,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["active_jobs"]) -> MetaOapg.properties.active_jobs: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["active_jobs", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["active_jobs"]) -> typing.Union[MetaOapg.properties.active_jobs, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["active_jobs", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                            active_jobs: typing.Union[MetaOapg.properties.active_jobs, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'jobs':
                                            return super().__new__(
                                                cls,
                                                *_args,
                                                active_jobs=active_jobs,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    
                                    class accruing(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                
                                                
                                                class per(
                                                    schemas.DictSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        
                                                        class properties:
                                                            account = schemas.IntSchema
                                                            user = schemas.IntSchema
                                                            __annotations__ = {
                                                                "account": account,
                                                                "user": user,
                                                            }
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                    
                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account", "user", ], str]):
                                                        # dict_instance[name] accessor
                                                        return super().__getitem__(name)
                                                    
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> typing.Union[MetaOapg.properties.account, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union[MetaOapg.properties.user, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                    
                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account", "user", ], str]):
                                                        return super().get_item_oapg(name)
                                                    
                                                
                                                    def __new__(
                                                        cls,
                                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                                        account: typing.Union[MetaOapg.properties.account, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                        user: typing.Union[MetaOapg.properties.user, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                    ) -> 'per':
                                                        return super().__new__(
                                                            cls,
                                                            *_args,
                                                            account=account,
                                                            user=user,
                                                            _configuration=_configuration,
                                                            **kwargs,
                                                        )
                                                __annotations__ = {
                                                    "per": per,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["per"]) -> MetaOapg.properties.per: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["per", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["per"]) -> typing.Union[MetaOapg.properties.per, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["per", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                            per: typing.Union[MetaOapg.properties.per, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'accruing':
                                            return super().__new__(
                                                cls,
                                                *_args,
                                                per=per,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    
                                    class tres(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                
                                                
                                                class minutes(
                                                    schemas.DictSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        
                                                        class properties:
                                                            
                                                            
                                                            class per(
                                                                schemas.DictSchema
                                                            ):
                                                            
                                                            
                                                                class MetaOapg:
                                                                    
                                                                    class properties:
                                                                    
                                                                        @staticmethod
                                                                        def job() -> typing.Type['Dbv0037TresList']:
                                                                            return Dbv0037TresList
                                                                    
                                                                        @staticmethod
                                                                        def account() -> typing.Type['Dbv0037TresList']:
                                                                            return Dbv0037TresList
                                                                    
                                                                        @staticmethod
                                                                        def user() -> typing.Type['Dbv0037TresList']:
                                                                            return Dbv0037TresList
                                                                        __annotations__ = {
                                                                            "job": job,
                                                                            "account": account,
                                                                            "user": user,
                                                                        }
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["job"]) -> 'Dbv0037TresList': ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["account"]) -> 'Dbv0037TresList': ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'Dbv0037TresList': ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                
                                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["job", "account", "user", ], str]):
                                                                    # dict_instance[name] accessor
                                                                    return super().__getitem__(name)
                                                                
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["job"]) -> typing.Union['Dbv0037TresList', schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> typing.Union['Dbv0037TresList', schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['Dbv0037TresList', schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                
                                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["job", "account", "user", ], str]):
                                                                    return super().get_item_oapg(name)
                                                                
                                                            
                                                                def __new__(
                                                                    cls,
                                                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                                                    job: typing.Union['Dbv0037TresList', schemas.Unset] = schemas.unset,
                                                                    account: typing.Union['Dbv0037TresList', schemas.Unset] = schemas.unset,
                                                                    user: typing.Union['Dbv0037TresList', schemas.Unset] = schemas.unset,
                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                ) -> 'per':
                                                                    return super().__new__(
                                                                        cls,
                                                                        *_args,
                                                                        job=job,
                                                                        account=account,
                                                                        user=user,
                                                                        _configuration=_configuration,
                                                                        **kwargs,
                                                                    )
                                                            __annotations__ = {
                                                                "per": per,
                                                            }
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["per"]) -> MetaOapg.properties.per: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                    
                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["per", ], str]):
                                                        # dict_instance[name] accessor
                                                        return super().__getitem__(name)
                                                    
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["per"]) -> typing.Union[MetaOapg.properties.per, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                    
                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["per", ], str]):
                                                        return super().get_item_oapg(name)
                                                    
                                                
                                                    def __new__(
                                                        cls,
                                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                                        per: typing.Union[MetaOapg.properties.per, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                    ) -> 'minutes':
                                                        return super().__new__(
                                                            cls,
                                                            *_args,
                                                            per=per,
                                                            _configuration=_configuration,
                                                            **kwargs,
                                                        )
                                                
                                                
                                                class per(
                                                    schemas.DictSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        
                                                        class properties:
                                                        
                                                            @staticmethod
                                                            def account() -> typing.Type['Dbv0037TresList']:
                                                                return Dbv0037TresList
                                                        
                                                            @staticmethod
                                                            def job() -> typing.Type['Dbv0037TresList']:
                                                                return Dbv0037TresList
                                                        
                                                            @staticmethod
                                                            def node() -> typing.Type['Dbv0037TresList']:
                                                                return Dbv0037TresList
                                                        
                                                            @staticmethod
                                                            def user() -> typing.Type['Dbv0037TresList']:
                                                                return Dbv0037TresList
                                                            __annotations__ = {
                                                                "account": account,
                                                                "job": job,
                                                                "node": node,
                                                                "user": user,
                                                            }
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["account"]) -> 'Dbv0037TresList': ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["job"]) -> 'Dbv0037TresList': ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["node"]) -> 'Dbv0037TresList': ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'Dbv0037TresList': ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                    
                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account", "job", "node", "user", ], str]):
                                                        # dict_instance[name] accessor
                                                        return super().__getitem__(name)
                                                    
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> typing.Union['Dbv0037TresList', schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["job"]) -> typing.Union['Dbv0037TresList', schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["node"]) -> typing.Union['Dbv0037TresList', schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['Dbv0037TresList', schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                    
                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account", "job", "node", "user", ], str]):
                                                        return super().get_item_oapg(name)
                                                    
                                                
                                                    def __new__(
                                                        cls,
                                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                                        account: typing.Union['Dbv0037TresList', schemas.Unset] = schemas.unset,
                                                        job: typing.Union['Dbv0037TresList', schemas.Unset] = schemas.unset,
                                                        node: typing.Union['Dbv0037TresList', schemas.Unset] = schemas.unset,
                                                        user: typing.Union['Dbv0037TresList', schemas.Unset] = schemas.unset,
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                    ) -> 'per':
                                                        return super().__new__(
                                                            cls,
                                                            *_args,
                                                            account=account,
                                                            job=job,
                                                            node=node,
                                                            user=user,
                                                            _configuration=_configuration,
                                                            **kwargs,
                                                        )
                                                __annotations__ = {
                                                    "minutes": minutes,
                                                    "per": per,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["minutes"]) -> MetaOapg.properties.minutes: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["per"]) -> MetaOapg.properties.per: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["minutes", "per", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["minutes"]) -> typing.Union[MetaOapg.properties.minutes, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["per"]) -> typing.Union[MetaOapg.properties.per, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["minutes", "per", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                            minutes: typing.Union[MetaOapg.properties.minutes, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                            per: typing.Union[MetaOapg.properties.per, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'tres':
                                            return super().__new__(
                                                cls,
                                                *_args,
                                                minutes=minutes,
                                                per=per,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    __annotations__ = {
                                        "wall_clock": wall_clock,
                                        "jobs": jobs,
                                        "accruing": accruing,
                                        "tres": tres,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["wall_clock"]) -> MetaOapg.properties.wall_clock: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["jobs"]) -> MetaOapg.properties.jobs: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["accruing"]) -> MetaOapg.properties.accruing: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["tres"]) -> MetaOapg.properties.tres: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["wall_clock", "jobs", "accruing", "tres", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["wall_clock"]) -> typing.Union[MetaOapg.properties.wall_clock, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["jobs"]) -> typing.Union[MetaOapg.properties.jobs, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["accruing"]) -> typing.Union[MetaOapg.properties.accruing, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["tres"]) -> typing.Union[MetaOapg.properties.tres, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["wall_clock", "jobs", "accruing", "tres", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                wall_clock: typing.Union[MetaOapg.properties.wall_clock, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                jobs: typing.Union[MetaOapg.properties.jobs, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                accruing: typing.Union[MetaOapg.properties.accruing, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                tres: typing.Union[MetaOapg.properties.tres, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'max':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    wall_clock=wall_clock,
                                    jobs=jobs,
                                    accruing=accruing,
                                    tres=tres,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class min(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    priority_threshold = schemas.IntSchema
                                    
                                    
                                    class tres(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                
                                                
                                                class per(
                                                    schemas.DictSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        
                                                        class properties:
                                                        
                                                            @staticmethod
                                                            def job() -> typing.Type['Dbv0037TresList']:
                                                                return Dbv0037TresList
                                                            __annotations__ = {
                                                                "job": job,
                                                            }
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["job"]) -> 'Dbv0037TresList': ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                    
                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["job", ], str]):
                                                        # dict_instance[name] accessor
                                                        return super().__getitem__(name)
                                                    
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["job"]) -> typing.Union['Dbv0037TresList', schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                    
                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["job", ], str]):
                                                        return super().get_item_oapg(name)
                                                    
                                                
                                                    def __new__(
                                                        cls,
                                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                                        job: typing.Union['Dbv0037TresList', schemas.Unset] = schemas.unset,
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                    ) -> 'per':
                                                        return super().__new__(
                                                            cls,
                                                            *_args,
                                                            job=job,
                                                            _configuration=_configuration,
                                                            **kwargs,
                                                        )
                                                __annotations__ = {
                                                    "per": per,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["per"]) -> MetaOapg.properties.per: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["per", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["per"]) -> typing.Union[MetaOapg.properties.per, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["per", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                            per: typing.Union[MetaOapg.properties.per, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'tres':
                                            return super().__new__(
                                                cls,
                                                *_args,
                                                per=per,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    __annotations__ = {
                                        "priority_threshold": priority_threshold,
                                        "tres": tres,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["priority_threshold"]) -> MetaOapg.properties.priority_threshold: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["tres"]) -> MetaOapg.properties.tres: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["priority_threshold", "tres", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["priority_threshold"]) -> typing.Union[MetaOapg.properties.priority_threshold, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["tres"]) -> typing.Union[MetaOapg.properties.tres, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["priority_threshold", "tres", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                priority_threshold: typing.Union[MetaOapg.properties.priority_threshold, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                tres: typing.Union[MetaOapg.properties.tres, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'min':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    priority_threshold=priority_threshold,
                                    tres=tres,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "factor": factor,
                            "max": max,
                            "min": min,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["factor"]) -> MetaOapg.properties.factor: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["max"]) -> MetaOapg.properties.max: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["min"]) -> MetaOapg.properties.min: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["factor", "max", "min", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["factor"]) -> typing.Union[MetaOapg.properties.factor, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["max"]) -> typing.Union[MetaOapg.properties.max, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["min"]) -> typing.Union[MetaOapg.properties.min, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["factor", "max", "min", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    factor: typing.Union[MetaOapg.properties.factor, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    max: typing.Union[MetaOapg.properties.max, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    min: typing.Union[MetaOapg.properties.min, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'limits':
                    return super().__new__(
                        cls,
                        *_args,
                        factor=factor,
                        max=max,
                        min=min,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class preempt(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class _list(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> '_list':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class mode(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'mode':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        exempt_time = schemas.IntSchema
                        __annotations__ = {
                            "list": _list,
                            "mode": mode,
                            "exempt_time": exempt_time,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["list"]) -> MetaOapg.properties._list: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["mode"]) -> MetaOapg.properties.mode: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["exempt_time"]) -> MetaOapg.properties.exempt_time: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["list", "mode", "exempt_time", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["list"]) -> typing.Union[MetaOapg.properties._list, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["mode"]) -> typing.Union[MetaOapg.properties.mode, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["exempt_time"]) -> typing.Union[MetaOapg.properties.exempt_time, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["list", "mode", "exempt_time", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    mode: typing.Union[MetaOapg.properties.mode, list, tuple, schemas.Unset] = schemas.unset,
                    exempt_time: typing.Union[MetaOapg.properties.exempt_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'preempt':
                    return super().__new__(
                        cls,
                        *_args,
                        mode=mode,
                        exempt_time=exempt_time,
                        _configuration=_configuration,
                        **kwargs,
                    )
            priority = schemas.IntSchema
            usage_factor = schemas.NumberSchema
            usage_threshold = schemas.NumberSchema
            __annotations__ = {
                "description": description,
                "flags": flags,
                "id": id,
                "limits": limits,
                "preempt": preempt,
                "priority": priority,
                "usage_factor": usage_factor,
                "usage_threshold": usage_threshold,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flags"]) -> MetaOapg.properties.flags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limits"]) -> MetaOapg.properties.limits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preempt"]) -> MetaOapg.properties.preempt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usage_factor"]) -> MetaOapg.properties.usage_factor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usage_threshold"]) -> MetaOapg.properties.usage_threshold: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "flags", "id", "limits", "preempt", "priority", "usage_factor", "usage_threshold", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flags"]) -> typing.Union[MetaOapg.properties.flags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limits"]) -> typing.Union[MetaOapg.properties.limits, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preempt"]) -> typing.Union[MetaOapg.properties.preempt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> typing.Union[MetaOapg.properties.priority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usage_factor"]) -> typing.Union[MetaOapg.properties.usage_factor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usage_threshold"]) -> typing.Union[MetaOapg.properties.usage_threshold, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "flags", "id", "limits", "preempt", "priority", "usage_factor", "usage_threshold", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        flags: typing.Union[MetaOapg.properties.flags, list, tuple, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        limits: typing.Union[MetaOapg.properties.limits, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        preempt: typing.Union[MetaOapg.properties.preempt, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        priority: typing.Union[MetaOapg.properties.priority, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        usage_factor: typing.Union[MetaOapg.properties.usage_factor, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usage_threshold: typing.Union[MetaOapg.properties.usage_threshold, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Dbv0037Qos':
        return super().__new__(
            cls,
            *_args,
            description=description,
            flags=flags,
            id=id,
            limits=limits,
            preempt=preempt,
            priority=priority,
            usage_factor=usage_factor,
            usage_threshold=usage_threshold,
            _configuration=_configuration,
            **kwargs,
        )

from slurmrestapi.model.dbv0037_tres_list import Dbv0037TresList
