# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.39
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class V0039JobInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            account = schemas.StrSchema
            accrue_time = schemas.Int64Schema
            admin_comment = schemas.StrSchema
            allocating_node = schemas.StrSchema
        
            @staticmethod
            def array_job_id() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
        
            @staticmethod
            def array_task_id() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
        
            @staticmethod
            def array_max_tasks() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
            array_task_string = schemas.StrSchema
            association_id = schemas.Int32Schema
            batch_features = schemas.StrSchema
            batch_flag = schemas.BoolSchema
            batch_host = schemas.StrSchema
            
            
            class flags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def KILL_INVALID_DEPENDENCY(cls):
                            return cls("KILL_INVALID_DEPENDENCY")
                        
                        @schemas.classproperty
                        def NO_KILL_INVALID_DEPENDENCY(cls):
                            return cls("NO_KILL_INVALID_DEPENDENCY")
                        
                        @schemas.classproperty
                        def HAS_STATE_DIRECTORY(cls):
                            return cls("HAS_STATE_DIRECTORY")
                        
                        @schemas.classproperty
                        def TESTING_BACKFILL(cls):
                            return cls("TESTING_BACKFILL")
                        
                        @schemas.classproperty
                        def GRES_BINDING_ENFORCED(cls):
                            return cls("GRES_BINDING_ENFORCED")
                        
                        @schemas.classproperty
                        def TEST_NOW_ONLY(cls):
                            return cls("TEST_NOW_ONLY")
                        
                        @schemas.classproperty
                        def SEND_JOB_ENVIRONMENT(cls):
                            return cls("SEND_JOB_ENVIRONMENT")
                        
                        @schemas.classproperty
                        def SPREAD_JOB(cls):
                            return cls("SPREAD_JOB")
                        
                        @schemas.classproperty
                        def PREFER_MINIMUM_NODE_COUNT(cls):
                            return cls("PREFER_MINIMUM_NODE_COUNT")
                        
                        @schemas.classproperty
                        def JOB_KILL_HURRY(cls):
                            return cls("JOB_KILL_HURRY")
                        
                        @schemas.classproperty
                        def SKIP_TRES_STRING_ACCOUNTING(cls):
                            return cls("SKIP_TRES_STRING_ACCOUNTING")
                        
                        @schemas.classproperty
                        def SIBLING_CLUSTER_UPDATE_ONLY(cls):
                            return cls("SIBLING_CLUSTER_UPDATE_ONLY")
                        
                        @schemas.classproperty
                        def HETEROGENEOUS_JOB(cls):
                            return cls("HETEROGENEOUS_JOB")
                        
                        @schemas.classproperty
                        def EXACT_TASK_COUNT_REQUESTED(cls):
                            return cls("EXACT_TASK_COUNT_REQUESTED")
                        
                        @schemas.classproperty
                        def EXACT_CPU_COUNT_REQUESTED(cls):
                            return cls("EXACT_CPU_COUNT_REQUESTED")
                        
                        @schemas.classproperty
                        def TESTING_WHOLE_NODE_BACKFILL(cls):
                            return cls("TESTING_WHOLE_NODE_BACKFILL")
                        
                        @schemas.classproperty
                        def TOP_PRIORITY_JOB(cls):
                            return cls("TOP_PRIORITY_JOB")
                        
                        @schemas.classproperty
                        def ACCRUE_COUNT_CLEARED(cls):
                            return cls("ACCRUE_COUNT_CLEARED")
                        
                        @schemas.classproperty
                        def GRED_BINDING_DISABLED(cls):
                            return cls("GRED_BINDING_DISABLED")
                        
                        @schemas.classproperty
                        def JOB_WAS_RUNNING(cls):
                            return cls("JOB_WAS_RUNNING")
                        
                        @schemas.classproperty
                        def JOB_ACCRUE_TIME_RESET(cls):
                            return cls("JOB_ACCRUE_TIME_RESET")
                        
                        @schemas.classproperty
                        def CRON_JOB(cls):
                            return cls("CRON_JOB")
                        
                        @schemas.classproperty
                        def EXACT_MEMORY_REQUESTED(cls):
                            return cls("EXACT_MEMORY_REQUESTED")
                        
                        @schemas.classproperty
                        def JOB_RESIZED(cls):
                            return cls("JOB_RESIZED")
                        
                        @schemas.classproperty
                        def USING_DEFAULT_ACCOUNT(cls):
                            return cls("USING_DEFAULT_ACCOUNT")
                        
                        @schemas.classproperty
                        def USING_DEFAULT_PARTITION(cls):
                            return cls("USING_DEFAULT_PARTITION")
                        
                        @schemas.classproperty
                        def USING_DEFAULT_QOS(cls):
                            return cls("USING_DEFAULT_QOS")
                        
                        @schemas.classproperty
                        def USING_DEFAULT_WCKEY(cls):
                            return cls("USING_DEFAULT_WCKEY")
                        
                        @schemas.classproperty
                        def DEPENDENT(cls):
                            return cls("DEPENDENT")
                        
                        @schemas.classproperty
                        def MAGNETIC(cls):
                            return cls("MAGNETIC")
                        
                        @schemas.classproperty
                        def PARTITION_ASSIGNED(cls):
                            return cls("PARTITION_ASSIGNED")
                        
                        @schemas.classproperty
                        def BACKFILL_ATTEMPTED(cls):
                            return cls("BACKFILL_ATTEMPTED")
                        
                        @schemas.classproperty
                        def SCHEDULING_ATTEMPTED(cls):
                            return cls("SCHEDULING_ATTEMPTED")
                        
                        @schemas.classproperty
                        def SAVE_BATCH_SCRIPT(cls):
                            return cls("SAVE_BATCH_SCRIPT")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'flags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            burst_buffer = schemas.StrSchema
            burst_buffer_state = schemas.StrSchema
            cluster = schemas.StrSchema
            cluster_features = schemas.StrSchema
            command = schemas.StrSchema
            comment = schemas.StrSchema
            container = schemas.StrSchema
            container_id = schemas.StrSchema
            contiguous = schemas.BoolSchema
            core_spec = schemas.Int32Schema
            thread_spec = schemas.Int32Schema
        
            @staticmethod
            def cores_per_socket() -> typing.Type['V0039Uint16NoVal']:
                return V0039Uint16NoVal
        
            @staticmethod
            def billable_tres() -> typing.Type['V0039Float64NoVal']:
                return V0039Float64NoVal
        
            @staticmethod
            def cpus_per_task() -> typing.Type['V0039Uint16NoVal']:
                return V0039Uint16NoVal
        
            @staticmethod
            def cpu_frequency_minimum() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
        
            @staticmethod
            def cpu_frequency_maximum() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
        
            @staticmethod
            def cpu_frequency_governor() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
            cpus_per_tres = schemas.StrSchema
            cron = schemas.StrSchema
            deadline = schemas.Int64Schema
        
            @staticmethod
            def delay_boot() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
            dependency = schemas.StrSchema
            derived_exit_code = schemas.Int32Schema
            eligible_time = schemas.Int64Schema
            end_time = schemas.Int64Schema
            excluded_nodes = schemas.StrSchema
            exit_code = schemas.Int32Schema
            extra = schemas.StrSchema
            failed_node = schemas.StrSchema
            features = schemas.StrSchema
            federation_origin = schemas.StrSchema
            federation_siblings_active = schemas.StrSchema
            federation_siblings_viable = schemas.StrSchema
        
            @staticmethod
            def gres_detail() -> typing.Type['V0039JobInfoGresDetail']:
                return V0039JobInfoGresDetail
            group_id = schemas.Int32Schema
            group_name = schemas.StrSchema
        
            @staticmethod
            def het_job_id() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
            het_job_id_set = schemas.StrSchema
        
            @staticmethod
            def het_job_offset() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
            job_id = schemas.Int32Schema
        
            @staticmethod
            def job_resources() -> typing.Type['V0039JobRes']:
                return V0039JobRes
        
            @staticmethod
            def job_size_str() -> typing.Type['V0039CsvList']:
                return V0039CsvList
            job_state = schemas.StrSchema
            last_sched_evaluation = schemas.Int64Schema
            licenses = schemas.StrSchema
            
            
            class mail_type(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def BEGIN(cls):
                            return cls("BEGIN")
                        
                        @schemas.classproperty
                        def END(cls):
                            return cls("END")
                        
                        @schemas.classproperty
                        def FAIL(cls):
                            return cls("FAIL")
                        
                        @schemas.classproperty
                        def REQUEUE(cls):
                            return cls("REQUEUE")
                        
                        @schemas.classproperty
                        def TIME100(cls):
                            return cls("TIME=100%")
                        
                        @schemas.classproperty
                        def TIME90(cls):
                            return cls("TIME=90%")
                        
                        @schemas.classproperty
                        def TIME80(cls):
                            return cls("TIME=80%")
                        
                        @schemas.classproperty
                        def TIME50(cls):
                            return cls("TIME=50%")
                        
                        @schemas.classproperty
                        def STAGE_OUT(cls):
                            return cls("STAGE_OUT")
                        
                        @schemas.classproperty
                        def ARRAY_TASKS(cls):
                            return cls("ARRAY_TASKS")
                        
                        @schemas.classproperty
                        def INVALID_DEPENDENCY(cls):
                            return cls("INVALID_DEPENDENCY")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mail_type':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            mail_user = schemas.StrSchema
        
            @staticmethod
            def max_cpus() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
        
            @staticmethod
            def max_nodes() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
            mcs_label = schemas.StrSchema
            memory_per_tres = schemas.StrSchema
            name = schemas.StrSchema
            network = schemas.StrSchema
            nodes = schemas.StrSchema
            nice = schemas.Int32Schema
        
            @staticmethod
            def tasks_per_core() -> typing.Type['V0039Uint16NoVal']:
                return V0039Uint16NoVal
        
            @staticmethod
            def tasks_per_tres() -> typing.Type['V0039Uint16NoVal']:
                return V0039Uint16NoVal
        
            @staticmethod
            def tasks_per_node() -> typing.Type['V0039Uint16NoVal']:
                return V0039Uint16NoVal
        
            @staticmethod
            def tasks_per_socket() -> typing.Type['V0039Uint16NoVal']:
                return V0039Uint16NoVal
        
            @staticmethod
            def tasks_per_board() -> typing.Type['V0039Uint16NoVal']:
                return V0039Uint16NoVal
        
            @staticmethod
            def cpus() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
        
            @staticmethod
            def node_count() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
        
            @staticmethod
            def tasks() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
            partition = schemas.StrSchema
            prefer = schemas.StrSchema
        
            @staticmethod
            def memory_per_cpu() -> typing.Type['V0039Uint64NoVal']:
                return V0039Uint64NoVal
        
            @staticmethod
            def memory_per_node() -> typing.Type['V0039Uint64NoVal']:
                return V0039Uint64NoVal
        
            @staticmethod
            def minimum_cpus_per_node() -> typing.Type['V0039Uint16NoVal']:
                return V0039Uint16NoVal
        
            @staticmethod
            def minimum_tmp_disk_per_node() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
            
            
            class power(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class flags(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.EnumBase,
                                    schemas.StrSchema
                                ):
                                    
                                    @schemas.classproperty
                                    def EQUAL_POWER(cls):
                                        return cls("EQUAL_POWER")
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'flags':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "flags": flags,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["flags"]) -> MetaOapg.properties.flags: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["flags", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["flags"]) -> typing.Union[MetaOapg.properties.flags, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["flags", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    flags: typing.Union[MetaOapg.properties.flags, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'power':
                    return super().__new__(
                        cls,
                        *_args,
                        flags=flags,
                        _configuration=_configuration,
                        **kwargs,
                    )
            preempt_time = schemas.Int64Schema
            preemptable_time = schemas.Int64Schema
            pre_sus_time = schemas.Int64Schema
        
            @staticmethod
            def priority() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
            
            
            class profile(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def NOT_SET(cls):
                            return cls("NOT_SET")
                        
                        @schemas.classproperty
                        def NONE(cls):
                            return cls("NONE")
                        
                        @schemas.classproperty
                        def ENERGY(cls):
                            return cls("ENERGY")
                        
                        @schemas.classproperty
                        def LUSTRE(cls):
                            return cls("LUSTRE")
                        
                        @schemas.classproperty
                        def NETWORK(cls):
                            return cls("NETWORK")
                        
                        @schemas.classproperty
                        def TASK(cls):
                            return cls("TASK")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'profile':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            qos = schemas.StrSchema
            reboot = schemas.BoolSchema
            required_nodes = schemas.StrSchema
            minimum_switches = schemas.Int32Schema
            requeue = schemas.BoolSchema
            resize_time = schemas.Int64Schema
            restart_cnt = schemas.Int32Schema
            resv_name = schemas.StrSchema
            scheduled_nodes = schemas.StrSchema
            selinux_context = schemas.StrSchema
            
            
            class shared(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def NONE(cls):
                            return cls("none")
                        
                        @schemas.classproperty
                        def OVERSUBSCRIBE(cls):
                            return cls("oversubscribe")
                        
                        @schemas.classproperty
                        def USER(cls):
                            return cls("user")
                        
                        @schemas.classproperty
                        def MCS(cls):
                            return cls("mcs")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'shared':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def exclusive() -> typing.Type['V0039JobExclusive']:
                return V0039JobExclusive
            
            
            class show_flags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def ALL(cls):
                            return cls("ALL")
                        
                        @schemas.classproperty
                        def DETAIL(cls):
                            return cls("DETAIL")
                        
                        @schemas.classproperty
                        def MIXED(cls):
                            return cls("MIXED")
                        
                        @schemas.classproperty
                        def LOCAL(cls):
                            return cls("LOCAL")
                        
                        @schemas.classproperty
                        def SIBLING(cls):
                            return cls("SIBLING")
                        
                        @schemas.classproperty
                        def FEDERATION(cls):
                            return cls("FEDERATION")
                        
                        @schemas.classproperty
                        def FUTURE(cls):
                            return cls("FUTURE")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'show_flags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            sockets_per_board = schemas.Int32Schema
        
            @staticmethod
            def sockets_per_node() -> typing.Type['V0039Uint16NoVal']:
                return V0039Uint16NoVal
            start_time = schemas.Int64Schema
            state_description = schemas.StrSchema
            state_reason = schemas.StrSchema
            standard_error = schemas.StrSchema
            standard_input = schemas.StrSchema
            standard_output = schemas.StrSchema
            submit_time = schemas.Int64Schema
            suspend_time = schemas.Int64Schema
            system_comment = schemas.StrSchema
        
            @staticmethod
            def time_limit() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
        
            @staticmethod
            def time_minimum() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
        
            @staticmethod
            def threads_per_core() -> typing.Type['V0039Uint16NoVal']:
                return V0039Uint16NoVal
            tres_bind = schemas.StrSchema
            tres_freq = schemas.StrSchema
            tres_per_job = schemas.StrSchema
            tres_per_node = schemas.StrSchema
            tres_per_socket = schemas.StrSchema
            tres_per_task = schemas.StrSchema
            tres_req_str = schemas.StrSchema
            tres_alloc_str = schemas.StrSchema
            user_id = schemas.Int32Schema
            user_name = schemas.StrSchema
            maximum_switch_wait_time = schemas.Int32Schema
            wckey = schemas.StrSchema
            current_working_directory = schemas.StrSchema
            __annotations__ = {
                "account": account,
                "accrue_time": accrue_time,
                "admin_comment": admin_comment,
                "allocating_node": allocating_node,
                "array_job_id": array_job_id,
                "array_task_id": array_task_id,
                "array_max_tasks": array_max_tasks,
                "array_task_string": array_task_string,
                "association_id": association_id,
                "batch_features": batch_features,
                "batch_flag": batch_flag,
                "batch_host": batch_host,
                "flags": flags,
                "burst_buffer": burst_buffer,
                "burst_buffer_state": burst_buffer_state,
                "cluster": cluster,
                "cluster_features": cluster_features,
                "command": command,
                "comment": comment,
                "container": container,
                "container_id": container_id,
                "contiguous": contiguous,
                "core_spec": core_spec,
                "thread_spec": thread_spec,
                "cores_per_socket": cores_per_socket,
                "billable_tres": billable_tres,
                "cpus_per_task": cpus_per_task,
                "cpu_frequency_minimum": cpu_frequency_minimum,
                "cpu_frequency_maximum": cpu_frequency_maximum,
                "cpu_frequency_governor": cpu_frequency_governor,
                "cpus_per_tres": cpus_per_tres,
                "cron": cron,
                "deadline": deadline,
                "delay_boot": delay_boot,
                "dependency": dependency,
                "derived_exit_code": derived_exit_code,
                "eligible_time": eligible_time,
                "end_time": end_time,
                "excluded_nodes": excluded_nodes,
                "exit_code": exit_code,
                "extra": extra,
                "failed_node": failed_node,
                "features": features,
                "federation_origin": federation_origin,
                "federation_siblings_active": federation_siblings_active,
                "federation_siblings_viable": federation_siblings_viable,
                "gres_detail": gres_detail,
                "group_id": group_id,
                "group_name": group_name,
                "het_job_id": het_job_id,
                "het_job_id_set": het_job_id_set,
                "het_job_offset": het_job_offset,
                "job_id": job_id,
                "job_resources": job_resources,
                "job_size_str": job_size_str,
                "job_state": job_state,
                "last_sched_evaluation": last_sched_evaluation,
                "licenses": licenses,
                "mail_type": mail_type,
                "mail_user": mail_user,
                "max_cpus": max_cpus,
                "max_nodes": max_nodes,
                "mcs_label": mcs_label,
                "memory_per_tres": memory_per_tres,
                "name": name,
                "network": network,
                "nodes": nodes,
                "nice": nice,
                "tasks_per_core": tasks_per_core,
                "tasks_per_tres": tasks_per_tres,
                "tasks_per_node": tasks_per_node,
                "tasks_per_socket": tasks_per_socket,
                "tasks_per_board": tasks_per_board,
                "cpus": cpus,
                "node_count": node_count,
                "tasks": tasks,
                "partition": partition,
                "prefer": prefer,
                "memory_per_cpu": memory_per_cpu,
                "memory_per_node": memory_per_node,
                "minimum_cpus_per_node": minimum_cpus_per_node,
                "minimum_tmp_disk_per_node": minimum_tmp_disk_per_node,
                "power": power,
                "preempt_time": preempt_time,
                "preemptable_time": preemptable_time,
                "pre_sus_time": pre_sus_time,
                "priority": priority,
                "profile": profile,
                "qos": qos,
                "reboot": reboot,
                "required_nodes": required_nodes,
                "minimum_switches": minimum_switches,
                "requeue": requeue,
                "resize_time": resize_time,
                "restart_cnt": restart_cnt,
                "resv_name": resv_name,
                "scheduled_nodes": scheduled_nodes,
                "selinux_context": selinux_context,
                "shared": shared,
                "exclusive": exclusive,
                "show_flags": show_flags,
                "sockets_per_board": sockets_per_board,
                "sockets_per_node": sockets_per_node,
                "start_time": start_time,
                "state_description": state_description,
                "state_reason": state_reason,
                "standard_error": standard_error,
                "standard_input": standard_input,
                "standard_output": standard_output,
                "submit_time": submit_time,
                "suspend_time": suspend_time,
                "system_comment": system_comment,
                "time_limit": time_limit,
                "time_minimum": time_minimum,
                "threads_per_core": threads_per_core,
                "tres_bind": tres_bind,
                "tres_freq": tres_freq,
                "tres_per_job": tres_per_job,
                "tres_per_node": tres_per_node,
                "tres_per_socket": tres_per_socket,
                "tres_per_task": tres_per_task,
                "tres_req_str": tres_req_str,
                "tres_alloc_str": tres_alloc_str,
                "user_id": user_id,
                "user_name": user_name,
                "maximum_switch_wait_time": maximum_switch_wait_time,
                "wckey": wckey,
                "current_working_directory": current_working_directory,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrue_time"]) -> MetaOapg.properties.accrue_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["admin_comment"]) -> MetaOapg.properties.admin_comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allocating_node"]) -> MetaOapg.properties.allocating_node: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["array_job_id"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["array_task_id"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["array_max_tasks"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["array_task_string"]) -> MetaOapg.properties.array_task_string: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["association_id"]) -> MetaOapg.properties.association_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["batch_features"]) -> MetaOapg.properties.batch_features: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["batch_flag"]) -> MetaOapg.properties.batch_flag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["batch_host"]) -> MetaOapg.properties.batch_host: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flags"]) -> MetaOapg.properties.flags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["burst_buffer"]) -> MetaOapg.properties.burst_buffer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["burst_buffer_state"]) -> MetaOapg.properties.burst_buffer_state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cluster"]) -> MetaOapg.properties.cluster: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cluster_features"]) -> MetaOapg.properties.cluster_features: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["command"]) -> MetaOapg.properties.command: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["container"]) -> MetaOapg.properties.container: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["container_id"]) -> MetaOapg.properties.container_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contiguous"]) -> MetaOapg.properties.contiguous: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["core_spec"]) -> MetaOapg.properties.core_spec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thread_spec"]) -> MetaOapg.properties.thread_spec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cores_per_socket"]) -> 'V0039Uint16NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billable_tres"]) -> 'V0039Float64NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpus_per_task"]) -> 'V0039Uint16NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpu_frequency_minimum"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpu_frequency_maximum"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpu_frequency_governor"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpus_per_tres"]) -> MetaOapg.properties.cpus_per_tres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cron"]) -> MetaOapg.properties.cron: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deadline"]) -> MetaOapg.properties.deadline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delay_boot"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dependency"]) -> MetaOapg.properties.dependency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["derived_exit_code"]) -> MetaOapg.properties.derived_exit_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eligible_time"]) -> MetaOapg.properties.eligible_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_time"]) -> MetaOapg.properties.end_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excluded_nodes"]) -> MetaOapg.properties.excluded_nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exit_code"]) -> MetaOapg.properties.exit_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extra"]) -> MetaOapg.properties.extra: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["failed_node"]) -> MetaOapg.properties.failed_node: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["features"]) -> MetaOapg.properties.features: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["federation_origin"]) -> MetaOapg.properties.federation_origin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["federation_siblings_active"]) -> MetaOapg.properties.federation_siblings_active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["federation_siblings_viable"]) -> MetaOapg.properties.federation_siblings_viable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gres_detail"]) -> 'V0039JobInfoGresDetail': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group_id"]) -> MetaOapg.properties.group_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group_name"]) -> MetaOapg.properties.group_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["het_job_id"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["het_job_id_set"]) -> MetaOapg.properties.het_job_id_set: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["het_job_offset"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_id"]) -> MetaOapg.properties.job_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_resources"]) -> 'V0039JobRes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_size_str"]) -> 'V0039CsvList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_state"]) -> MetaOapg.properties.job_state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_sched_evaluation"]) -> MetaOapg.properties.last_sched_evaluation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["licenses"]) -> MetaOapg.properties.licenses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mail_type"]) -> MetaOapg.properties.mail_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mail_user"]) -> MetaOapg.properties.mail_user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_cpus"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_nodes"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mcs_label"]) -> MetaOapg.properties.mcs_label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memory_per_tres"]) -> MetaOapg.properties.memory_per_tres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network"]) -> MetaOapg.properties.network: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodes"]) -> MetaOapg.properties.nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nice"]) -> MetaOapg.properties.nice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tasks_per_core"]) -> 'V0039Uint16NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tasks_per_tres"]) -> 'V0039Uint16NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tasks_per_node"]) -> 'V0039Uint16NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tasks_per_socket"]) -> 'V0039Uint16NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tasks_per_board"]) -> 'V0039Uint16NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpus"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["node_count"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tasks"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partition"]) -> MetaOapg.properties.partition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefer"]) -> MetaOapg.properties.prefer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memory_per_cpu"]) -> 'V0039Uint64NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memory_per_node"]) -> 'V0039Uint64NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimum_cpus_per_node"]) -> 'V0039Uint16NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimum_tmp_disk_per_node"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["power"]) -> MetaOapg.properties.power: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preempt_time"]) -> MetaOapg.properties.preempt_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preemptable_time"]) -> MetaOapg.properties.preemptable_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pre_sus_time"]) -> MetaOapg.properties.pre_sus_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profile"]) -> MetaOapg.properties.profile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qos"]) -> MetaOapg.properties.qos: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reboot"]) -> MetaOapg.properties.reboot: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["required_nodes"]) -> MetaOapg.properties.required_nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimum_switches"]) -> MetaOapg.properties.minimum_switches: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requeue"]) -> MetaOapg.properties.requeue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resize_time"]) -> MetaOapg.properties.resize_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["restart_cnt"]) -> MetaOapg.properties.restart_cnt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resv_name"]) -> MetaOapg.properties.resv_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduled_nodes"]) -> MetaOapg.properties.scheduled_nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selinux_context"]) -> MetaOapg.properties.selinux_context: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shared"]) -> MetaOapg.properties.shared: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exclusive"]) -> 'V0039JobExclusive': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["show_flags"]) -> MetaOapg.properties.show_flags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sockets_per_board"]) -> MetaOapg.properties.sockets_per_board: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sockets_per_node"]) -> 'V0039Uint16NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_time"]) -> MetaOapg.properties.start_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state_description"]) -> MetaOapg.properties.state_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state_reason"]) -> MetaOapg.properties.state_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["standard_error"]) -> MetaOapg.properties.standard_error: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["standard_input"]) -> MetaOapg.properties.standard_input: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["standard_output"]) -> MetaOapg.properties.standard_output: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["submit_time"]) -> MetaOapg.properties.submit_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suspend_time"]) -> MetaOapg.properties.suspend_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system_comment"]) -> MetaOapg.properties.system_comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_limit"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_minimum"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["threads_per_core"]) -> 'V0039Uint16NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tres_bind"]) -> MetaOapg.properties.tres_bind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tres_freq"]) -> MetaOapg.properties.tres_freq: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tres_per_job"]) -> MetaOapg.properties.tres_per_job: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tres_per_node"]) -> MetaOapg.properties.tres_per_node: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tres_per_socket"]) -> MetaOapg.properties.tres_per_socket: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tres_per_task"]) -> MetaOapg.properties.tres_per_task: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tres_req_str"]) -> MetaOapg.properties.tres_req_str: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tres_alloc_str"]) -> MetaOapg.properties.tres_alloc_str: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_name"]) -> MetaOapg.properties.user_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maximum_switch_wait_time"]) -> MetaOapg.properties.maximum_switch_wait_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wckey"]) -> MetaOapg.properties.wckey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_working_directory"]) -> MetaOapg.properties.current_working_directory: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account", "accrue_time", "admin_comment", "allocating_node", "array_job_id", "array_task_id", "array_max_tasks", "array_task_string", "association_id", "batch_features", "batch_flag", "batch_host", "flags", "burst_buffer", "burst_buffer_state", "cluster", "cluster_features", "command", "comment", "container", "container_id", "contiguous", "core_spec", "thread_spec", "cores_per_socket", "billable_tres", "cpus_per_task", "cpu_frequency_minimum", "cpu_frequency_maximum", "cpu_frequency_governor", "cpus_per_tres", "cron", "deadline", "delay_boot", "dependency", "derived_exit_code", "eligible_time", "end_time", "excluded_nodes", "exit_code", "extra", "failed_node", "features", "federation_origin", "federation_siblings_active", "federation_siblings_viable", "gres_detail", "group_id", "group_name", "het_job_id", "het_job_id_set", "het_job_offset", "job_id", "job_resources", "job_size_str", "job_state", "last_sched_evaluation", "licenses", "mail_type", "mail_user", "max_cpus", "max_nodes", "mcs_label", "memory_per_tres", "name", "network", "nodes", "nice", "tasks_per_core", "tasks_per_tres", "tasks_per_node", "tasks_per_socket", "tasks_per_board", "cpus", "node_count", "tasks", "partition", "prefer", "memory_per_cpu", "memory_per_node", "minimum_cpus_per_node", "minimum_tmp_disk_per_node", "power", "preempt_time", "preemptable_time", "pre_sus_time", "priority", "profile", "qos", "reboot", "required_nodes", "minimum_switches", "requeue", "resize_time", "restart_cnt", "resv_name", "scheduled_nodes", "selinux_context", "shared", "exclusive", "show_flags", "sockets_per_board", "sockets_per_node", "start_time", "state_description", "state_reason", "standard_error", "standard_input", "standard_output", "submit_time", "suspend_time", "system_comment", "time_limit", "time_minimum", "threads_per_core", "tres_bind", "tres_freq", "tres_per_job", "tres_per_node", "tres_per_socket", "tres_per_task", "tres_req_str", "tres_alloc_str", "user_id", "user_name", "maximum_switch_wait_time", "wckey", "current_working_directory", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> typing.Union[MetaOapg.properties.account, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrue_time"]) -> typing.Union[MetaOapg.properties.accrue_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["admin_comment"]) -> typing.Union[MetaOapg.properties.admin_comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allocating_node"]) -> typing.Union[MetaOapg.properties.allocating_node, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["array_job_id"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["array_task_id"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["array_max_tasks"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["array_task_string"]) -> typing.Union[MetaOapg.properties.array_task_string, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["association_id"]) -> typing.Union[MetaOapg.properties.association_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["batch_features"]) -> typing.Union[MetaOapg.properties.batch_features, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["batch_flag"]) -> typing.Union[MetaOapg.properties.batch_flag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["batch_host"]) -> typing.Union[MetaOapg.properties.batch_host, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flags"]) -> typing.Union[MetaOapg.properties.flags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["burst_buffer"]) -> typing.Union[MetaOapg.properties.burst_buffer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["burst_buffer_state"]) -> typing.Union[MetaOapg.properties.burst_buffer_state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cluster"]) -> typing.Union[MetaOapg.properties.cluster, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cluster_features"]) -> typing.Union[MetaOapg.properties.cluster_features, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["command"]) -> typing.Union[MetaOapg.properties.command, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["container"]) -> typing.Union[MetaOapg.properties.container, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["container_id"]) -> typing.Union[MetaOapg.properties.container_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contiguous"]) -> typing.Union[MetaOapg.properties.contiguous, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["core_spec"]) -> typing.Union[MetaOapg.properties.core_spec, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thread_spec"]) -> typing.Union[MetaOapg.properties.thread_spec, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cores_per_socket"]) -> typing.Union['V0039Uint16NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billable_tres"]) -> typing.Union['V0039Float64NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpus_per_task"]) -> typing.Union['V0039Uint16NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpu_frequency_minimum"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpu_frequency_maximum"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpu_frequency_governor"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpus_per_tres"]) -> typing.Union[MetaOapg.properties.cpus_per_tres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cron"]) -> typing.Union[MetaOapg.properties.cron, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deadline"]) -> typing.Union[MetaOapg.properties.deadline, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delay_boot"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dependency"]) -> typing.Union[MetaOapg.properties.dependency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["derived_exit_code"]) -> typing.Union[MetaOapg.properties.derived_exit_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eligible_time"]) -> typing.Union[MetaOapg.properties.eligible_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_time"]) -> typing.Union[MetaOapg.properties.end_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excluded_nodes"]) -> typing.Union[MetaOapg.properties.excluded_nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exit_code"]) -> typing.Union[MetaOapg.properties.exit_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extra"]) -> typing.Union[MetaOapg.properties.extra, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["failed_node"]) -> typing.Union[MetaOapg.properties.failed_node, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["features"]) -> typing.Union[MetaOapg.properties.features, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["federation_origin"]) -> typing.Union[MetaOapg.properties.federation_origin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["federation_siblings_active"]) -> typing.Union[MetaOapg.properties.federation_siblings_active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["federation_siblings_viable"]) -> typing.Union[MetaOapg.properties.federation_siblings_viable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gres_detail"]) -> typing.Union['V0039JobInfoGresDetail', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group_id"]) -> typing.Union[MetaOapg.properties.group_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group_name"]) -> typing.Union[MetaOapg.properties.group_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["het_job_id"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["het_job_id_set"]) -> typing.Union[MetaOapg.properties.het_job_id_set, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["het_job_offset"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_id"]) -> typing.Union[MetaOapg.properties.job_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_resources"]) -> typing.Union['V0039JobRes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_size_str"]) -> typing.Union['V0039CsvList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_state"]) -> typing.Union[MetaOapg.properties.job_state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_sched_evaluation"]) -> typing.Union[MetaOapg.properties.last_sched_evaluation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["licenses"]) -> typing.Union[MetaOapg.properties.licenses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mail_type"]) -> typing.Union[MetaOapg.properties.mail_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mail_user"]) -> typing.Union[MetaOapg.properties.mail_user, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_cpus"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_nodes"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mcs_label"]) -> typing.Union[MetaOapg.properties.mcs_label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memory_per_tres"]) -> typing.Union[MetaOapg.properties.memory_per_tres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network"]) -> typing.Union[MetaOapg.properties.network, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodes"]) -> typing.Union[MetaOapg.properties.nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nice"]) -> typing.Union[MetaOapg.properties.nice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tasks_per_core"]) -> typing.Union['V0039Uint16NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tasks_per_tres"]) -> typing.Union['V0039Uint16NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tasks_per_node"]) -> typing.Union['V0039Uint16NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tasks_per_socket"]) -> typing.Union['V0039Uint16NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tasks_per_board"]) -> typing.Union['V0039Uint16NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpus"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["node_count"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tasks"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partition"]) -> typing.Union[MetaOapg.properties.partition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefer"]) -> typing.Union[MetaOapg.properties.prefer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memory_per_cpu"]) -> typing.Union['V0039Uint64NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memory_per_node"]) -> typing.Union['V0039Uint64NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimum_cpus_per_node"]) -> typing.Union['V0039Uint16NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimum_tmp_disk_per_node"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["power"]) -> typing.Union[MetaOapg.properties.power, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preempt_time"]) -> typing.Union[MetaOapg.properties.preempt_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preemptable_time"]) -> typing.Union[MetaOapg.properties.preemptable_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pre_sus_time"]) -> typing.Union[MetaOapg.properties.pre_sus_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profile"]) -> typing.Union[MetaOapg.properties.profile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qos"]) -> typing.Union[MetaOapg.properties.qos, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reboot"]) -> typing.Union[MetaOapg.properties.reboot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["required_nodes"]) -> typing.Union[MetaOapg.properties.required_nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimum_switches"]) -> typing.Union[MetaOapg.properties.minimum_switches, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requeue"]) -> typing.Union[MetaOapg.properties.requeue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resize_time"]) -> typing.Union[MetaOapg.properties.resize_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["restart_cnt"]) -> typing.Union[MetaOapg.properties.restart_cnt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resv_name"]) -> typing.Union[MetaOapg.properties.resv_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduled_nodes"]) -> typing.Union[MetaOapg.properties.scheduled_nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selinux_context"]) -> typing.Union[MetaOapg.properties.selinux_context, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shared"]) -> typing.Union[MetaOapg.properties.shared, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exclusive"]) -> typing.Union['V0039JobExclusive', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["show_flags"]) -> typing.Union[MetaOapg.properties.show_flags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sockets_per_board"]) -> typing.Union[MetaOapg.properties.sockets_per_board, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sockets_per_node"]) -> typing.Union['V0039Uint16NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_time"]) -> typing.Union[MetaOapg.properties.start_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state_description"]) -> typing.Union[MetaOapg.properties.state_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state_reason"]) -> typing.Union[MetaOapg.properties.state_reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["standard_error"]) -> typing.Union[MetaOapg.properties.standard_error, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["standard_input"]) -> typing.Union[MetaOapg.properties.standard_input, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["standard_output"]) -> typing.Union[MetaOapg.properties.standard_output, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["submit_time"]) -> typing.Union[MetaOapg.properties.submit_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suspend_time"]) -> typing.Union[MetaOapg.properties.suspend_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system_comment"]) -> typing.Union[MetaOapg.properties.system_comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_limit"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_minimum"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["threads_per_core"]) -> typing.Union['V0039Uint16NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tres_bind"]) -> typing.Union[MetaOapg.properties.tres_bind, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tres_freq"]) -> typing.Union[MetaOapg.properties.tres_freq, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tres_per_job"]) -> typing.Union[MetaOapg.properties.tres_per_job, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tres_per_node"]) -> typing.Union[MetaOapg.properties.tres_per_node, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tres_per_socket"]) -> typing.Union[MetaOapg.properties.tres_per_socket, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tres_per_task"]) -> typing.Union[MetaOapg.properties.tres_per_task, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tres_req_str"]) -> typing.Union[MetaOapg.properties.tres_req_str, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tres_alloc_str"]) -> typing.Union[MetaOapg.properties.tres_alloc_str, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> typing.Union[MetaOapg.properties.user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_name"]) -> typing.Union[MetaOapg.properties.user_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maximum_switch_wait_time"]) -> typing.Union[MetaOapg.properties.maximum_switch_wait_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wckey"]) -> typing.Union[MetaOapg.properties.wckey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_working_directory"]) -> typing.Union[MetaOapg.properties.current_working_directory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account", "accrue_time", "admin_comment", "allocating_node", "array_job_id", "array_task_id", "array_max_tasks", "array_task_string", "association_id", "batch_features", "batch_flag", "batch_host", "flags", "burst_buffer", "burst_buffer_state", "cluster", "cluster_features", "command", "comment", "container", "container_id", "contiguous", "core_spec", "thread_spec", "cores_per_socket", "billable_tres", "cpus_per_task", "cpu_frequency_minimum", "cpu_frequency_maximum", "cpu_frequency_governor", "cpus_per_tres", "cron", "deadline", "delay_boot", "dependency", "derived_exit_code", "eligible_time", "end_time", "excluded_nodes", "exit_code", "extra", "failed_node", "features", "federation_origin", "federation_siblings_active", "federation_siblings_viable", "gres_detail", "group_id", "group_name", "het_job_id", "het_job_id_set", "het_job_offset", "job_id", "job_resources", "job_size_str", "job_state", "last_sched_evaluation", "licenses", "mail_type", "mail_user", "max_cpus", "max_nodes", "mcs_label", "memory_per_tres", "name", "network", "nodes", "nice", "tasks_per_core", "tasks_per_tres", "tasks_per_node", "tasks_per_socket", "tasks_per_board", "cpus", "node_count", "tasks", "partition", "prefer", "memory_per_cpu", "memory_per_node", "minimum_cpus_per_node", "minimum_tmp_disk_per_node", "power", "preempt_time", "preemptable_time", "pre_sus_time", "priority", "profile", "qos", "reboot", "required_nodes", "minimum_switches", "requeue", "resize_time", "restart_cnt", "resv_name", "scheduled_nodes", "selinux_context", "shared", "exclusive", "show_flags", "sockets_per_board", "sockets_per_node", "start_time", "state_description", "state_reason", "standard_error", "standard_input", "standard_output", "submit_time", "suspend_time", "system_comment", "time_limit", "time_minimum", "threads_per_core", "tres_bind", "tres_freq", "tres_per_job", "tres_per_node", "tres_per_socket", "tres_per_task", "tres_req_str", "tres_alloc_str", "user_id", "user_name", "maximum_switch_wait_time", "wckey", "current_working_directory", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        account: typing.Union[MetaOapg.properties.account, str, schemas.Unset] = schemas.unset,
        accrue_time: typing.Union[MetaOapg.properties.accrue_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        admin_comment: typing.Union[MetaOapg.properties.admin_comment, str, schemas.Unset] = schemas.unset,
        allocating_node: typing.Union[MetaOapg.properties.allocating_node, str, schemas.Unset] = schemas.unset,
        array_job_id: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        array_task_id: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        array_max_tasks: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        array_task_string: typing.Union[MetaOapg.properties.array_task_string, str, schemas.Unset] = schemas.unset,
        association_id: typing.Union[MetaOapg.properties.association_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        batch_features: typing.Union[MetaOapg.properties.batch_features, str, schemas.Unset] = schemas.unset,
        batch_flag: typing.Union[MetaOapg.properties.batch_flag, bool, schemas.Unset] = schemas.unset,
        batch_host: typing.Union[MetaOapg.properties.batch_host, str, schemas.Unset] = schemas.unset,
        flags: typing.Union[MetaOapg.properties.flags, list, tuple, schemas.Unset] = schemas.unset,
        burst_buffer: typing.Union[MetaOapg.properties.burst_buffer, str, schemas.Unset] = schemas.unset,
        burst_buffer_state: typing.Union[MetaOapg.properties.burst_buffer_state, str, schemas.Unset] = schemas.unset,
        cluster: typing.Union[MetaOapg.properties.cluster, str, schemas.Unset] = schemas.unset,
        cluster_features: typing.Union[MetaOapg.properties.cluster_features, str, schemas.Unset] = schemas.unset,
        command: typing.Union[MetaOapg.properties.command, str, schemas.Unset] = schemas.unset,
        comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
        container: typing.Union[MetaOapg.properties.container, str, schemas.Unset] = schemas.unset,
        container_id: typing.Union[MetaOapg.properties.container_id, str, schemas.Unset] = schemas.unset,
        contiguous: typing.Union[MetaOapg.properties.contiguous, bool, schemas.Unset] = schemas.unset,
        core_spec: typing.Union[MetaOapg.properties.core_spec, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        thread_spec: typing.Union[MetaOapg.properties.thread_spec, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cores_per_socket: typing.Union['V0039Uint16NoVal', schemas.Unset] = schemas.unset,
        billable_tres: typing.Union['V0039Float64NoVal', schemas.Unset] = schemas.unset,
        cpus_per_task: typing.Union['V0039Uint16NoVal', schemas.Unset] = schemas.unset,
        cpu_frequency_minimum: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        cpu_frequency_maximum: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        cpu_frequency_governor: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        cpus_per_tres: typing.Union[MetaOapg.properties.cpus_per_tres, str, schemas.Unset] = schemas.unset,
        cron: typing.Union[MetaOapg.properties.cron, str, schemas.Unset] = schemas.unset,
        deadline: typing.Union[MetaOapg.properties.deadline, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        delay_boot: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        dependency: typing.Union[MetaOapg.properties.dependency, str, schemas.Unset] = schemas.unset,
        derived_exit_code: typing.Union[MetaOapg.properties.derived_exit_code, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        eligible_time: typing.Union[MetaOapg.properties.eligible_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        end_time: typing.Union[MetaOapg.properties.end_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        excluded_nodes: typing.Union[MetaOapg.properties.excluded_nodes, str, schemas.Unset] = schemas.unset,
        exit_code: typing.Union[MetaOapg.properties.exit_code, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        extra: typing.Union[MetaOapg.properties.extra, str, schemas.Unset] = schemas.unset,
        failed_node: typing.Union[MetaOapg.properties.failed_node, str, schemas.Unset] = schemas.unset,
        features: typing.Union[MetaOapg.properties.features, str, schemas.Unset] = schemas.unset,
        federation_origin: typing.Union[MetaOapg.properties.federation_origin, str, schemas.Unset] = schemas.unset,
        federation_siblings_active: typing.Union[MetaOapg.properties.federation_siblings_active, str, schemas.Unset] = schemas.unset,
        federation_siblings_viable: typing.Union[MetaOapg.properties.federation_siblings_viable, str, schemas.Unset] = schemas.unset,
        gres_detail: typing.Union['V0039JobInfoGresDetail', schemas.Unset] = schemas.unset,
        group_id: typing.Union[MetaOapg.properties.group_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        group_name: typing.Union[MetaOapg.properties.group_name, str, schemas.Unset] = schemas.unset,
        het_job_id: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        het_job_id_set: typing.Union[MetaOapg.properties.het_job_id_set, str, schemas.Unset] = schemas.unset,
        het_job_offset: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        job_id: typing.Union[MetaOapg.properties.job_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        job_resources: typing.Union['V0039JobRes', schemas.Unset] = schemas.unset,
        job_size_str: typing.Union['V0039CsvList', schemas.Unset] = schemas.unset,
        job_state: typing.Union[MetaOapg.properties.job_state, str, schemas.Unset] = schemas.unset,
        last_sched_evaluation: typing.Union[MetaOapg.properties.last_sched_evaluation, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        licenses: typing.Union[MetaOapg.properties.licenses, str, schemas.Unset] = schemas.unset,
        mail_type: typing.Union[MetaOapg.properties.mail_type, list, tuple, schemas.Unset] = schemas.unset,
        mail_user: typing.Union[MetaOapg.properties.mail_user, str, schemas.Unset] = schemas.unset,
        max_cpus: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        max_nodes: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        mcs_label: typing.Union[MetaOapg.properties.mcs_label, str, schemas.Unset] = schemas.unset,
        memory_per_tres: typing.Union[MetaOapg.properties.memory_per_tres, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        network: typing.Union[MetaOapg.properties.network, str, schemas.Unset] = schemas.unset,
        nodes: typing.Union[MetaOapg.properties.nodes, str, schemas.Unset] = schemas.unset,
        nice: typing.Union[MetaOapg.properties.nice, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tasks_per_core: typing.Union['V0039Uint16NoVal', schemas.Unset] = schemas.unset,
        tasks_per_tres: typing.Union['V0039Uint16NoVal', schemas.Unset] = schemas.unset,
        tasks_per_node: typing.Union['V0039Uint16NoVal', schemas.Unset] = schemas.unset,
        tasks_per_socket: typing.Union['V0039Uint16NoVal', schemas.Unset] = schemas.unset,
        tasks_per_board: typing.Union['V0039Uint16NoVal', schemas.Unset] = schemas.unset,
        cpus: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        node_count: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        tasks: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        partition: typing.Union[MetaOapg.properties.partition, str, schemas.Unset] = schemas.unset,
        prefer: typing.Union[MetaOapg.properties.prefer, str, schemas.Unset] = schemas.unset,
        memory_per_cpu: typing.Union['V0039Uint64NoVal', schemas.Unset] = schemas.unset,
        memory_per_node: typing.Union['V0039Uint64NoVal', schemas.Unset] = schemas.unset,
        minimum_cpus_per_node: typing.Union['V0039Uint16NoVal', schemas.Unset] = schemas.unset,
        minimum_tmp_disk_per_node: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        power: typing.Union[MetaOapg.properties.power, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        preempt_time: typing.Union[MetaOapg.properties.preempt_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        preemptable_time: typing.Union[MetaOapg.properties.preemptable_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pre_sus_time: typing.Union[MetaOapg.properties.pre_sus_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        priority: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        profile: typing.Union[MetaOapg.properties.profile, list, tuple, schemas.Unset] = schemas.unset,
        qos: typing.Union[MetaOapg.properties.qos, str, schemas.Unset] = schemas.unset,
        reboot: typing.Union[MetaOapg.properties.reboot, bool, schemas.Unset] = schemas.unset,
        required_nodes: typing.Union[MetaOapg.properties.required_nodes, str, schemas.Unset] = schemas.unset,
        minimum_switches: typing.Union[MetaOapg.properties.minimum_switches, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        requeue: typing.Union[MetaOapg.properties.requeue, bool, schemas.Unset] = schemas.unset,
        resize_time: typing.Union[MetaOapg.properties.resize_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        restart_cnt: typing.Union[MetaOapg.properties.restart_cnt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        resv_name: typing.Union[MetaOapg.properties.resv_name, str, schemas.Unset] = schemas.unset,
        scheduled_nodes: typing.Union[MetaOapg.properties.scheduled_nodes, str, schemas.Unset] = schemas.unset,
        selinux_context: typing.Union[MetaOapg.properties.selinux_context, str, schemas.Unset] = schemas.unset,
        shared: typing.Union[MetaOapg.properties.shared, list, tuple, schemas.Unset] = schemas.unset,
        exclusive: typing.Union['V0039JobExclusive', schemas.Unset] = schemas.unset,
        show_flags: typing.Union[MetaOapg.properties.show_flags, list, tuple, schemas.Unset] = schemas.unset,
        sockets_per_board: typing.Union[MetaOapg.properties.sockets_per_board, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sockets_per_node: typing.Union['V0039Uint16NoVal', schemas.Unset] = schemas.unset,
        start_time: typing.Union[MetaOapg.properties.start_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        state_description: typing.Union[MetaOapg.properties.state_description, str, schemas.Unset] = schemas.unset,
        state_reason: typing.Union[MetaOapg.properties.state_reason, str, schemas.Unset] = schemas.unset,
        standard_error: typing.Union[MetaOapg.properties.standard_error, str, schemas.Unset] = schemas.unset,
        standard_input: typing.Union[MetaOapg.properties.standard_input, str, schemas.Unset] = schemas.unset,
        standard_output: typing.Union[MetaOapg.properties.standard_output, str, schemas.Unset] = schemas.unset,
        submit_time: typing.Union[MetaOapg.properties.submit_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        suspend_time: typing.Union[MetaOapg.properties.suspend_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        system_comment: typing.Union[MetaOapg.properties.system_comment, str, schemas.Unset] = schemas.unset,
        time_limit: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        time_minimum: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        threads_per_core: typing.Union['V0039Uint16NoVal', schemas.Unset] = schemas.unset,
        tres_bind: typing.Union[MetaOapg.properties.tres_bind, str, schemas.Unset] = schemas.unset,
        tres_freq: typing.Union[MetaOapg.properties.tres_freq, str, schemas.Unset] = schemas.unset,
        tres_per_job: typing.Union[MetaOapg.properties.tres_per_job, str, schemas.Unset] = schemas.unset,
        tres_per_node: typing.Union[MetaOapg.properties.tres_per_node, str, schemas.Unset] = schemas.unset,
        tres_per_socket: typing.Union[MetaOapg.properties.tres_per_socket, str, schemas.Unset] = schemas.unset,
        tres_per_task: typing.Union[MetaOapg.properties.tres_per_task, str, schemas.Unset] = schemas.unset,
        tres_req_str: typing.Union[MetaOapg.properties.tres_req_str, str, schemas.Unset] = schemas.unset,
        tres_alloc_str: typing.Union[MetaOapg.properties.tres_alloc_str, str, schemas.Unset] = schemas.unset,
        user_id: typing.Union[MetaOapg.properties.user_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        user_name: typing.Union[MetaOapg.properties.user_name, str, schemas.Unset] = schemas.unset,
        maximum_switch_wait_time: typing.Union[MetaOapg.properties.maximum_switch_wait_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        wckey: typing.Union[MetaOapg.properties.wckey, str, schemas.Unset] = schemas.unset,
        current_working_directory: typing.Union[MetaOapg.properties.current_working_directory, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V0039JobInfo':
        return super().__new__(
            cls,
            *_args,
            account=account,
            accrue_time=accrue_time,
            admin_comment=admin_comment,
            allocating_node=allocating_node,
            array_job_id=array_job_id,
            array_task_id=array_task_id,
            array_max_tasks=array_max_tasks,
            array_task_string=array_task_string,
            association_id=association_id,
            batch_features=batch_features,
            batch_flag=batch_flag,
            batch_host=batch_host,
            flags=flags,
            burst_buffer=burst_buffer,
            burst_buffer_state=burst_buffer_state,
            cluster=cluster,
            cluster_features=cluster_features,
            command=command,
            comment=comment,
            container=container,
            container_id=container_id,
            contiguous=contiguous,
            core_spec=core_spec,
            thread_spec=thread_spec,
            cores_per_socket=cores_per_socket,
            billable_tres=billable_tres,
            cpus_per_task=cpus_per_task,
            cpu_frequency_minimum=cpu_frequency_minimum,
            cpu_frequency_maximum=cpu_frequency_maximum,
            cpu_frequency_governor=cpu_frequency_governor,
            cpus_per_tres=cpus_per_tres,
            cron=cron,
            deadline=deadline,
            delay_boot=delay_boot,
            dependency=dependency,
            derived_exit_code=derived_exit_code,
            eligible_time=eligible_time,
            end_time=end_time,
            excluded_nodes=excluded_nodes,
            exit_code=exit_code,
            extra=extra,
            failed_node=failed_node,
            features=features,
            federation_origin=federation_origin,
            federation_siblings_active=federation_siblings_active,
            federation_siblings_viable=federation_siblings_viable,
            gres_detail=gres_detail,
            group_id=group_id,
            group_name=group_name,
            het_job_id=het_job_id,
            het_job_id_set=het_job_id_set,
            het_job_offset=het_job_offset,
            job_id=job_id,
            job_resources=job_resources,
            job_size_str=job_size_str,
            job_state=job_state,
            last_sched_evaluation=last_sched_evaluation,
            licenses=licenses,
            mail_type=mail_type,
            mail_user=mail_user,
            max_cpus=max_cpus,
            max_nodes=max_nodes,
            mcs_label=mcs_label,
            memory_per_tres=memory_per_tres,
            name=name,
            network=network,
            nodes=nodes,
            nice=nice,
            tasks_per_core=tasks_per_core,
            tasks_per_tres=tasks_per_tres,
            tasks_per_node=tasks_per_node,
            tasks_per_socket=tasks_per_socket,
            tasks_per_board=tasks_per_board,
            cpus=cpus,
            node_count=node_count,
            tasks=tasks,
            partition=partition,
            prefer=prefer,
            memory_per_cpu=memory_per_cpu,
            memory_per_node=memory_per_node,
            minimum_cpus_per_node=minimum_cpus_per_node,
            minimum_tmp_disk_per_node=minimum_tmp_disk_per_node,
            power=power,
            preempt_time=preempt_time,
            preemptable_time=preemptable_time,
            pre_sus_time=pre_sus_time,
            priority=priority,
            profile=profile,
            qos=qos,
            reboot=reboot,
            required_nodes=required_nodes,
            minimum_switches=minimum_switches,
            requeue=requeue,
            resize_time=resize_time,
            restart_cnt=restart_cnt,
            resv_name=resv_name,
            scheduled_nodes=scheduled_nodes,
            selinux_context=selinux_context,
            shared=shared,
            exclusive=exclusive,
            show_flags=show_flags,
            sockets_per_board=sockets_per_board,
            sockets_per_node=sockets_per_node,
            start_time=start_time,
            state_description=state_description,
            state_reason=state_reason,
            standard_error=standard_error,
            standard_input=standard_input,
            standard_output=standard_output,
            submit_time=submit_time,
            suspend_time=suspend_time,
            system_comment=system_comment,
            time_limit=time_limit,
            time_minimum=time_minimum,
            threads_per_core=threads_per_core,
            tres_bind=tres_bind,
            tres_freq=tres_freq,
            tres_per_job=tres_per_job,
            tres_per_node=tres_per_node,
            tres_per_socket=tres_per_socket,
            tres_per_task=tres_per_task,
            tres_req_str=tres_req_str,
            tres_alloc_str=tres_alloc_str,
            user_id=user_id,
            user_name=user_name,
            maximum_switch_wait_time=maximum_switch_wait_time,
            wckey=wckey,
            current_working_directory=current_working_directory,
            _configuration=_configuration,
            **kwargs,
        )

from slurmrestapi.model.v0039_csv_list import V0039CsvList
from slurmrestapi.model.v0039_float64_no_val import V0039Float64NoVal
from slurmrestapi.model.v0039_job_exclusive import V0039JobExclusive
from slurmrestapi.model.v0039_job_info_gres_detail import V0039JobInfoGresDetail
from slurmrestapi.model.v0039_job_res import V0039JobRes
from slurmrestapi.model.v0039_uint16_no_val import V0039Uint16NoVal
from slurmrestapi.model.v0039_uint32_no_val import V0039Uint32NoVal
from slurmrestapi.model.v0039_uint64_no_val import V0039Uint64NoVal
