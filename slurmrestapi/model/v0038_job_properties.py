# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.38
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class V0038JobProperties(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "environment",
        }
        
        class properties:
            environment = schemas.DictSchema
            account = schemas.StrSchema
            account_gather_frequency = schemas.StrSchema
            
            
            class argv(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'argv':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            array = schemas.StrSchema
            batch_features = schemas.StrSchema
            begin_time = schemas.Int64Schema
            burst_buffer = schemas.StrSchema
            cluster_constraint = schemas.StrSchema
            comment = schemas.StrSchema
            constraints = schemas.StrSchema
            container = schemas.StrSchema
            core_specification = schemas.IntSchema
            cores_per_socket = schemas.IntSchema
            cpu_binding = schemas.StrSchema
            cpu_binding_hint = schemas.StrSchema
            cpu_frequency = schemas.StrSchema
            cpus_per_gpu = schemas.StrSchema
            cpus_per_task = schemas.IntSchema
            current_working_directory = schemas.StrSchema
            deadline = schemas.StrSchema
            delay_boot = schemas.IntSchema
            dependency = schemas.StrSchema
            distribution = schemas.StrSchema
            
            
            class exclusive(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "user": "USER",
                        "mcs": "MCS",
                        "true": "TRUE",
                        "false": "FALSE",
                    }
                
                @schemas.classproperty
                def USER(cls):
                    return cls("user")
                
                @schemas.classproperty
                def MCS(cls):
                    return cls("mcs")
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls("true")
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("false")
            get_user_environment = schemas.BoolSchema
            gres = schemas.StrSchema
            
            
            class gres_flags(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "disable-binding": "DISABLEBINDING",
                        "enforce-binding": "ENFORCEBINDING",
                    }
                
                @schemas.classproperty
                def DISABLEBINDING(cls):
                    return cls("disable-binding")
                
                @schemas.classproperty
                def ENFORCEBINDING(cls):
                    return cls("enforce-binding")
            gpu_binding = schemas.StrSchema
            gpu_frequency = schemas.StrSchema
            gpus = schemas.StrSchema
            gpus_per_node = schemas.StrSchema
            gpus_per_socket = schemas.StrSchema
            gpus_per_task = schemas.StrSchema
            hold = schemas.BoolSchema
            kill_on_invalid_dependency = schemas.BoolSchema
            licenses = schemas.StrSchema
            mail_type = schemas.StrSchema
            mail_user = schemas.StrSchema
            mcs_label = schemas.StrSchema
            memory_binding = schemas.StrSchema
            memory_per_cpu = schemas.IntSchema
            memory_per_gpu = schemas.IntSchema
            memory_per_node = schemas.IntSchema
            minimum_cpus_per_node = schemas.IntSchema
            minimum_nodes = schemas.BoolSchema
            name = schemas.StrSchema
            nice = schemas.IntSchema
            no_kill = schemas.BoolSchema
            
            
            class nodes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 2
                    min_items = 1
                    items = schemas.IntSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'nodes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class open_mode(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "append": "APPEND",
                        "truncate": "TRUNCATE",
                    }
                
                @schemas.classproperty
                def APPEND(cls):
                    return cls("append")
                
                @schemas.classproperty
                def TRUNCATE(cls):
                    return cls("truncate")
            oversubscribe = schemas.BoolSchema
            partition = schemas.StrSchema
            prefer = schemas.StrSchema
            priority = schemas.StrSchema
            qos = schemas.StrSchema
            requeue = schemas.BoolSchema
            reservation = schemas.StrSchema
            
            
            class signal(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'(B:|)sig_num(@sig_time|)',  # noqa: E501
                    }]
            sockets_per_node = schemas.IntSchema
            spread_job = schemas.BoolSchema
            standard_error = schemas.StrSchema
            standard_input = schemas.StrSchema
            standard_output = schemas.StrSchema
            tasks = schemas.IntSchema
            tasks_per_core = schemas.IntSchema
            tasks_per_node = schemas.IntSchema
            tasks_per_socket = schemas.IntSchema
            thread_specification = schemas.IntSchema
            threads_per_core = schemas.IntSchema
            time_limit = schemas.IntSchema
            time_minimum = schemas.IntSchema
            wait_all_nodes = schemas.BoolSchema
            wckey = schemas.StrSchema
            __annotations__ = {
                "environment": environment,
                "account": account,
                "account_gather_frequency": account_gather_frequency,
                "argv": argv,
                "array": array,
                "batch_features": batch_features,
                "begin_time": begin_time,
                "burst_buffer": burst_buffer,
                "cluster_constraint": cluster_constraint,
                "comment": comment,
                "constraints": constraints,
                "container": container,
                "core_specification": core_specification,
                "cores_per_socket": cores_per_socket,
                "cpu_binding": cpu_binding,
                "cpu_binding_hint": cpu_binding_hint,
                "cpu_frequency": cpu_frequency,
                "cpus_per_gpu": cpus_per_gpu,
                "cpus_per_task": cpus_per_task,
                "current_working_directory": current_working_directory,
                "deadline": deadline,
                "delay_boot": delay_boot,
                "dependency": dependency,
                "distribution": distribution,
                "exclusive": exclusive,
                "get_user_environment": get_user_environment,
                "gres": gres,
                "gres_flags": gres_flags,
                "gpu_binding": gpu_binding,
                "gpu_frequency": gpu_frequency,
                "gpus": gpus,
                "gpus_per_node": gpus_per_node,
                "gpus_per_socket": gpus_per_socket,
                "gpus_per_task": gpus_per_task,
                "hold": hold,
                "kill_on_invalid_dependency": kill_on_invalid_dependency,
                "licenses": licenses,
                "mail_type": mail_type,
                "mail_user": mail_user,
                "mcs_label": mcs_label,
                "memory_binding": memory_binding,
                "memory_per_cpu": memory_per_cpu,
                "memory_per_gpu": memory_per_gpu,
                "memory_per_node": memory_per_node,
                "minimum_cpus_per_node": minimum_cpus_per_node,
                "minimum_nodes": minimum_nodes,
                "name": name,
                "nice": nice,
                "no_kill": no_kill,
                "nodes": nodes,
                "open_mode": open_mode,
                "oversubscribe": oversubscribe,
                "partition": partition,
                "prefer": prefer,
                "priority": priority,
                "qos": qos,
                "requeue": requeue,
                "reservation": reservation,
                "signal": signal,
                "sockets_per_node": sockets_per_node,
                "spread_job": spread_job,
                "standard_error": standard_error,
                "standard_input": standard_input,
                "standard_output": standard_output,
                "tasks": tasks,
                "tasks_per_core": tasks_per_core,
                "tasks_per_node": tasks_per_node,
                "tasks_per_socket": tasks_per_socket,
                "thread_specification": thread_specification,
                "threads_per_core": threads_per_core,
                "time_limit": time_limit,
                "time_minimum": time_minimum,
                "wait_all_nodes": wait_all_nodes,
                "wckey": wckey,
            }
    
    environment: MetaOapg.properties.environment
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environment"]) -> MetaOapg.properties.environment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_gather_frequency"]) -> MetaOapg.properties.account_gather_frequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["argv"]) -> MetaOapg.properties.argv: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["array"]) -> MetaOapg.properties.array: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["batch_features"]) -> MetaOapg.properties.batch_features: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["begin_time"]) -> MetaOapg.properties.begin_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["burst_buffer"]) -> MetaOapg.properties.burst_buffer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cluster_constraint"]) -> MetaOapg.properties.cluster_constraint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["constraints"]) -> MetaOapg.properties.constraints: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["container"]) -> MetaOapg.properties.container: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["core_specification"]) -> MetaOapg.properties.core_specification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cores_per_socket"]) -> MetaOapg.properties.cores_per_socket: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpu_binding"]) -> MetaOapg.properties.cpu_binding: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpu_binding_hint"]) -> MetaOapg.properties.cpu_binding_hint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpu_frequency"]) -> MetaOapg.properties.cpu_frequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpus_per_gpu"]) -> MetaOapg.properties.cpus_per_gpu: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpus_per_task"]) -> MetaOapg.properties.cpus_per_task: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_working_directory"]) -> MetaOapg.properties.current_working_directory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deadline"]) -> MetaOapg.properties.deadline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delay_boot"]) -> MetaOapg.properties.delay_boot: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dependency"]) -> MetaOapg.properties.dependency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["distribution"]) -> MetaOapg.properties.distribution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exclusive"]) -> MetaOapg.properties.exclusive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["get_user_environment"]) -> MetaOapg.properties.get_user_environment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gres"]) -> MetaOapg.properties.gres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gres_flags"]) -> MetaOapg.properties.gres_flags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gpu_binding"]) -> MetaOapg.properties.gpu_binding: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gpu_frequency"]) -> MetaOapg.properties.gpu_frequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gpus"]) -> MetaOapg.properties.gpus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gpus_per_node"]) -> MetaOapg.properties.gpus_per_node: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gpus_per_socket"]) -> MetaOapg.properties.gpus_per_socket: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gpus_per_task"]) -> MetaOapg.properties.gpus_per_task: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hold"]) -> MetaOapg.properties.hold: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kill_on_invalid_dependency"]) -> MetaOapg.properties.kill_on_invalid_dependency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["licenses"]) -> MetaOapg.properties.licenses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mail_type"]) -> MetaOapg.properties.mail_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mail_user"]) -> MetaOapg.properties.mail_user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mcs_label"]) -> MetaOapg.properties.mcs_label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memory_binding"]) -> MetaOapg.properties.memory_binding: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memory_per_cpu"]) -> MetaOapg.properties.memory_per_cpu: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memory_per_gpu"]) -> MetaOapg.properties.memory_per_gpu: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memory_per_node"]) -> MetaOapg.properties.memory_per_node: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimum_cpus_per_node"]) -> MetaOapg.properties.minimum_cpus_per_node: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimum_nodes"]) -> MetaOapg.properties.minimum_nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nice"]) -> MetaOapg.properties.nice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["no_kill"]) -> MetaOapg.properties.no_kill: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodes"]) -> MetaOapg.properties.nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["open_mode"]) -> MetaOapg.properties.open_mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oversubscribe"]) -> MetaOapg.properties.oversubscribe: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partition"]) -> MetaOapg.properties.partition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefer"]) -> MetaOapg.properties.prefer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qos"]) -> MetaOapg.properties.qos: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requeue"]) -> MetaOapg.properties.requeue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reservation"]) -> MetaOapg.properties.reservation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signal"]) -> MetaOapg.properties.signal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sockets_per_node"]) -> MetaOapg.properties.sockets_per_node: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spread_job"]) -> MetaOapg.properties.spread_job: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["standard_error"]) -> MetaOapg.properties.standard_error: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["standard_input"]) -> MetaOapg.properties.standard_input: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["standard_output"]) -> MetaOapg.properties.standard_output: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tasks"]) -> MetaOapg.properties.tasks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tasks_per_core"]) -> MetaOapg.properties.tasks_per_core: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tasks_per_node"]) -> MetaOapg.properties.tasks_per_node: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tasks_per_socket"]) -> MetaOapg.properties.tasks_per_socket: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thread_specification"]) -> MetaOapg.properties.thread_specification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["threads_per_core"]) -> MetaOapg.properties.threads_per_core: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_limit"]) -> MetaOapg.properties.time_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_minimum"]) -> MetaOapg.properties.time_minimum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wait_all_nodes"]) -> MetaOapg.properties.wait_all_nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wckey"]) -> MetaOapg.properties.wckey: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["environment", "account", "account_gather_frequency", "argv", "array", "batch_features", "begin_time", "burst_buffer", "cluster_constraint", "comment", "constraints", "container", "core_specification", "cores_per_socket", "cpu_binding", "cpu_binding_hint", "cpu_frequency", "cpus_per_gpu", "cpus_per_task", "current_working_directory", "deadline", "delay_boot", "dependency", "distribution", "exclusive", "get_user_environment", "gres", "gres_flags", "gpu_binding", "gpu_frequency", "gpus", "gpus_per_node", "gpus_per_socket", "gpus_per_task", "hold", "kill_on_invalid_dependency", "licenses", "mail_type", "mail_user", "mcs_label", "memory_binding", "memory_per_cpu", "memory_per_gpu", "memory_per_node", "minimum_cpus_per_node", "minimum_nodes", "name", "nice", "no_kill", "nodes", "open_mode", "oversubscribe", "partition", "prefer", "priority", "qos", "requeue", "reservation", "signal", "sockets_per_node", "spread_job", "standard_error", "standard_input", "standard_output", "tasks", "tasks_per_core", "tasks_per_node", "tasks_per_socket", "thread_specification", "threads_per_core", "time_limit", "time_minimum", "wait_all_nodes", "wckey", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environment"]) -> MetaOapg.properties.environment: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> typing.Union[MetaOapg.properties.account, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_gather_frequency"]) -> typing.Union[MetaOapg.properties.account_gather_frequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["argv"]) -> typing.Union[MetaOapg.properties.argv, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["array"]) -> typing.Union[MetaOapg.properties.array, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["batch_features"]) -> typing.Union[MetaOapg.properties.batch_features, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["begin_time"]) -> typing.Union[MetaOapg.properties.begin_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["burst_buffer"]) -> typing.Union[MetaOapg.properties.burst_buffer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cluster_constraint"]) -> typing.Union[MetaOapg.properties.cluster_constraint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["constraints"]) -> typing.Union[MetaOapg.properties.constraints, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["container"]) -> typing.Union[MetaOapg.properties.container, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["core_specification"]) -> typing.Union[MetaOapg.properties.core_specification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cores_per_socket"]) -> typing.Union[MetaOapg.properties.cores_per_socket, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpu_binding"]) -> typing.Union[MetaOapg.properties.cpu_binding, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpu_binding_hint"]) -> typing.Union[MetaOapg.properties.cpu_binding_hint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpu_frequency"]) -> typing.Union[MetaOapg.properties.cpu_frequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpus_per_gpu"]) -> typing.Union[MetaOapg.properties.cpus_per_gpu, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpus_per_task"]) -> typing.Union[MetaOapg.properties.cpus_per_task, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_working_directory"]) -> typing.Union[MetaOapg.properties.current_working_directory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deadline"]) -> typing.Union[MetaOapg.properties.deadline, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delay_boot"]) -> typing.Union[MetaOapg.properties.delay_boot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dependency"]) -> typing.Union[MetaOapg.properties.dependency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["distribution"]) -> typing.Union[MetaOapg.properties.distribution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exclusive"]) -> typing.Union[MetaOapg.properties.exclusive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["get_user_environment"]) -> typing.Union[MetaOapg.properties.get_user_environment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gres"]) -> typing.Union[MetaOapg.properties.gres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gres_flags"]) -> typing.Union[MetaOapg.properties.gres_flags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gpu_binding"]) -> typing.Union[MetaOapg.properties.gpu_binding, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gpu_frequency"]) -> typing.Union[MetaOapg.properties.gpu_frequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gpus"]) -> typing.Union[MetaOapg.properties.gpus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gpus_per_node"]) -> typing.Union[MetaOapg.properties.gpus_per_node, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gpus_per_socket"]) -> typing.Union[MetaOapg.properties.gpus_per_socket, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gpus_per_task"]) -> typing.Union[MetaOapg.properties.gpus_per_task, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hold"]) -> typing.Union[MetaOapg.properties.hold, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kill_on_invalid_dependency"]) -> typing.Union[MetaOapg.properties.kill_on_invalid_dependency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["licenses"]) -> typing.Union[MetaOapg.properties.licenses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mail_type"]) -> typing.Union[MetaOapg.properties.mail_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mail_user"]) -> typing.Union[MetaOapg.properties.mail_user, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mcs_label"]) -> typing.Union[MetaOapg.properties.mcs_label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memory_binding"]) -> typing.Union[MetaOapg.properties.memory_binding, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memory_per_cpu"]) -> typing.Union[MetaOapg.properties.memory_per_cpu, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memory_per_gpu"]) -> typing.Union[MetaOapg.properties.memory_per_gpu, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memory_per_node"]) -> typing.Union[MetaOapg.properties.memory_per_node, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimum_cpus_per_node"]) -> typing.Union[MetaOapg.properties.minimum_cpus_per_node, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimum_nodes"]) -> typing.Union[MetaOapg.properties.minimum_nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nice"]) -> typing.Union[MetaOapg.properties.nice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["no_kill"]) -> typing.Union[MetaOapg.properties.no_kill, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodes"]) -> typing.Union[MetaOapg.properties.nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["open_mode"]) -> typing.Union[MetaOapg.properties.open_mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oversubscribe"]) -> typing.Union[MetaOapg.properties.oversubscribe, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partition"]) -> typing.Union[MetaOapg.properties.partition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefer"]) -> typing.Union[MetaOapg.properties.prefer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> typing.Union[MetaOapg.properties.priority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qos"]) -> typing.Union[MetaOapg.properties.qos, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requeue"]) -> typing.Union[MetaOapg.properties.requeue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reservation"]) -> typing.Union[MetaOapg.properties.reservation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signal"]) -> typing.Union[MetaOapg.properties.signal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sockets_per_node"]) -> typing.Union[MetaOapg.properties.sockets_per_node, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spread_job"]) -> typing.Union[MetaOapg.properties.spread_job, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["standard_error"]) -> typing.Union[MetaOapg.properties.standard_error, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["standard_input"]) -> typing.Union[MetaOapg.properties.standard_input, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["standard_output"]) -> typing.Union[MetaOapg.properties.standard_output, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tasks"]) -> typing.Union[MetaOapg.properties.tasks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tasks_per_core"]) -> typing.Union[MetaOapg.properties.tasks_per_core, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tasks_per_node"]) -> typing.Union[MetaOapg.properties.tasks_per_node, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tasks_per_socket"]) -> typing.Union[MetaOapg.properties.tasks_per_socket, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thread_specification"]) -> typing.Union[MetaOapg.properties.thread_specification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["threads_per_core"]) -> typing.Union[MetaOapg.properties.threads_per_core, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_limit"]) -> typing.Union[MetaOapg.properties.time_limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_minimum"]) -> typing.Union[MetaOapg.properties.time_minimum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wait_all_nodes"]) -> typing.Union[MetaOapg.properties.wait_all_nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wckey"]) -> typing.Union[MetaOapg.properties.wckey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["environment", "account", "account_gather_frequency", "argv", "array", "batch_features", "begin_time", "burst_buffer", "cluster_constraint", "comment", "constraints", "container", "core_specification", "cores_per_socket", "cpu_binding", "cpu_binding_hint", "cpu_frequency", "cpus_per_gpu", "cpus_per_task", "current_working_directory", "deadline", "delay_boot", "dependency", "distribution", "exclusive", "get_user_environment", "gres", "gres_flags", "gpu_binding", "gpu_frequency", "gpus", "gpus_per_node", "gpus_per_socket", "gpus_per_task", "hold", "kill_on_invalid_dependency", "licenses", "mail_type", "mail_user", "mcs_label", "memory_binding", "memory_per_cpu", "memory_per_gpu", "memory_per_node", "minimum_cpus_per_node", "minimum_nodes", "name", "nice", "no_kill", "nodes", "open_mode", "oversubscribe", "partition", "prefer", "priority", "qos", "requeue", "reservation", "signal", "sockets_per_node", "spread_job", "standard_error", "standard_input", "standard_output", "tasks", "tasks_per_core", "tasks_per_node", "tasks_per_socket", "thread_specification", "threads_per_core", "time_limit", "time_minimum", "wait_all_nodes", "wckey", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        environment: typing.Union[MetaOapg.properties.environment, dict, frozendict.frozendict, ],
        account: typing.Union[MetaOapg.properties.account, str, schemas.Unset] = schemas.unset,
        account_gather_frequency: typing.Union[MetaOapg.properties.account_gather_frequency, str, schemas.Unset] = schemas.unset,
        argv: typing.Union[MetaOapg.properties.argv, list, tuple, schemas.Unset] = schemas.unset,
        array: typing.Union[MetaOapg.properties.array, str, schemas.Unset] = schemas.unset,
        batch_features: typing.Union[MetaOapg.properties.batch_features, str, schemas.Unset] = schemas.unset,
        begin_time: typing.Union[MetaOapg.properties.begin_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        burst_buffer: typing.Union[MetaOapg.properties.burst_buffer, str, schemas.Unset] = schemas.unset,
        cluster_constraint: typing.Union[MetaOapg.properties.cluster_constraint, str, schemas.Unset] = schemas.unset,
        comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
        constraints: typing.Union[MetaOapg.properties.constraints, str, schemas.Unset] = schemas.unset,
        container: typing.Union[MetaOapg.properties.container, str, schemas.Unset] = schemas.unset,
        core_specification: typing.Union[MetaOapg.properties.core_specification, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cores_per_socket: typing.Union[MetaOapg.properties.cores_per_socket, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cpu_binding: typing.Union[MetaOapg.properties.cpu_binding, str, schemas.Unset] = schemas.unset,
        cpu_binding_hint: typing.Union[MetaOapg.properties.cpu_binding_hint, str, schemas.Unset] = schemas.unset,
        cpu_frequency: typing.Union[MetaOapg.properties.cpu_frequency, str, schemas.Unset] = schemas.unset,
        cpus_per_gpu: typing.Union[MetaOapg.properties.cpus_per_gpu, str, schemas.Unset] = schemas.unset,
        cpus_per_task: typing.Union[MetaOapg.properties.cpus_per_task, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        current_working_directory: typing.Union[MetaOapg.properties.current_working_directory, str, schemas.Unset] = schemas.unset,
        deadline: typing.Union[MetaOapg.properties.deadline, str, schemas.Unset] = schemas.unset,
        delay_boot: typing.Union[MetaOapg.properties.delay_boot, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        dependency: typing.Union[MetaOapg.properties.dependency, str, schemas.Unset] = schemas.unset,
        distribution: typing.Union[MetaOapg.properties.distribution, str, schemas.Unset] = schemas.unset,
        exclusive: typing.Union[MetaOapg.properties.exclusive, str, schemas.Unset] = schemas.unset,
        get_user_environment: typing.Union[MetaOapg.properties.get_user_environment, bool, schemas.Unset] = schemas.unset,
        gres: typing.Union[MetaOapg.properties.gres, str, schemas.Unset] = schemas.unset,
        gres_flags: typing.Union[MetaOapg.properties.gres_flags, str, schemas.Unset] = schemas.unset,
        gpu_binding: typing.Union[MetaOapg.properties.gpu_binding, str, schemas.Unset] = schemas.unset,
        gpu_frequency: typing.Union[MetaOapg.properties.gpu_frequency, str, schemas.Unset] = schemas.unset,
        gpus: typing.Union[MetaOapg.properties.gpus, str, schemas.Unset] = schemas.unset,
        gpus_per_node: typing.Union[MetaOapg.properties.gpus_per_node, str, schemas.Unset] = schemas.unset,
        gpus_per_socket: typing.Union[MetaOapg.properties.gpus_per_socket, str, schemas.Unset] = schemas.unset,
        gpus_per_task: typing.Union[MetaOapg.properties.gpus_per_task, str, schemas.Unset] = schemas.unset,
        hold: typing.Union[MetaOapg.properties.hold, bool, schemas.Unset] = schemas.unset,
        kill_on_invalid_dependency: typing.Union[MetaOapg.properties.kill_on_invalid_dependency, bool, schemas.Unset] = schemas.unset,
        licenses: typing.Union[MetaOapg.properties.licenses, str, schemas.Unset] = schemas.unset,
        mail_type: typing.Union[MetaOapg.properties.mail_type, str, schemas.Unset] = schemas.unset,
        mail_user: typing.Union[MetaOapg.properties.mail_user, str, schemas.Unset] = schemas.unset,
        mcs_label: typing.Union[MetaOapg.properties.mcs_label, str, schemas.Unset] = schemas.unset,
        memory_binding: typing.Union[MetaOapg.properties.memory_binding, str, schemas.Unset] = schemas.unset,
        memory_per_cpu: typing.Union[MetaOapg.properties.memory_per_cpu, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        memory_per_gpu: typing.Union[MetaOapg.properties.memory_per_gpu, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        memory_per_node: typing.Union[MetaOapg.properties.memory_per_node, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        minimum_cpus_per_node: typing.Union[MetaOapg.properties.minimum_cpus_per_node, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        minimum_nodes: typing.Union[MetaOapg.properties.minimum_nodes, bool, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        nice: typing.Union[MetaOapg.properties.nice, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        no_kill: typing.Union[MetaOapg.properties.no_kill, bool, schemas.Unset] = schemas.unset,
        nodes: typing.Union[MetaOapg.properties.nodes, list, tuple, schemas.Unset] = schemas.unset,
        open_mode: typing.Union[MetaOapg.properties.open_mode, str, schemas.Unset] = schemas.unset,
        oversubscribe: typing.Union[MetaOapg.properties.oversubscribe, bool, schemas.Unset] = schemas.unset,
        partition: typing.Union[MetaOapg.properties.partition, str, schemas.Unset] = schemas.unset,
        prefer: typing.Union[MetaOapg.properties.prefer, str, schemas.Unset] = schemas.unset,
        priority: typing.Union[MetaOapg.properties.priority, str, schemas.Unset] = schemas.unset,
        qos: typing.Union[MetaOapg.properties.qos, str, schemas.Unset] = schemas.unset,
        requeue: typing.Union[MetaOapg.properties.requeue, bool, schemas.Unset] = schemas.unset,
        reservation: typing.Union[MetaOapg.properties.reservation, str, schemas.Unset] = schemas.unset,
        signal: typing.Union[MetaOapg.properties.signal, str, schemas.Unset] = schemas.unset,
        sockets_per_node: typing.Union[MetaOapg.properties.sockets_per_node, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        spread_job: typing.Union[MetaOapg.properties.spread_job, bool, schemas.Unset] = schemas.unset,
        standard_error: typing.Union[MetaOapg.properties.standard_error, str, schemas.Unset] = schemas.unset,
        standard_input: typing.Union[MetaOapg.properties.standard_input, str, schemas.Unset] = schemas.unset,
        standard_output: typing.Union[MetaOapg.properties.standard_output, str, schemas.Unset] = schemas.unset,
        tasks: typing.Union[MetaOapg.properties.tasks, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tasks_per_core: typing.Union[MetaOapg.properties.tasks_per_core, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tasks_per_node: typing.Union[MetaOapg.properties.tasks_per_node, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tasks_per_socket: typing.Union[MetaOapg.properties.tasks_per_socket, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        thread_specification: typing.Union[MetaOapg.properties.thread_specification, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        threads_per_core: typing.Union[MetaOapg.properties.threads_per_core, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        time_limit: typing.Union[MetaOapg.properties.time_limit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        time_minimum: typing.Union[MetaOapg.properties.time_minimum, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        wait_all_nodes: typing.Union[MetaOapg.properties.wait_all_nodes, bool, schemas.Unset] = schemas.unset,
        wckey: typing.Union[MetaOapg.properties.wckey, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V0038JobProperties':
        return super().__new__(
            cls,
            *_args,
            environment=environment,
            account=account,
            account_gather_frequency=account_gather_frequency,
            argv=argv,
            array=array,
            batch_features=batch_features,
            begin_time=begin_time,
            burst_buffer=burst_buffer,
            cluster_constraint=cluster_constraint,
            comment=comment,
            constraints=constraints,
            container=container,
            core_specification=core_specification,
            cores_per_socket=cores_per_socket,
            cpu_binding=cpu_binding,
            cpu_binding_hint=cpu_binding_hint,
            cpu_frequency=cpu_frequency,
            cpus_per_gpu=cpus_per_gpu,
            cpus_per_task=cpus_per_task,
            current_working_directory=current_working_directory,
            deadline=deadline,
            delay_boot=delay_boot,
            dependency=dependency,
            distribution=distribution,
            exclusive=exclusive,
            get_user_environment=get_user_environment,
            gres=gres,
            gres_flags=gres_flags,
            gpu_binding=gpu_binding,
            gpu_frequency=gpu_frequency,
            gpus=gpus,
            gpus_per_node=gpus_per_node,
            gpus_per_socket=gpus_per_socket,
            gpus_per_task=gpus_per_task,
            hold=hold,
            kill_on_invalid_dependency=kill_on_invalid_dependency,
            licenses=licenses,
            mail_type=mail_type,
            mail_user=mail_user,
            mcs_label=mcs_label,
            memory_binding=memory_binding,
            memory_per_cpu=memory_per_cpu,
            memory_per_gpu=memory_per_gpu,
            memory_per_node=memory_per_node,
            minimum_cpus_per_node=minimum_cpus_per_node,
            minimum_nodes=minimum_nodes,
            name=name,
            nice=nice,
            no_kill=no_kill,
            nodes=nodes,
            open_mode=open_mode,
            oversubscribe=oversubscribe,
            partition=partition,
            prefer=prefer,
            priority=priority,
            qos=qos,
            requeue=requeue,
            reservation=reservation,
            signal=signal,
            sockets_per_node=sockets_per_node,
            spread_job=spread_job,
            standard_error=standard_error,
            standard_input=standard_input,
            standard_output=standard_output,
            tasks=tasks,
            tasks_per_core=tasks_per_core,
            tasks_per_node=tasks_per_node,
            tasks_per_socket=tasks_per_socket,
            thread_specification=thread_specification,
            threads_per_core=threads_per_core,
            time_limit=time_limit,
            time_minimum=time_minimum,
            wait_all_nodes=wait_all_nodes,
            wckey=wckey,
            _configuration=_configuration,
            **kwargs,
        )
