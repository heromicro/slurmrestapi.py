# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.39
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class V0039AssocUsage(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            accrue_job_count = schemas.Int32Schema
            group_used_wallclock = schemas.Float64Schema
            fairshare_factor = schemas.Float64Schema
            fairshare_shares = schemas.Int32Schema
            normalized_priority = schemas.Float64Schema
            normalized_shares = schemas.Float64Schema
            effective_normalized_usage = schemas.NumberSchema
            normalized_usage = schemas.NumberSchema
            raw_usage = schemas.NumberSchema
            active_jobs = schemas.Int32Schema
            job_count = schemas.Int32Schema
            fairshare_level = schemas.NumberSchema
            __annotations__ = {
                "accrue_job_count": accrue_job_count,
                "group_used_wallclock": group_used_wallclock,
                "fairshare_factor": fairshare_factor,
                "fairshare_shares": fairshare_shares,
                "normalized_priority": normalized_priority,
                "normalized_shares": normalized_shares,
                "effective_normalized_usage": effective_normalized_usage,
                "normalized_usage": normalized_usage,
                "raw_usage": raw_usage,
                "active_jobs": active_jobs,
                "job_count": job_count,
                "fairshare_level": fairshare_level,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrue_job_count"]) -> MetaOapg.properties.accrue_job_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group_used_wallclock"]) -> MetaOapg.properties.group_used_wallclock: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fairshare_factor"]) -> MetaOapg.properties.fairshare_factor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fairshare_shares"]) -> MetaOapg.properties.fairshare_shares: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normalized_priority"]) -> MetaOapg.properties.normalized_priority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normalized_shares"]) -> MetaOapg.properties.normalized_shares: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effective_normalized_usage"]) -> MetaOapg.properties.effective_normalized_usage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normalized_usage"]) -> MetaOapg.properties.normalized_usage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["raw_usage"]) -> MetaOapg.properties.raw_usage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active_jobs"]) -> MetaOapg.properties.active_jobs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_count"]) -> MetaOapg.properties.job_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fairshare_level"]) -> MetaOapg.properties.fairshare_level: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accrue_job_count", "group_used_wallclock", "fairshare_factor", "fairshare_shares", "normalized_priority", "normalized_shares", "effective_normalized_usage", "normalized_usage", "raw_usage", "active_jobs", "job_count", "fairshare_level", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrue_job_count"]) -> typing.Union[MetaOapg.properties.accrue_job_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group_used_wallclock"]) -> typing.Union[MetaOapg.properties.group_used_wallclock, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fairshare_factor"]) -> typing.Union[MetaOapg.properties.fairshare_factor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fairshare_shares"]) -> typing.Union[MetaOapg.properties.fairshare_shares, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normalized_priority"]) -> typing.Union[MetaOapg.properties.normalized_priority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normalized_shares"]) -> typing.Union[MetaOapg.properties.normalized_shares, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effective_normalized_usage"]) -> typing.Union[MetaOapg.properties.effective_normalized_usage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normalized_usage"]) -> typing.Union[MetaOapg.properties.normalized_usage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["raw_usage"]) -> typing.Union[MetaOapg.properties.raw_usage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active_jobs"]) -> typing.Union[MetaOapg.properties.active_jobs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_count"]) -> typing.Union[MetaOapg.properties.job_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fairshare_level"]) -> typing.Union[MetaOapg.properties.fairshare_level, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accrue_job_count", "group_used_wallclock", "fairshare_factor", "fairshare_shares", "normalized_priority", "normalized_shares", "effective_normalized_usage", "normalized_usage", "raw_usage", "active_jobs", "job_count", "fairshare_level", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        accrue_job_count: typing.Union[MetaOapg.properties.accrue_job_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        group_used_wallclock: typing.Union[MetaOapg.properties.group_used_wallclock, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fairshare_factor: typing.Union[MetaOapg.properties.fairshare_factor, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fairshare_shares: typing.Union[MetaOapg.properties.fairshare_shares, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        normalized_priority: typing.Union[MetaOapg.properties.normalized_priority, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        normalized_shares: typing.Union[MetaOapg.properties.normalized_shares, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        effective_normalized_usage: typing.Union[MetaOapg.properties.effective_normalized_usage, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        normalized_usage: typing.Union[MetaOapg.properties.normalized_usage, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        raw_usage: typing.Union[MetaOapg.properties.raw_usage, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        active_jobs: typing.Union[MetaOapg.properties.active_jobs, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        job_count: typing.Union[MetaOapg.properties.job_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        fairshare_level: typing.Union[MetaOapg.properties.fairshare_level, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V0039AssocUsage':
        return super().__new__(
            cls,
            *_args,
            accrue_job_count=accrue_job_count,
            group_used_wallclock=group_used_wallclock,
            fairshare_factor=fairshare_factor,
            fairshare_shares=fairshare_shares,
            normalized_priority=normalized_priority,
            normalized_shares=normalized_shares,
            effective_normalized_usage=effective_normalized_usage,
            normalized_usage=normalized_usage,
            raw_usage=raw_usage,
            active_jobs=active_jobs,
            job_count=job_count,
            fairshare_level=fairshare_level,
            _configuration=_configuration,
            **kwargs,
        )
