# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.39
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class V0039User(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            
            
            class administrator_level(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def NOT_SET(cls):
                            return cls("Not Set")
                        
                        @schemas.classproperty
                        def NONE(cls):
                            return cls("None")
                        
                        @schemas.classproperty
                        def OPERATOR(cls):
                            return cls("Operator")
                        
                        @schemas.classproperty
                        def ADMINISTRATOR(cls):
                            return cls("Administrator")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'administrator_level':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def associations() -> typing.Type['V0039AssocShortList']:
                return V0039AssocShortList
        
            @staticmethod
            def coordinators() -> typing.Type['V0039CoordList']:
                return V0039CoordList
            
            
            class default(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        wckey = schemas.StrSchema
                        __annotations__ = {
                            "wckey": wckey,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["wckey"]) -> MetaOapg.properties.wckey: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["wckey", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["wckey"]) -> typing.Union[MetaOapg.properties.wckey, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["wckey", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    wckey: typing.Union[MetaOapg.properties.wckey, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'default':
                    return super().__new__(
                        cls,
                        *_args,
                        wckey=wckey,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class flags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def NONE(cls):
                            return cls("NONE")
                        
                        @schemas.classproperty
                        def DELETED(cls):
                            return cls("DELETED")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'flags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            old_name = schemas.StrSchema
        
            @staticmethod
            def wckeys() -> typing.Type['V0039WckeyList']:
                return V0039WckeyList
            __annotations__ = {
                "name": name,
                "administrator_level": administrator_level,
                "associations": associations,
                "coordinators": coordinators,
                "default": default,
                "flags": flags,
                "old_name": old_name,
                "wckeys": wckeys,
            }
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["administrator_level"]) -> MetaOapg.properties.administrator_level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["associations"]) -> 'V0039AssocShortList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coordinators"]) -> 'V0039CoordList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default"]) -> MetaOapg.properties.default: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flags"]) -> MetaOapg.properties.flags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["old_name"]) -> MetaOapg.properties.old_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wckeys"]) -> 'V0039WckeyList': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "administrator_level", "associations", "coordinators", "default", "flags", "old_name", "wckeys", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["administrator_level"]) -> typing.Union[MetaOapg.properties.administrator_level, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["associations"]) -> typing.Union['V0039AssocShortList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coordinators"]) -> typing.Union['V0039CoordList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default"]) -> typing.Union[MetaOapg.properties.default, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flags"]) -> typing.Union[MetaOapg.properties.flags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["old_name"]) -> typing.Union[MetaOapg.properties.old_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wckeys"]) -> typing.Union['V0039WckeyList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "administrator_level", "associations", "coordinators", "default", "flags", "old_name", "wckeys", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        administrator_level: typing.Union[MetaOapg.properties.administrator_level, list, tuple, schemas.Unset] = schemas.unset,
        associations: typing.Union['V0039AssocShortList', schemas.Unset] = schemas.unset,
        coordinators: typing.Union['V0039CoordList', schemas.Unset] = schemas.unset,
        default: typing.Union[MetaOapg.properties.default, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        flags: typing.Union[MetaOapg.properties.flags, list, tuple, schemas.Unset] = schemas.unset,
        old_name: typing.Union[MetaOapg.properties.old_name, str, schemas.Unset] = schemas.unset,
        wckeys: typing.Union['V0039WckeyList', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V0039User':
        return super().__new__(
            cls,
            *_args,
            name=name,
            administrator_level=administrator_level,
            associations=associations,
            coordinators=coordinators,
            default=default,
            flags=flags,
            old_name=old_name,
            wckeys=wckeys,
            _configuration=_configuration,
            **kwargs,
        )

from slurmrestapi.model.v0039_assoc_short_list import V0039AssocShortList
from slurmrestapi.model.v0039_coord_list import V0039CoordList
from slurmrestapi.model.v0039_wckey_list import V0039WckeyList
