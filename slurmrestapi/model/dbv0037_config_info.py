# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.37
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class Dbv0037ConfigInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class errors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Dbv0037Error']:
                        return Dbv0037Error
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Dbv0037Error'], typing.List['Dbv0037Error']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'errors':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Dbv0037Error':
                    return super().__getitem__(i)
            
            
            class tres(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Dbv0037TresList']:
                        return Dbv0037TresList
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Dbv0037TresList'], typing.List['Dbv0037TresList']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tres':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Dbv0037TresList':
                    return super().__getitem__(i)
            
            
            class accounts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Dbv0037Account']:
                        return Dbv0037Account
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Dbv0037Account'], typing.List['Dbv0037Account']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'accounts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Dbv0037Account':
                    return super().__getitem__(i)
            
            
            class associations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Dbv0037Association']:
                        return Dbv0037Association
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Dbv0037Association'], typing.List['Dbv0037Association']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'associations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Dbv0037Association':
                    return super().__getitem__(i)
            
            
            class users(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Dbv0037User']:
                        return Dbv0037User
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Dbv0037User'], typing.List['Dbv0037User']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'users':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Dbv0037User':
                    return super().__getitem__(i)
            
            
            class qos(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Dbv0037Qos']:
                        return Dbv0037Qos
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Dbv0037Qos'], typing.List['Dbv0037Qos']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'qos':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Dbv0037Qos':
                    return super().__getitem__(i)
            
            
            class wckeys(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Dbv0037Wckey']:
                        return Dbv0037Wckey
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Dbv0037Wckey'], typing.List['Dbv0037Wckey']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'wckeys':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Dbv0037Wckey':
                    return super().__getitem__(i)
            __annotations__ = {
                "errors": errors,
                "tres": tres,
                "accounts": accounts,
                "associations": associations,
                "users": users,
                "qos": qos,
                "wckeys": wckeys,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errors"]) -> MetaOapg.properties.errors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tres"]) -> MetaOapg.properties.tres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accounts"]) -> MetaOapg.properties.accounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["associations"]) -> MetaOapg.properties.associations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["users"]) -> MetaOapg.properties.users: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qos"]) -> MetaOapg.properties.qos: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wckeys"]) -> MetaOapg.properties.wckeys: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["errors", "tres", "accounts", "associations", "users", "qos", "wckeys", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errors"]) -> typing.Union[MetaOapg.properties.errors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tres"]) -> typing.Union[MetaOapg.properties.tres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accounts"]) -> typing.Union[MetaOapg.properties.accounts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["associations"]) -> typing.Union[MetaOapg.properties.associations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["users"]) -> typing.Union[MetaOapg.properties.users, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qos"]) -> typing.Union[MetaOapg.properties.qos, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wckeys"]) -> typing.Union[MetaOapg.properties.wckeys, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["errors", "tres", "accounts", "associations", "users", "qos", "wckeys", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        errors: typing.Union[MetaOapg.properties.errors, list, tuple, schemas.Unset] = schemas.unset,
        tres: typing.Union[MetaOapg.properties.tres, list, tuple, schemas.Unset] = schemas.unset,
        accounts: typing.Union[MetaOapg.properties.accounts, list, tuple, schemas.Unset] = schemas.unset,
        associations: typing.Union[MetaOapg.properties.associations, list, tuple, schemas.Unset] = schemas.unset,
        users: typing.Union[MetaOapg.properties.users, list, tuple, schemas.Unset] = schemas.unset,
        qos: typing.Union[MetaOapg.properties.qos, list, tuple, schemas.Unset] = schemas.unset,
        wckeys: typing.Union[MetaOapg.properties.wckeys, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Dbv0037ConfigInfo':
        return super().__new__(
            cls,
            *_args,
            errors=errors,
            tres=tres,
            accounts=accounts,
            associations=associations,
            users=users,
            qos=qos,
            wckeys=wckeys,
            _configuration=_configuration,
            **kwargs,
        )

from slurmrestapi.model.dbv0037_account import Dbv0037Account
from slurmrestapi.model.dbv0037_association import Dbv0037Association
from slurmrestapi.model.dbv0037_error import Dbv0037Error
from slurmrestapi.model.dbv0037_qos import Dbv0037Qos
from slurmrestapi.model.dbv0037_tres_list import Dbv0037TresList
from slurmrestapi.model.dbv0037_user import Dbv0037User
from slurmrestapi.model.dbv0037_wckey import Dbv0037Wckey
