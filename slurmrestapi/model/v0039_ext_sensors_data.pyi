# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.39
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class V0039ExtSensorsData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def consumed_energy() -> typing.Type['V0039Uint64NoVal']:
                return V0039Uint64NoVal
        
            @staticmethod
            def temperature() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
            energy_update_time = schemas.Int64Schema
            current_watts = schemas.Int32Schema
            __annotations__ = {
                "consumed_energy": consumed_energy,
                "temperature": temperature,
                "energy_update_time": energy_update_time,
                "current_watts": current_watts,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consumed_energy"]) -> 'V0039Uint64NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["temperature"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["energy_update_time"]) -> MetaOapg.properties.energy_update_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_watts"]) -> MetaOapg.properties.current_watts: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["consumed_energy", "temperature", "energy_update_time", "current_watts", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consumed_energy"]) -> typing.Union['V0039Uint64NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["temperature"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["energy_update_time"]) -> typing.Union[MetaOapg.properties.energy_update_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_watts"]) -> typing.Union[MetaOapg.properties.current_watts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["consumed_energy", "temperature", "energy_update_time", "current_watts", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        consumed_energy: typing.Union['V0039Uint64NoVal', schemas.Unset] = schemas.unset,
        temperature: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        energy_update_time: typing.Union[MetaOapg.properties.energy_update_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        current_watts: typing.Union[MetaOapg.properties.current_watts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V0039ExtSensorsData':
        return super().__new__(
            cls,
            *_args,
            consumed_energy=consumed_energy,
            temperature=temperature,
            energy_update_time=energy_update_time,
            current_watts=current_watts,
            _configuration=_configuration,
            **kwargs,
        )

from slurmrestapi.model.v0039_uint32_no_val import V0039Uint32NoVal
from slurmrestapi.model.v0039_uint64_no_val import V0039Uint64NoVal
