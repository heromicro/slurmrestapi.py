# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.38
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class V0038License(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            LicenseName = schemas.StrSchema
            Total = schemas.IntSchema
            Used = schemas.IntSchema
            Free = schemas.IntSchema
            Reserved = schemas.IntSchema
            Remote = schemas.BoolSchema
            __annotations__ = {
                "LicenseName": LicenseName,
                "Total": Total,
                "Used": Used,
                "Free": Free,
                "Reserved": Reserved,
                "Remote": Remote,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LicenseName"]) -> MetaOapg.properties.LicenseName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Total"]) -> MetaOapg.properties.Total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Used"]) -> MetaOapg.properties.Used: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Free"]) -> MetaOapg.properties.Free: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Reserved"]) -> MetaOapg.properties.Reserved: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Remote"]) -> MetaOapg.properties.Remote: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["LicenseName", "Total", "Used", "Free", "Reserved", "Remote", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LicenseName"]) -> typing.Union[MetaOapg.properties.LicenseName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Total"]) -> typing.Union[MetaOapg.properties.Total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Used"]) -> typing.Union[MetaOapg.properties.Used, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Free"]) -> typing.Union[MetaOapg.properties.Free, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Reserved"]) -> typing.Union[MetaOapg.properties.Reserved, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Remote"]) -> typing.Union[MetaOapg.properties.Remote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["LicenseName", "Total", "Used", "Free", "Reserved", "Remote", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        LicenseName: typing.Union[MetaOapg.properties.LicenseName, str, schemas.Unset] = schemas.unset,
        Total: typing.Union[MetaOapg.properties.Total, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Used: typing.Union[MetaOapg.properties.Used, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Free: typing.Union[MetaOapg.properties.Free, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Reserved: typing.Union[MetaOapg.properties.Reserved, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Remote: typing.Union[MetaOapg.properties.Remote, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V0038License':
        return super().__new__(
            cls,
            *_args,
            LicenseName=LicenseName,
            Total=Total,
            Used=Used,
            Free=Free,
            Reserved=Reserved,
            Remote=Remote,
            _configuration=_configuration,
            **kwargs,
        )
