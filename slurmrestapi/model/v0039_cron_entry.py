# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.39
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class V0039CronEntry(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class flags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "WILD_MINUTE": "MINUTE",
                                "WILD_HOUR": "HOUR",
                                "WILD_DAY_OF_MONTH": "DAY_OF_MONTH",
                                "WILD_MONTH": "MONTH",
                                "WILD_DAY_OF_WEEK": "DAY_OF_WEEK",
                            }
                        
                        @schemas.classproperty
                        def MINUTE(cls):
                            return cls("WILD_MINUTE")
                        
                        @schemas.classproperty
                        def HOUR(cls):
                            return cls("WILD_HOUR")
                        
                        @schemas.classproperty
                        def DAY_OF_MONTH(cls):
                            return cls("WILD_DAY_OF_MONTH")
                        
                        @schemas.classproperty
                        def MONTH(cls):
                            return cls("WILD_MONTH")
                        
                        @schemas.classproperty
                        def DAY_OF_WEEK(cls):
                            return cls("WILD_DAY_OF_WEEK")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'flags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            minute = schemas.StrSchema
            hour = schemas.StrSchema
            day_of_month = schemas.StrSchema
            month = schemas.StrSchema
            day_of_week = schemas.StrSchema
            specification = schemas.StrSchema
            command = schemas.StrSchema
            
            
            class line(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        end = schemas.Int32Schema
                        __annotations__ = {
                            "end": end,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["end"]) -> MetaOapg.properties.end: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["end", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["end"]) -> typing.Union[MetaOapg.properties.end, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["end", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    end: typing.Union[MetaOapg.properties.end, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'line':
                    return super().__new__(
                        cls,
                        *_args,
                        end=end,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "flags": flags,
                "minute": minute,
                "hour": hour,
                "day_of_month": day_of_month,
                "month": month,
                "day_of_week": day_of_week,
                "specification": specification,
                "command": command,
                "line": line,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flags"]) -> MetaOapg.properties.flags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minute"]) -> MetaOapg.properties.minute: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hour"]) -> MetaOapg.properties.hour: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["day_of_month"]) -> MetaOapg.properties.day_of_month: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["month"]) -> MetaOapg.properties.month: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["day_of_week"]) -> MetaOapg.properties.day_of_week: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["specification"]) -> MetaOapg.properties.specification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["command"]) -> MetaOapg.properties.command: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["line"]) -> MetaOapg.properties.line: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["flags", "minute", "hour", "day_of_month", "month", "day_of_week", "specification", "command", "line", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flags"]) -> typing.Union[MetaOapg.properties.flags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minute"]) -> typing.Union[MetaOapg.properties.minute, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hour"]) -> typing.Union[MetaOapg.properties.hour, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["day_of_month"]) -> typing.Union[MetaOapg.properties.day_of_month, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["month"]) -> typing.Union[MetaOapg.properties.month, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["day_of_week"]) -> typing.Union[MetaOapg.properties.day_of_week, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["specification"]) -> typing.Union[MetaOapg.properties.specification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["command"]) -> typing.Union[MetaOapg.properties.command, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["line"]) -> typing.Union[MetaOapg.properties.line, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["flags", "minute", "hour", "day_of_month", "month", "day_of_week", "specification", "command", "line", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        flags: typing.Union[MetaOapg.properties.flags, list, tuple, schemas.Unset] = schemas.unset,
        minute: typing.Union[MetaOapg.properties.minute, str, schemas.Unset] = schemas.unset,
        hour: typing.Union[MetaOapg.properties.hour, str, schemas.Unset] = schemas.unset,
        day_of_month: typing.Union[MetaOapg.properties.day_of_month, str, schemas.Unset] = schemas.unset,
        month: typing.Union[MetaOapg.properties.month, str, schemas.Unset] = schemas.unset,
        day_of_week: typing.Union[MetaOapg.properties.day_of_week, str, schemas.Unset] = schemas.unset,
        specification: typing.Union[MetaOapg.properties.specification, str, schemas.Unset] = schemas.unset,
        command: typing.Union[MetaOapg.properties.command, str, schemas.Unset] = schemas.unset,
        line: typing.Union[MetaOapg.properties.line, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V0039CronEntry':
        return super().__new__(
            cls,
            *_args,
            flags=flags,
            minute=minute,
            hour=hour,
            day_of_month=day_of_month,
            month=month,
            day_of_week=day_of_week,
            specification=specification,
            command=command,
            line=line,
            _configuration=_configuration,
            **kwargs,
        )
