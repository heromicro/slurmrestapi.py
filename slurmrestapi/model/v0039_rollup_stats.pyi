# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.39
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class V0039RollupStats(
    schemas.ListSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    list of recorded rollup statistics
    """


    class MetaOapg:
        
        
        class items(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class type(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def INTERNAL(cls):
                            return cls("internal")
                        
                        @schemas.classproperty
                        def USER(cls):
                            return cls("user")
                        
                        @schemas.classproperty
                        def UNKNOWN(cls):
                            return cls("unknown")
                    last_run = schemas.Int32Schema
                    max_cycle = schemas.Int64Schema
                    total_time = schemas.Int64Schema
                    total_cycles = schemas.Int64Schema
                    mean_cycles = schemas.Int64Schema
                    __annotations__ = {
                        "type": type,
                        "last run": last_run,
                        "max_cycle": max_cycle,
                        "total_time": total_time,
                        "total_cycles": total_cycles,
                        "mean_cycles": mean_cycles,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["last run"]) -> MetaOapg.properties.last_run: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["max_cycle"]) -> MetaOapg.properties.max_cycle: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["total_time"]) -> MetaOapg.properties.total_time: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["total_cycles"]) -> MetaOapg.properties.total_cycles: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["mean_cycles"]) -> MetaOapg.properties.mean_cycles: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "last run", "max_cycle", "total_time", "total_cycles", "mean_cycles", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["last run"]) -> typing.Union[MetaOapg.properties.last_run, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["max_cycle"]) -> typing.Union[MetaOapg.properties.max_cycle, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["total_time"]) -> typing.Union[MetaOapg.properties.total_time, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["total_cycles"]) -> typing.Union[MetaOapg.properties.total_cycles, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["mean_cycles"]) -> typing.Union[MetaOapg.properties.mean_cycles, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "last run", "max_cycle", "total_time", "total_cycles", "mean_cycles", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                max_cycle: typing.Union[MetaOapg.properties.max_cycle, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                total_time: typing.Union[MetaOapg.properties.total_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                total_cycles: typing.Union[MetaOapg.properties.total_cycles, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                mean_cycles: typing.Union[MetaOapg.properties.mean_cycles, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *_args,
                    type=type,
                    max_cycle=max_cycle,
                    total_time=total_time,
                    total_cycles=total_cycles,
                    mean_cycles=mean_cycles,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'V0039RollupStats':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
