# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.39
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class V0039UpdateNodeMsg(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            comment = schemas.StrSchema
            cpu_bind = schemas.Int32Schema
            extra = schemas.StrSchema
        
            @staticmethod
            def features() -> typing.Type['V0039CsvList']:
                return V0039CsvList
        
            @staticmethod
            def features_act() -> typing.Type['V0039CsvList']:
                return V0039CsvList
            gres = schemas.StrSchema
        
            @staticmethod
            def address() -> typing.Type['V0039HostlistString']:
                return V0039HostlistString
        
            @staticmethod
            def hostname() -> typing.Type['V0039HostlistString']:
                return V0039HostlistString
        
            @staticmethod
            def name() -> typing.Type['V0039HostlistString']:
                return V0039HostlistString
            
            
            class state(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "INVALID": "INVALID",
                                "UNKNOWN": "UNKNOWN",
                                "DOWN": "DOWN",
                                "IDLE": "IDLE",
                                "ALLOCATED": "ALLOCATED",
                                "ERROR": "ERROR",
                                "MIXED": "MIXED",
                                "FUTURE": "FUTURE",
                                "PERFCTRS": "PERFCTRS",
                                "RESERVED": "RESERVED",
                                "UNDRAIN": "UNDRAIN",
                                "CLOUD": "CLOUD",
                                "RESUME": "RESUME",
                                "DRAIN": "DRAIN",
                                "COMPLETING": "COMPLETING",
                                "NOT_RESPONDING": "NOT_RESPONDING",
                                "POWERED_DOWN": "POWERED_DOWN",
                                "FAIL": "FAIL",
                                "POWERING_UP": "POWERING_UP",
                                "MAINTENANCE": "MAINTENANCE",
                                "REBOOT_REQUESTED": "REBOOT_REQUESTED",
                                "REBOOT_CANCELED": "REBOOT_CANCELED",
                                "POWERING_DOWN": "POWERING_DOWN",
                                "DYNAMIC_FUTURE": "DYNAMIC_FUTURE",
                                "REBOOT_ISSUED": "REBOOT_ISSUED",
                                "PLANNED": "PLANNED",
                                "INVALID_REG": "INVALID_REG",
                                "POWER_DOWN": "POWER_DOWN",
                                "POWER_UP": "POWER_UP",
                                "POWER_DRAIN": "POWER_DRAIN",
                                "DYNAMIC_NORM": "DYNAMIC_NORM",
                            }
                        
                        @schemas.classproperty
                        def INVALID(cls):
                            return cls("INVALID")
                        
                        @schemas.classproperty
                        def UNKNOWN(cls):
                            return cls("UNKNOWN")
                        
                        @schemas.classproperty
                        def DOWN(cls):
                            return cls("DOWN")
                        
                        @schemas.classproperty
                        def IDLE(cls):
                            return cls("IDLE")
                        
                        @schemas.classproperty
                        def ALLOCATED(cls):
                            return cls("ALLOCATED")
                        
                        @schemas.classproperty
                        def ERROR(cls):
                            return cls("ERROR")
                        
                        @schemas.classproperty
                        def MIXED(cls):
                            return cls("MIXED")
                        
                        @schemas.classproperty
                        def FUTURE(cls):
                            return cls("FUTURE")
                        
                        @schemas.classproperty
                        def PERFCTRS(cls):
                            return cls("PERFCTRS")
                        
                        @schemas.classproperty
                        def RESERVED(cls):
                            return cls("RESERVED")
                        
                        @schemas.classproperty
                        def UNDRAIN(cls):
                            return cls("UNDRAIN")
                        
                        @schemas.classproperty
                        def CLOUD(cls):
                            return cls("CLOUD")
                        
                        @schemas.classproperty
                        def RESUME(cls):
                            return cls("RESUME")
                        
                        @schemas.classproperty
                        def DRAIN(cls):
                            return cls("DRAIN")
                        
                        @schemas.classproperty
                        def COMPLETING(cls):
                            return cls("COMPLETING")
                        
                        @schemas.classproperty
                        def NOT_RESPONDING(cls):
                            return cls("NOT_RESPONDING")
                        
                        @schemas.classproperty
                        def POWERED_DOWN(cls):
                            return cls("POWERED_DOWN")
                        
                        @schemas.classproperty
                        def FAIL(cls):
                            return cls("FAIL")
                        
                        @schemas.classproperty
                        def POWERING_UP(cls):
                            return cls("POWERING_UP")
                        
                        @schemas.classproperty
                        def MAINTENANCE(cls):
                            return cls("MAINTENANCE")
                        
                        @schemas.classproperty
                        def REBOOT_REQUESTED(cls):
                            return cls("REBOOT_REQUESTED")
                        
                        @schemas.classproperty
                        def REBOOT_CANCELED(cls):
                            return cls("REBOOT_CANCELED")
                        
                        @schemas.classproperty
                        def POWERING_DOWN(cls):
                            return cls("POWERING_DOWN")
                        
                        @schemas.classproperty
                        def DYNAMIC_FUTURE(cls):
                            return cls("DYNAMIC_FUTURE")
                        
                        @schemas.classproperty
                        def REBOOT_ISSUED(cls):
                            return cls("REBOOT_ISSUED")
                        
                        @schemas.classproperty
                        def PLANNED(cls):
                            return cls("PLANNED")
                        
                        @schemas.classproperty
                        def INVALID_REG(cls):
                            return cls("INVALID_REG")
                        
                        @schemas.classproperty
                        def POWER_DOWN(cls):
                            return cls("POWER_DOWN")
                        
                        @schemas.classproperty
                        def POWER_UP(cls):
                            return cls("POWER_UP")
                        
                        @schemas.classproperty
                        def POWER_DRAIN(cls):
                            return cls("POWER_DRAIN")
                        
                        @schemas.classproperty
                        def DYNAMIC_NORM(cls):
                            return cls("DYNAMIC_NORM")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'state':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            reason = schemas.StrSchema
            reason_uid = schemas.StrSchema
        
            @staticmethod
            def resume_after() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
        
            @staticmethod
            def weight() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
            __annotations__ = {
                "comment": comment,
                "cpu_bind": cpu_bind,
                "extra": extra,
                "features": features,
                "features_act": features_act,
                "gres": gres,
                "address": address,
                "hostname": hostname,
                "name": name,
                "state": state,
                "reason": reason,
                "reason_uid": reason_uid,
                "resume_after": resume_after,
                "weight": weight,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpu_bind"]) -> MetaOapg.properties.cpu_bind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extra"]) -> MetaOapg.properties.extra: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["features"]) -> 'V0039CsvList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["features_act"]) -> 'V0039CsvList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gres"]) -> MetaOapg.properties.gres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> 'V0039HostlistString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostname"]) -> 'V0039HostlistString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> 'V0039HostlistString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason_uid"]) -> MetaOapg.properties.reason_uid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resume_after"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weight"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["comment", "cpu_bind", "extra", "features", "features_act", "gres", "address", "hostname", "name", "state", "reason", "reason_uid", "resume_after", "weight", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpu_bind"]) -> typing.Union[MetaOapg.properties.cpu_bind, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extra"]) -> typing.Union[MetaOapg.properties.extra, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["features"]) -> typing.Union['V0039CsvList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["features_act"]) -> typing.Union['V0039CsvList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gres"]) -> typing.Union[MetaOapg.properties.gres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union['V0039HostlistString', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostname"]) -> typing.Union['V0039HostlistString', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union['V0039HostlistString', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason_uid"]) -> typing.Union[MetaOapg.properties.reason_uid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resume_after"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weight"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["comment", "cpu_bind", "extra", "features", "features_act", "gres", "address", "hostname", "name", "state", "reason", "reason_uid", "resume_after", "weight", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
        cpu_bind: typing.Union[MetaOapg.properties.cpu_bind, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        extra: typing.Union[MetaOapg.properties.extra, str, schemas.Unset] = schemas.unset,
        features: typing.Union['V0039CsvList', schemas.Unset] = schemas.unset,
        features_act: typing.Union['V0039CsvList', schemas.Unset] = schemas.unset,
        gres: typing.Union[MetaOapg.properties.gres, str, schemas.Unset] = schemas.unset,
        address: typing.Union['V0039HostlistString', schemas.Unset] = schemas.unset,
        hostname: typing.Union['V0039HostlistString', schemas.Unset] = schemas.unset,
        name: typing.Union['V0039HostlistString', schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, list, tuple, schemas.Unset] = schemas.unset,
        reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
        reason_uid: typing.Union[MetaOapg.properties.reason_uid, str, schemas.Unset] = schemas.unset,
        resume_after: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        weight: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V0039UpdateNodeMsg':
        return super().__new__(
            cls,
            *_args,
            comment=comment,
            cpu_bind=cpu_bind,
            extra=extra,
            features=features,
            features_act=features_act,
            gres=gres,
            address=address,
            hostname=hostname,
            name=name,
            state=state,
            reason=reason,
            reason_uid=reason_uid,
            resume_after=resume_after,
            weight=weight,
            _configuration=_configuration,
            **kwargs,
        )

from slurmrestapi.model.v0039_csv_list import V0039CsvList
from slurmrestapi.model.v0039_hostlist_string import V0039HostlistString
from slurmrestapi.model.v0039_uint32_no_val import V0039Uint32NoVal
