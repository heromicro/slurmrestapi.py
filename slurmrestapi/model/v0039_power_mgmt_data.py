# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.39
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class V0039PowerMgmtData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def maximum_watts() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
            current_watts = schemas.Int32Schema
            total_energy = schemas.Int64Schema
            new_maximum_watts = schemas.Int32Schema
            peak_watts = schemas.Int32Schema
            lowest_watts = schemas.Int32Schema
            new_job_time = schemas.Int64Schema
            state = schemas.Int32Schema
            time_start_day = schemas.Int64Schema
            __annotations__ = {
                "maximum_watts": maximum_watts,
                "current_watts": current_watts,
                "total_energy": total_energy,
                "new_maximum_watts": new_maximum_watts,
                "peak_watts": peak_watts,
                "lowest_watts": lowest_watts,
                "new_job_time": new_job_time,
                "state": state,
                "time_start_day": time_start_day,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maximum_watts"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_watts"]) -> MetaOapg.properties.current_watts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_energy"]) -> MetaOapg.properties.total_energy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["new_maximum_watts"]) -> MetaOapg.properties.new_maximum_watts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["peak_watts"]) -> MetaOapg.properties.peak_watts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lowest_watts"]) -> MetaOapg.properties.lowest_watts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["new_job_time"]) -> MetaOapg.properties.new_job_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_start_day"]) -> MetaOapg.properties.time_start_day: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["maximum_watts", "current_watts", "total_energy", "new_maximum_watts", "peak_watts", "lowest_watts", "new_job_time", "state", "time_start_day", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maximum_watts"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_watts"]) -> typing.Union[MetaOapg.properties.current_watts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_energy"]) -> typing.Union[MetaOapg.properties.total_energy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["new_maximum_watts"]) -> typing.Union[MetaOapg.properties.new_maximum_watts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["peak_watts"]) -> typing.Union[MetaOapg.properties.peak_watts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lowest_watts"]) -> typing.Union[MetaOapg.properties.lowest_watts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["new_job_time"]) -> typing.Union[MetaOapg.properties.new_job_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_start_day"]) -> typing.Union[MetaOapg.properties.time_start_day, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["maximum_watts", "current_watts", "total_energy", "new_maximum_watts", "peak_watts", "lowest_watts", "new_job_time", "state", "time_start_day", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        maximum_watts: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        current_watts: typing.Union[MetaOapg.properties.current_watts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_energy: typing.Union[MetaOapg.properties.total_energy, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        new_maximum_watts: typing.Union[MetaOapg.properties.new_maximum_watts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        peak_watts: typing.Union[MetaOapg.properties.peak_watts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        lowest_watts: typing.Union[MetaOapg.properties.lowest_watts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        new_job_time: typing.Union[MetaOapg.properties.new_job_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        time_start_day: typing.Union[MetaOapg.properties.time_start_day, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V0039PowerMgmtData':
        return super().__new__(
            cls,
            *_args,
            maximum_watts=maximum_watts,
            current_watts=current_watts,
            total_energy=total_energy,
            new_maximum_watts=new_maximum_watts,
            peak_watts=peak_watts,
            lowest_watts=lowest_watts,
            new_job_time=new_job_time,
            state=state,
            time_start_day=time_start_day,
            _configuration=_configuration,
            **kwargs,
        )

from slurmrestapi.model.v0039_uint32_no_val import V0039Uint32NoVal
