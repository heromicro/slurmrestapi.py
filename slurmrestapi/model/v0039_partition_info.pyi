# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    The version of the OpenAPI document: 0.0.39
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slurmrestapi import schemas  # noqa: F401


class V0039PartitionInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class nodes(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        total = schemas.Int32Schema
                        __annotations__ = {
                            "total": total,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["total", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'nodes':
                    return super().__new__(
                        cls,
                        *_args,
                        total=total,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class accounts(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        deny = schemas.StrSchema
                        __annotations__ = {
                            "deny": deny,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["deny"]) -> MetaOapg.properties.deny: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["deny", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["deny"]) -> typing.Union[MetaOapg.properties.deny, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["deny", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    deny: typing.Union[MetaOapg.properties.deny, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'accounts':
                    return super().__new__(
                        cls,
                        *_args,
                        deny=deny,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class groups(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        allowed = schemas.StrSchema
                        __annotations__ = {
                            "allowed": allowed,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["allowed"]) -> MetaOapg.properties.allowed: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["allowed", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["allowed"]) -> typing.Union[MetaOapg.properties.allowed, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["allowed", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    allowed: typing.Union[MetaOapg.properties.allowed, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'groups':
                    return super().__new__(
                        cls,
                        *_args,
                        allowed=allowed,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class qos(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        assigned = schemas.StrSchema
                        __annotations__ = {
                            "assigned": assigned,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["assigned"]) -> MetaOapg.properties.assigned: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["assigned", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["assigned"]) -> typing.Union[MetaOapg.properties.assigned, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["assigned", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    assigned: typing.Union[MetaOapg.properties.assigned, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'qos':
                    return super().__new__(
                        cls,
                        *_args,
                        assigned=assigned,
                        _configuration=_configuration,
                        **kwargs,
                    )
            alternate = schemas.StrSchema
            
            
            class tres(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        configured = schemas.StrSchema
                        __annotations__ = {
                            "configured": configured,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["configured"]) -> MetaOapg.properties.configured: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["configured", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["configured"]) -> typing.Union[MetaOapg.properties.configured, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["configured", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    configured: typing.Union[MetaOapg.properties.configured, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'tres':
                    return super().__new__(
                        cls,
                        *_args,
                        configured=configured,
                        _configuration=_configuration,
                        **kwargs,
                    )
            cluster = schemas.StrSchema
            
            
            class cpus(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        total = schemas.Int32Schema
                        __annotations__ = {
                            "total": total,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["total", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'cpus':
                    return super().__new__(
                        cls,
                        *_args,
                        total=total,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class defaults(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        job = schemas.StrSchema
                        __annotations__ = {
                            "job": job,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["job"]) -> MetaOapg.properties.job: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["job", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["job"]) -> typing.Union[MetaOapg.properties.job, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["job", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    job: typing.Union[MetaOapg.properties.job, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'defaults':
                    return super().__new__(
                        cls,
                        *_args,
                        job=job,
                        _configuration=_configuration,
                        **kwargs,
                    )
            grace_time = schemas.Int32Schema
            
            
            class maximums(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                    
                        @staticmethod
                        def over_time_limit() -> typing.Type['V0039Uint16NoVal']:
                            return V0039Uint16NoVal
                        __annotations__ = {
                            "over_time_limit": over_time_limit,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["over_time_limit"]) -> 'V0039Uint16NoVal': ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["over_time_limit", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["over_time_limit"]) -> typing.Union['V0039Uint16NoVal', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["over_time_limit", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    over_time_limit: typing.Union['V0039Uint16NoVal', schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'maximums':
                    return super().__new__(
                        cls,
                        *_args,
                        over_time_limit=over_time_limit,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class minimums(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        nodes = schemas.Int32Schema
                        __annotations__ = {
                            "nodes": nodes,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["nodes"]) -> MetaOapg.properties.nodes: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["nodes", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["nodes"]) -> typing.Union[MetaOapg.properties.nodes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["nodes", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    nodes: typing.Union[MetaOapg.properties.nodes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'minimums':
                    return super().__new__(
                        cls,
                        *_args,
                        nodes=nodes,
                        _configuration=_configuration,
                        **kwargs,
                    )
            name = schemas.StrSchema
            node_sets = schemas.StrSchema
            
            
            class priority(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        tier = schemas.Int32Schema
                        __annotations__ = {
                            "tier": tier,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["tier"]) -> MetaOapg.properties.tier: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["tier", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["tier"]) -> typing.Union[MetaOapg.properties.tier, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tier", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    tier: typing.Union[MetaOapg.properties.tier, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'priority':
                    return super().__new__(
                        cls,
                        *_args,
                        tier=tier,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class timeouts(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                    
                        @staticmethod
                        def suspend() -> typing.Type['V0039Uint16NoVal']:
                            return V0039Uint16NoVal
                        __annotations__ = {
                            "suspend": suspend,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["suspend"]) -> 'V0039Uint16NoVal': ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["suspend", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["suspend"]) -> typing.Union['V0039Uint16NoVal', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["suspend", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    suspend: typing.Union['V0039Uint16NoVal', schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'timeouts':
                    return super().__new__(
                        cls,
                        *_args,
                        suspend=suspend,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def suspend_time() -> typing.Type['V0039Uint32NoVal']:
                return V0039Uint32NoVal
            __annotations__ = {
                "nodes": nodes,
                "accounts": accounts,
                "groups": groups,
                "qos": qos,
                "alternate": alternate,
                "tres": tres,
                "cluster": cluster,
                "cpus": cpus,
                "defaults": defaults,
                "grace_time": grace_time,
                "maximums": maximums,
                "minimums": minimums,
                "name": name,
                "node_sets": node_sets,
                "priority": priority,
                "timeouts": timeouts,
                "suspend_time": suspend_time,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodes"]) -> MetaOapg.properties.nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accounts"]) -> MetaOapg.properties.accounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qos"]) -> MetaOapg.properties.qos: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alternate"]) -> MetaOapg.properties.alternate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tres"]) -> MetaOapg.properties.tres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cluster"]) -> MetaOapg.properties.cluster: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpus"]) -> MetaOapg.properties.cpus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaults"]) -> MetaOapg.properties.defaults: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grace_time"]) -> MetaOapg.properties.grace_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maximums"]) -> MetaOapg.properties.maximums: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimums"]) -> MetaOapg.properties.minimums: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["node_sets"]) -> MetaOapg.properties.node_sets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeouts"]) -> MetaOapg.properties.timeouts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suspend_time"]) -> 'V0039Uint32NoVal': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["nodes", "accounts", "groups", "qos", "alternate", "tres", "cluster", "cpus", "defaults", "grace_time", "maximums", "minimums", "name", "node_sets", "priority", "timeouts", "suspend_time", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodes"]) -> typing.Union[MetaOapg.properties.nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accounts"]) -> typing.Union[MetaOapg.properties.accounts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groups"]) -> typing.Union[MetaOapg.properties.groups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qos"]) -> typing.Union[MetaOapg.properties.qos, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alternate"]) -> typing.Union[MetaOapg.properties.alternate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tres"]) -> typing.Union[MetaOapg.properties.tres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cluster"]) -> typing.Union[MetaOapg.properties.cluster, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpus"]) -> typing.Union[MetaOapg.properties.cpus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaults"]) -> typing.Union[MetaOapg.properties.defaults, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grace_time"]) -> typing.Union[MetaOapg.properties.grace_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maximums"]) -> typing.Union[MetaOapg.properties.maximums, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimums"]) -> typing.Union[MetaOapg.properties.minimums, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["node_sets"]) -> typing.Union[MetaOapg.properties.node_sets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> typing.Union[MetaOapg.properties.priority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeouts"]) -> typing.Union[MetaOapg.properties.timeouts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suspend_time"]) -> typing.Union['V0039Uint32NoVal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["nodes", "accounts", "groups", "qos", "alternate", "tres", "cluster", "cpus", "defaults", "grace_time", "maximums", "minimums", "name", "node_sets", "priority", "timeouts", "suspend_time", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        nodes: typing.Union[MetaOapg.properties.nodes, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        accounts: typing.Union[MetaOapg.properties.accounts, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        groups: typing.Union[MetaOapg.properties.groups, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        qos: typing.Union[MetaOapg.properties.qos, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        alternate: typing.Union[MetaOapg.properties.alternate, str, schemas.Unset] = schemas.unset,
        tres: typing.Union[MetaOapg.properties.tres, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        cluster: typing.Union[MetaOapg.properties.cluster, str, schemas.Unset] = schemas.unset,
        cpus: typing.Union[MetaOapg.properties.cpus, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        defaults: typing.Union[MetaOapg.properties.defaults, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        grace_time: typing.Union[MetaOapg.properties.grace_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        maximums: typing.Union[MetaOapg.properties.maximums, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        minimums: typing.Union[MetaOapg.properties.minimums, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        node_sets: typing.Union[MetaOapg.properties.node_sets, str, schemas.Unset] = schemas.unset,
        priority: typing.Union[MetaOapg.properties.priority, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        timeouts: typing.Union[MetaOapg.properties.timeouts, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        suspend_time: typing.Union['V0039Uint32NoVal', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V0039PartitionInfo':
        return super().__new__(
            cls,
            *_args,
            nodes=nodes,
            accounts=accounts,
            groups=groups,
            qos=qos,
            alternate=alternate,
            tres=tres,
            cluster=cluster,
            cpus=cpus,
            defaults=defaults,
            grace_time=grace_time,
            maximums=maximums,
            minimums=minimums,
            name=name,
            node_sets=node_sets,
            priority=priority,
            timeouts=timeouts,
            suspend_time=suspend_time,
            _configuration=_configuration,
            **kwargs,
        )

from slurmrestapi.model.v0039_uint16_no_val import V0039Uint16NoVal
from slurmrestapi.model.v0039_uint32_no_val import V0039Uint32NoVal
